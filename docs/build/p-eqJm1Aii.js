import{D as n}from"./p-8CHUc0Tf.js";import"./p-DWrf3bWA.js";import"./p-uEsOKkhe.js";async function i(i,t,e){const s={...n,...e};const o=new AbortController;const r=setTimeout((()=>o.abort()),s.apiTimeout);try{const n=await fetch(s.graphqlEndpoint,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({query:i,variables:t}),signal:o.signal});clearTimeout(r);if(!n.ok){throw new Error(`HTTP ${n.status}: ${n.statusText}`)}const e=await n.json();if(e.errors){throw new Error(`GraphQL errors: ${e.errors.map((n=>n.message)).join(", ")}`)}return e.data}catch(n){clearTimeout(r);const i=n instanceof Error?n.message:"Unknown error";throw new Error(`VLP query failed: ${i}`)}}async function t(n,t,e,s){const o=`\n    query All_pools($chainUid: String!, $vlpAddress: String!, $limit: Int, $offset: Int) {\n      vlp(chain_uid: $chainUid, vlp_address: $vlpAddress) {\n        all_pools(limit: $limit, offset: $offset) {\n          pools {\n            pool_id\n            pair {\n              token_1\n              token_2\n            }\n            total_liquidity\n            fees_collected\n            volume_24h\n            apy\n          }\n          pagination {\n            total_count\n            limit\n            offset\n          }\n        }\n      }\n    }\n  `;const r=await i(o,{chainUid:n,vlpAddress:t,limit:e,offset:s});return r.vlp.all_pools}async function e(n,t,e,s){const o=`\n    query All_positions($chainUid: String!, $vlpAddress: String!, $limit: Int, $offset: Int) {\n      vlp(chain_uid: $chainUid, vlp_address: $vlpAddress) {\n        all_positions(limit: $limit, offset: $offset) {\n          positions {\n            position_id\n            owner\n            pool_id\n            liquidity_amount\n            fees_earned\n            created_at\n            status\n          }\n          pagination {\n            total_count\n            limit\n            offset\n          }\n        }\n      }\n    }\n  `;const r=await i(o,{chainUid:n,vlpAddress:t,limit:e,offset:s});return r.vlp.all_positions}async function s(n,t){const e=`\n    query Asset_list($chainUid: String!, $vlpAddress: String!) {\n      vlp(chain_uid: $chainUid, vlp_address: $vlpAddress) {\n        asset_list {\n          assets {\n            asset_id\n            symbol\n            name\n            decimals\n            total_supply\n            price_usd\n          }\n        }\n      }\n    }\n  `;const s=await i(e,{chainUid:n,vlpAddress:t});return s.vlp.asset_list}async function o(n,t,e,s,o){const r=`\n    query My_positions($chainUid: String!, $vlpAddress: String!, $userAddress: String!, $limit: Int, $offset: Int) {\n      vlp(chain_uid: $chainUid, vlp_address: $vlpAddress) {\n        my_positions(user_address: $userAddress, limit: $limit, offset: $offset) {\n          positions {\n            position_id\n            pool_id\n            liquidity_amount\n            fees_earned\n            current_value\n            pnl\n            created_at\n          }\n          pagination {\n            total_count\n            limit\n            offset\n          }\n        }\n      }\n    }\n  `;const d=await i(r,{chainUid:n,vlpAddress:t,userAddress:e,limit:s,offset:o});return d.vlp.my_positions}async function r(n,t,e){const s=`\n    query Pool($chainUid: String!, $vlpAddress: String!, $poolId: String!) {\n      vlp(chain_uid: $chainUid, vlp_address: $vlpAddress) {\n        pool(pool_id: $poolId) {\n          pool_id\n          pair {\n            token_1\n            token_2\n          }\n          total_liquidity\n          fees_collected\n          volume_24h\n          volume_7d\n          volume_30d\n          apy\n          fee_tier\n          reserves {\n            token_1_reserve\n            token_2_reserve\n          }\n          price_ratio\n          status\n        }\n      }\n    }\n  `;const o=await i(s,{chainUid:n,vlpAddress:t,poolId:e});return o.vlp.pool}async function d(n,t,e){const s=`\n    query Position($chainUid: String!, $vlpAddress: String!, $positionId: String!) {\n      vlp(chain_uid: $chainUid, vlp_address: $vlpAddress) {\n        position(position_id: $positionId) {\n          position_id\n          owner\n          pool_id\n          liquidity_amount\n          fees_earned\n          current_value\n          initial_value\n          pnl\n          pnl_percentage\n          created_at\n          last_updated\n          status\n        }\n      }\n    }\n  `;const o=await i(s,{chainUid:n,vlpAddress:t,positionId:e});return o.vlp.position}async function a(n,t,e){const s=`\n    query Total_fees_collected($chainUid: String!, $vlpAddress: String!, $timeframe: String) {\n      vlp(chain_uid: $chainUid, vlp_address: $vlpAddress) {\n        total_fees_collected(timeframe: $timeframe) {\n          total_fees\n          fees_by_token {\n            token_id\n            amount\n            value_usd\n          }\n          timeframe\n          collection_period {\n            start_date\n            end_date\n          }\n        }\n      }\n    }\n  `;const o=await i(s,{chainUid:n,vlpAddress:t,timeframe:e});return o.vlp.total_fees_collected}export{t as getAllPoolsImpl,e as getAllPositionsImpl,s as getAssetListImpl,o as getMyPositionsImpl,r as getPoolImpl,d as getPositionImpl,a as getTotalFeesCollectedImpl};
//# sourceMappingURL=p-eqJm1Aii.js.map