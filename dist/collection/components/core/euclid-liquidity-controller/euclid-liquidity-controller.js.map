{"version":3,"file":"euclid-liquidity-controller.js","sourceRoot":"","sources":["../../../../src/components/core/euclid-liquidity-controller/euclid-liquidity-controller.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Listen, State, Watch } from '@stencil/core';\nimport { liquidityStore } from '../../../store/liquidity.store';\nimport { marketStore } from '../../../store/market.store';\nimport { walletStore } from '../../../store/wallet.store';\nimport { apiClient } from '../../../utils/api-client';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\n\ninterface TransactionResponse {\n  txHash?: string;\n  transactionHash?: string;\n}\n\n@Component({\n  tag: 'euclid-liquidity-controller',\n})\nexport class EuclidLiquidityController {\n  @State() isInitialized = false;\n\n  async componentDidLoad() {\n    await this.initialize();\n  }\n\n  private async initialize() {\n    console.log('üíß Initializing Liquidity Controller...');\n\n    // Subscribe to liquidity store changes\n    liquidityStore.onChange('selectedPool', () => this.handlePoolChange());\n\n    this.isInitialized = true;\n    console.log('‚úÖ Liquidity Controller initialized');\n  }\n\n  private handlePoolChange() {\n    const { selectedPool } = liquidityStore.state;\n    if (selectedPool) {\n      console.log('üèä Pool selected for liquidity operations:', selectedPool.id);\n    }\n  }\n\n  // Execute add liquidity transaction\n  async executeAddLiquidity(): Promise<{ success: boolean; txHash?: string; error?: string }> {\n    try {\n      const { selectedPool, token1, token2, token1Amount, token2Amount } = liquidityStore.state;\n\n      if (!selectedPool || !token1 || !token2 || !token1Amount || !token2Amount) {\n        return { success: false, error: 'Missing required liquidity parameters' };\n      }\n\n      // Check if wallets are connected for both tokens\n      const token1Wallet = walletStore.getWallet(token1.chainUID);\n      const token2Wallet = walletStore.getWallet(token2.chainUID);\n\n      if (!token1Wallet?.isConnected) {\n        return { success: false, error: `Wallet not connected for ${token1.symbol}` };\n      }\n\n      if (!token2Wallet?.isConnected) {\n        return { success: false, error: `Wallet not connected for ${token2.symbol}` };\n      }\n\n      // Check sufficient balances\n      if (!walletStore.hasSufficientBalance(token1.chainUID, token1.id, token1Amount)) {\n        return { success: false, error: `Insufficient ${token1.symbol} balance` };\n      }\n\n      if (!walletStore.hasSufficientBalance(token2.chainUID, token2.id, token2Amount)) {\n        return { success: false, error: `Insufficient ${token2.symbol} balance` };\n      }\n\n      liquidityStore.setAddingLiquidity(true);\n\n      console.log('üíß Executing add liquidity...', {\n        pool: selectedPool.id,\n        token1: token1.symbol,\n        token2: token2.symbol,\n        amount1: token1Amount,\n        amount2: token2Amount,\n      });\n\n      // Execute add liquidity via API\n      const result = await apiClient.createAddLiquidityTransactionWrapped({\n        slippage_tolerance_bps: 50, // 0.5% = 50 basis points\n        timeout: (Math.floor(Date.now() / 1000) + 1200).toString(), // 20 minutes\n        pair_info: {\n          token_1: {\n            token: token1.id,\n            amount: token1Amount,\n            token_type: token1.token_type || { native: { denom: token1.id } }\n          },\n          token_2: {\n            token: token2.id,\n            amount: token2Amount,\n            token_type: token2.token_type || { native: { denom: token2.id } }\n          }\n        },\n        sender: {\n          address: token1Wallet.address,\n          chain_uid: token1.chainUID\n        }\n      });\n\n      if (result.success && result.data) {\n        const transactionData = result.data as TransactionResponse;\n        const { txHash } = transactionData;\n\n                // Get wallet info and track the transaction\n        const connectedWallets = walletStore.getAllConnectedWallets();\n        const walletInfo = connectedWallets[0]; // Use primary wallet\n        const primaryChain = walletInfo.chainUID;\n\n        walletStore.addTransaction(primaryChain, {\n          txHash: txHash || (result.data as TransactionResponse)?.transactionHash || 'pending',\n          timestamp: Date.now(),\n          type: 'add_liquidity'\n        });\n\n        // Emit global event for transaction tracking\n        dispatchEuclidEvent(EUCLID_EVENTS.TRANSACTION.SUBMITTED, {\n          txHash,\n          chainUID: primaryChain,\n          type: 'add_liquidity',\n        });\n\n        console.log('‚úÖ Add liquidity transaction submitted:', txHash);\n        return { success: true, txHash };\n      } else {\n        return { success: false, error: result.error || 'Add liquidity execution failed' };\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      console.error('‚ùå Add liquidity execution error:', errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      liquidityStore.setAddingLiquidity(false);\n    }\n  }\n\n  // Execute remove liquidity transaction\n  async executeRemoveLiquidity(\n    poolId: string,\n    lpTokenAmount: string\n  ): Promise<{ success: boolean; txHash?: string; error?: string }> {\n    try {\n      const position = liquidityStore.getPosition(poolId);\n      if (!position) {\n        return { success: false, error: 'Liquidity position not found' };\n      }\n\n      // Get the pool info from market store\n      const allPools = marketStore.state.pools;\n      const pool = allPools.find(p => p.id === poolId);\n\n      if (!pool) {\n        return { success: false, error: 'Pool not found' };\n      }\n\n      // Get token metadata to find chain info\n      const tokens = marketStore.state.tokens;\n      const token1 = tokens.find(t => t.address === pool.token_1);\n      if (!token1) {\n        return { success: false, error: 'Token metadata not found' };\n      }\n\n      const primaryWallet = walletStore.getWallet(token1.chain_uid);\n\n      if (!primaryWallet?.isConnected) {\n        return { success: false, error: `Wallet not connected for ${token1.chain_uid}` };\n      }\n\n      // Check sufficient LP token balance\n      const lpBalance = walletStore.getWalletBalance(token1.chain_uid, `lp-${poolId}`);\n      if (!lpBalance || BigInt(lpBalance.amount) < BigInt(lpTokenAmount)) {\n        return { success: false, error: 'Insufficient LP token balance' };\n      }\n\n      liquidityStore.setRemovingLiquidity(true);\n\n      console.log('üíß Executing remove liquidity...', {\n        poolId,\n        lpAmount: lpTokenAmount,\n      });\n\n      // Execute remove liquidity via API\n      const result = await apiClient.createRemoveLiquidityTransactionWrapped({\n        slippage_tolerance_bps: 50, // 0.5% = 50 basis points\n        timeout: (Math.floor(Date.now() / 1000) + 1200).toString(), // 20 minutes\n        lp_token_amount: lpTokenAmount,\n        sender: {\n          address: primaryWallet.address,\n          chain_uid: token1.chain_uid\n        }\n      });\n\n      if (result.success && result.data) {\n        const transactionData = result.data as TransactionResponse;\n        const { txHash } = transactionData;\n\n        // Add transaction to wallet store\n        walletStore.addTransaction(token1.chain_uid, {\n          txHash,\n          timestamp: Date.now(),\n          type: 'remove_liquidity'\n        });\n\n        // Emit global event for transaction tracking\n        dispatchEuclidEvent(EUCLID_EVENTS.TRANSACTION.SUBMITTED, {\n          txHash,\n          chainUID: token1.chain_uid,\n          type: 'remove_liquidity',\n        });\n\n        console.log('‚úÖ Remove liquidity transaction submitted:', txHash);\n        return { success: true, txHash };\n      } else {\n        return { success: false, error: result.error || 'Remove liquidity execution failed' };\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      console.error('‚ùå Remove liquidity execution error:', errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      liquidityStore.setRemovingLiquidity(false);\n    }\n  }\n\n  // Event listeners\n  @Listen(EUCLID_EVENTS.LIQUIDITY.ADD_REQUEST, { target: 'window' })\n  async handleAddLiquidityExecution() {\n    console.log('üíß Add liquidity execution requested via event');\n    const result = await this.executeAddLiquidity();\n\n    // Emit result event\n    if (result.success) {\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.ADD_SUCCESS, {\n        txHash: result.txHash,\n      });\n    } else {\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.ADD_FAILED, {\n        error: result.error,\n      });\n    }\n  }\n\n  @Listen(EUCLID_EVENTS.LIQUIDITY.REMOVE_REQUEST, { target: 'window' })\n  async handleRemoveLiquidityExecution(event: CustomEvent<{ poolId: string; lpTokenAmount: string }>) {\n    console.log('üíß Remove liquidity execution requested via event');\n    const { poolId, lpTokenAmount } = event.detail;\n    const result = await this.executeRemoveLiquidity(poolId, lpTokenAmount);\n\n    // Emit result event\n    if (result.success) {\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.REMOVE_SUCCESS, {\n        txHash: result.txHash,\n      });\n    } else {\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.REMOVE_FAILED, {\n        error: result.error,\n      });\n    }\n  }\n\n  @Watch('isInitialized')\n  onInitializedChange(newValue: boolean) {\n    if (newValue) {\n      console.log('üíß Liquidity Controller ready for operations');\n    }\n  }\n\n  render() {\n    // This is a headless controller - no visual output\n    return null;\n  }\n}\n"]}