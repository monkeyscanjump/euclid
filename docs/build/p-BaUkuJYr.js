import{D as n}from"./p-8CHUc0Tf.js";import"./p-DWrf3bWA.js";import"./p-uEsOKkhe.js";async function t(t,i,o){const a={...n,...o};const e=new AbortController;const r=setTimeout((()=>e.abort()),a.apiTimeout);try{const n=await fetch(a.graphqlEndpoint,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({query:t,variables:i}),signal:e.signal});clearTimeout(r);if(!n.ok){throw new Error(`HTTP ${n.status}: ${n.statusText}`)}const o=await n.json();if(o.errors){throw new Error(`GraphQL errors: ${o.errors.map((n=>n.message)).join(", ")}`)}return o.data}catch(n){clearTimeout(r);const t=n instanceof Error?n.message:"Unknown error";throw new Error(`Factory query failed: ${t}`)}}async function i(n,i,o){const a=`\n    query All_pools($chainUid: String!, $limit: Int, $offset: Int) {\n      factory(chain_uid: $chainUid) {\n        all_pools(limit: $limit, offset: $offset) {\n          pagination {\n            total_count\n            limit\n            offset\n          }\n          pools {\n            pair {\n              token_1\n              token_2\n            }\n            vlp\n          }\n        }\n      }\n    }\n  `;const e=await t(a,{chainUid:n,limit:i,offset:o});return e.factory.all_pools}async function o(n,i,o){const a=`\n    query All_tokens($chainUid: String!, $limit: Int, $offset: Int) {\n      factory(chain_uid: $chainUid) {\n        all_tokens(limit: $limit, offset: $offset) {\n          tokens\n          pagination {\n            total_count\n            limit\n            offset\n          }\n        }\n      }\n    }\n  `;const e=await t(a,{chainUid:n,limit:i,offset:o});return e.factory.all_tokens}async function a(n){const i=`\n    query Allowed_denoms($chainUid: String!) {\n      factory(chain_uid: $chainUid) {\n        allowed_denoms {\n          denoms\n        }\n      }\n    }\n  `;const o=await t(i,{chainUid:n});return o.factory.allowed_denoms}async function e(n,i){const o=`\n    query Escrow($chainUid: String!, $tokenId: String!) {\n      factory(chain_uid: $chainUid) {\n        escrow(token_id: $tokenId) {\n          escrow_address\n          token_id\n          chain_uid\n          denoms\n          balance\n        }\n      }\n    }\n  `;const a=await t(o,{chainUid:n,tokenId:i});return a.factory.escrow}async function r(n,i){const o=`\n    query Get_token_address($chainUid: String!, $tokenId: String!) {\n      factory(chain_uid: $chainUid) {\n        get_token_address(token_id: $tokenId) {\n          token_address\n          token_id\n          chain_uid\n          token_type\n        }\n      }\n    }\n  `;const a=await t(o,{chainUid:n,tokenId:i});return a.factory.get_token_address}async function c(n,i){const o=`\n    query Partner_fees_collected($chainUid: String!, $partner: String!) {\n      factory(chain_uid: $chainUid) {\n        partner_fees_collected(partner: $partner) {\n          partner\n          total_fees\n          fees_by_token {\n            token_id\n            amount\n          }\n        }\n      }\n    }\n  `;const a=await t(o,{chainUid:n,partner:i});return a.factory.partner_fees_collected}async function s(n){const i=`\n    query Factory($chainUid: String!) {\n      factory(chain_uid: $chainUid) {\n        state {\n          chain_uid\n          router_contract\n          hub_channel\n          admin\n        }\n      }\n    }\n  `;const o=await t(i,{chainUid:n});return o.factory.state}async function d(n,i){const o=`\n    query VLP($chainUid: String!, $pair: PairInput!) {\n      factory(chain_uid: $chainUid) {\n        vlp(pair: $pair) {\n          vlp_address\n          pair {\n            token_1\n            token_2\n          }\n          total_liquidity\n          volume_24h\n          fees_24h\n          apr\n          created_at\n        }\n      }\n    }\n  `;const a=await t(o,{chainUid:n,pair:i});return a.factory.vlp}export{i as getAllPoolsImpl,o as getAllTokensImpl,a as getAllowedDenomsImpl,e as getEscrowImpl,c as getPartnerFeesCollectedImpl,s as getStateImpl,r as getTokenAddressImpl,d as getVLPImpl};
//# sourceMappingURL=p-BaUkuJYr.js.map