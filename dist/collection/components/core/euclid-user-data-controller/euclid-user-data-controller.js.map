{"version":3,"file":"euclid-user-data-controller.js","sourceRoot":"","sources":["../../../../src/components/core/euclid-user-data-controller/euclid-user-data-controller.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, State, Listen, Watch } from '@stencil/core';\nimport { walletStore } from '../../../store/wallet.store';\nimport { apiClient } from '../../../utils/api-client';\nimport { DEFAULTS } from '../../../utils/constants';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\nimport type { UserBalance, WalletInfo } from '../../../utils/types';\n\ninterface BalanceItem {\n  denom: string;\n  amount: string;\n}\n\ninterface BalanceData {\n  balance?: {\n    all?: BalanceItem[];\n  };\n}\n\n@Component({\n  tag: 'euclid-user-data-controller',\n})\nexport class EuclidUserDataController {\n  @State() isInitialized = false;\n  @State() isLoading = false;\n  @State() error: string | null = null;\n\n  private refreshTimer: number;\n  private retryCount = 0;\n  private maxRetries = 3;\n\n  async componentDidLoad() {\n    await this.initialize();\n  }\n\n  disconnectedCallback() {\n    this.clearPeriodicRefresh();\n    walletStore.dispose?.();\n  }\n\n  private async initialize() {\n    console.log('üë§ Initializing User Data Controller...');\n\n    // Listen for wallet connection changes\n    walletStore.onChange('wallets', async (wallets: Map<string, WalletInfo>) => {\n      const connectedWallets = Array.from(wallets.values()).filter(wallet => wallet.isConnected);\n      if (connectedWallets.length > 0) {\n        await this.handleWalletConnection(connectedWallets);\n      } else {\n        this.handleWalletDisconnection();\n      }\n    });\n\n    // Initial check for already connected wallets\n    const connectedWallets = walletStore.getAllConnectedWallets();\n    if (connectedWallets.length > 0) {\n      await this.handleWalletConnection(connectedWallets);\n    }\n\n    this.isInitialized = true;\n    console.log('‚úÖ User Data Controller initialized');\n  }\n\n  private async handleWalletConnection(_wallets: WalletInfo[]) {\n    try {\n      this.isLoading = true;\n      this.error = null;\n\n      console.log('üîó Wallets connected, loading user data...');\n\n      // Load user data for each connected wallet\n      await Promise.all([\n        this.loadUserBalances(),\n        this.loadLiquidityPositions(),\n        this.loadUserTransactions()\n      ]);\n\n      // Start periodic refresh\n      this.setupPeriodicRefresh();\n\n      // Reset retry count on success\n      this.retryCount = 0;\n\n    } catch (error) {\n      console.error('‚ùå Failed to load user data:', error);\n      await this.handleLoadError(error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private handleWalletDisconnection() {\n    console.log('üîå Wallets disconnected, clearing user data...');\n\n    this.clearPeriodicRefresh();\n    this.retryCount = 0;\n\n    // Clear all wallet data\n    walletStore.clear();\n  }\n\n  private async loadUserBalances() {\n    const connectedWallets = walletStore.getAllConnectedWallets();\n\n    for (const wallet of connectedWallets) {\n      try {\n        console.log(`üí∞ Loading balances for ${wallet.chainUID}:${wallet.address.slice(0, 8)}...`);\n\n        const balanceResponse = await apiClient.getBalance(wallet.address, wallet.chainUID);\n\n        if (balanceResponse.success && balanceResponse.data) {\n          const balanceData = balanceResponse.data as BalanceData;\n          if (balanceData.balance?.all) {\n            const chainBalances: UserBalance[] = balanceData.balance.all.map(item => ({\n              amount: item.amount,\n              token_id: item.denom,\n              // Legacy compatibility fields\n              token: item.denom,\n              balance: item.amount,\n              chain_uid: wallet.chainUID,\n              token_type: { native: { denom: item.denom } }\n            }));\n\n            // Update wallet store with balances for this chain\n            walletStore.updateWalletBalances(wallet.chainUID, chainBalances);\n          }\n        }\n      } catch (error) {\n        console.warn(`‚ö†Ô∏è Failed to load balance for ${wallet.chainUID}:`, error.message);\n        // Continue loading other addresses even if one fails\n      }\n    }\n\n    console.log(`‚úÖ Updated balances for connected wallets`);\n  }\n\n  private async loadLiquidityPositions() {\n    const connectedWallets = walletStore.getAllConnectedWallets();\n\n    for (const wallet of connectedWallets) {\n      try {\n        console.log(`üèä Loading liquidity positions for ${wallet.chainUID}:${wallet.address.slice(0, 8)}...`);\n\n        // Stub implementation - to be completed later\n        console.log('Liquidity positions loading - implementation pending');\n\n        // TODO: Implement proper liquidity position loading\n        // const poolsResponse = await apiClient.getUserPools(wallet.address);\n        // Process and update walletStore.updateWalletPositions(wallet.chainUID, positions);\n\n      } catch (error) {\n        console.warn(`‚ö†Ô∏è Failed to load liquidity positions for ${wallet.chainUID}:`, error.message);\n      }\n    }\n  }\n\n  private async loadUserTransactions() {\n    const connectedWallets = walletStore.getAllConnectedWallets();\n\n    for (const wallet of connectedWallets) {\n      try {\n        console.log(`üìä Loading transactions for ${wallet.chainUID}:${wallet.address.slice(0, 8)}...`);\n\n        // Stub implementation - to be completed later\n        console.log('Transactions loading - implementation pending');\n\n        // TODO: Implement proper transaction loading\n        // const txResponse = await apiClient.getUserTransactions(wallet.address, wallet.chainUID);\n        // Process and update walletStore.updateWalletTransactions(wallet.chainUID, transactions);\n\n      } catch (error) {\n        console.warn(`‚ö†Ô∏è Failed to load transactions for ${wallet.chainUID}:`, error.message);\n      }\n    }\n  }\n\n  private calculatePoolShare(lpTokenBalance: string, poolInfo: Record<string, unknown>): number {\n    try {\n      const lpBalance = parseFloat(lpTokenBalance);\n      const totalSupply = parseFloat(String(poolInfo.totalSupply || poolInfo.liquidity || '0'));\n\n      if (totalSupply === 0) return 0;\n      return (lpBalance / totalSupply) * 100;\n    } catch {\n      return 0;\n    }\n  }\n\n  private calculateTokenAmount(sharePercentage: number, tokenInfo: Record<string, unknown>): string {\n    try {\n      const reserve = parseFloat(String(tokenInfo.reserve || tokenInfo.balance || '0'));\n      const amount = (reserve * sharePercentage) / 100;\n      return amount.toString();\n    } catch {\n      return '0';\n    }\n  }\n\n  private calculatePositionValue(sharePercentage: number, poolInfo: Record<string, unknown>): string {\n    try {\n      const tvl = parseFloat(String(poolInfo.tvl || poolInfo.liquidity || '0'));\n      const value = (tvl * sharePercentage) / 100;\n      return value.toString();\n    } catch {\n      return '0';\n    }\n  }\n\n  private setupPeriodicRefresh() {\n    this.clearPeriodicRefresh();\n\n    this.refreshTimer = window.setInterval(async () => {\n      // Check if we have connected wallets\n      const connectedWallets = walletStore.getAllConnectedWallets();\n      if (connectedWallets.length > 0) {\n        console.log('üîÑ Refreshing wallet data...');\n        await this.refreshUserData();\n      }\n    }, DEFAULTS.BALANCE_REFRESH_INTERVAL);\n  }\n\n  private clearPeriodicRefresh() {\n    if (this.refreshTimer) {\n      clearInterval(this.refreshTimer);\n      this.refreshTimer = null;\n    }\n  }\n\n  private async refreshUserData() {\n    const connectedWallets = walletStore.getAllConnectedWallets();\n    if (connectedWallets.length === 0) return;\n\n    try {\n      this.isLoading = true;\n\n      await Promise.all([\n        this.loadUserBalances(),\n        this.loadLiquidityPositions()\n      ]);\n\n      // Portfolio value calculation to be implemented later\n      console.log('Portfolio value calculation - implementation pending');\n\n      this.retryCount = 0;\n\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to refresh user data:', error);\n      await this.handleLoadError(error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private async handleLoadError(error: Error) {\n    this.retryCount++;\n\n    if (this.retryCount < this.maxRetries) {\n      console.log(`üîÑ Retrying user data load (${this.retryCount}/${this.maxRetries})...`);\n\n      // Exponential backoff\n      const delay = Math.pow(2, this.retryCount) * 1000;\n      setTimeout(() => {\n        this.refreshUserData();\n      }, delay);\n\n    } else {\n      console.error('‚ùå Max retries reached for user data loading');\n      this.error = error.message || 'Failed to load user data';\n    }\n  }\n\n  @Listen(EUCLID_EVENTS.USER.REFRESH_DATA, { target: 'window' })\n  async handleRefreshRequest() {\n    console.log('üîÑ Manual user data refresh requested');\n    await this.refreshUserData();\n  }\n\n  @Listen(EUCLID_EVENTS.USER.CLEAR_DATA, { target: 'window' })\n  handleClearRequest() {\n    console.log('üóëÔ∏è User data clear requested');\n    walletStore.clear();\n    this.clearPeriodicRefresh();\n  }\n\n  @Watch('isInitialized')\n  onInitializedChange(newValue: boolean) {\n    if (newValue) {\n      // Emit initialization complete event\n      dispatchEuclidEvent(EUCLID_EVENTS.USER.CONTROLLER_READY, {\n        timestamp: Date.now()\n      });\n    }\n  }\n\n  render() {\n    // This is a headless controller - no visual output\n    return null;\n  }\n}\n"]}