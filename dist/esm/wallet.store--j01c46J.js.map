{"version":3,"file":"wallet.store--j01c46J.js","sources":["node_modules/@stencil/store/dist/index.js","src/utils/wallet-adapters.ts","src/store/wallet.store.ts"],"sourcesContent":["import { getRenderingRef, forceUpdate } from '@stencil/core';\n\nconst appendToMap = (map, propName, value) => {\n    const items = map.get(propName);\n    if (!items) {\n        map.set(propName, [value]);\n    }\n    else if (!items.includes(value)) {\n        items.push(value);\n    }\n};\nconst debounce = (fn, ms) => {\n    let timeoutId;\n    return (...args) => {\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(() => {\n            timeoutId = 0;\n            fn(...args);\n        }, ms);\n    };\n};\n\n/**\n * Check if a possible element isConnected.\n * The property might not be there, so we check for it.\n *\n * We want it to return true if isConnected is not a property,\n * otherwise we would remove these elements and would not update.\n *\n * Better leak in Edge than to be useless.\n */\nconst isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;\nconst cleanupElements = debounce((map) => {\n    for (let key of map.keys()) {\n        map.set(key, map.get(key).filter(isConnected));\n    }\n}, 2_000);\nconst stencilSubscription = () => {\n    if (typeof getRenderingRef !== 'function') {\n        // If we are not in a stencil project, we do nothing.\n        // This function is not really exported by @stencil/core.\n        return {};\n    }\n    const elmsToUpdate = new Map();\n    return {\n        dispose: () => elmsToUpdate.clear(),\n        get: (propName) => {\n            const elm = getRenderingRef();\n            if (elm) {\n                appendToMap(elmsToUpdate, propName, elm);\n            }\n        },\n        set: (propName) => {\n            const elements = elmsToUpdate.get(propName);\n            if (elements) {\n                elmsToUpdate.set(propName, elements.filter(forceUpdate));\n            }\n            cleanupElements(elmsToUpdate);\n        },\n        reset: () => {\n            elmsToUpdate.forEach((elms) => elms.forEach(forceUpdate));\n            cleanupElements(elmsToUpdate);\n        },\n    };\n};\n\nconst unwrap = (val) => (typeof val === 'function' ? val() : val);\nconst createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {\n    const unwrappedState = unwrap(defaultState);\n    let states = new Map(Object.entries(unwrappedState ?? {}));\n    const handlers = {\n        dispose: [],\n        get: [],\n        set: [],\n        reset: [],\n    };\n    // Track onChange listeners to enable removeListener functionality\n    const changeListeners = new Map();\n    const reset = () => {\n        // When resetting the state, the default state may be a function - unwrap it to invoke it.\n        // otherwise, the state won't be properly reset\n        states = new Map(Object.entries(unwrap(defaultState) ?? {}));\n        handlers.reset.forEach((cb) => cb());\n    };\n    const dispose = () => {\n        // Call first dispose as resetting the state would\n        // cause less updates ;)\n        handlers.dispose.forEach((cb) => cb());\n        reset();\n    };\n    const get = (propName) => {\n        handlers.get.forEach((cb) => cb(propName));\n        return states.get(propName);\n    };\n    const set = (propName, value) => {\n        const oldValue = states.get(propName);\n        if (shouldUpdate(value, oldValue, propName)) {\n            states.set(propName, value);\n            handlers.set.forEach((cb) => cb(propName, value, oldValue));\n        }\n    };\n    const state = (typeof Proxy === 'undefined'\n        ? {}\n        : new Proxy(unwrappedState, {\n            get(_, propName) {\n                return get(propName);\n            },\n            ownKeys(_) {\n                return Array.from(states.keys());\n            },\n            getOwnPropertyDescriptor() {\n                return {\n                    enumerable: true,\n                    configurable: true,\n                };\n            },\n            has(_, propName) {\n                return states.has(propName);\n            },\n            set(_, propName, value) {\n                set(propName, value);\n                return true;\n            },\n        }));\n    const on = (eventName, callback) => {\n        handlers[eventName].push(callback);\n        return () => {\n            removeFromArray(handlers[eventName], callback);\n        };\n    };\n    const onChange = (propName, cb) => {\n        const setHandler = (key, newValue) => {\n            if (key === propName) {\n                cb(newValue);\n            }\n        };\n        const resetHandler = () => cb(unwrap(defaultState)[propName]);\n        // Register the handlers\n        const unSet = on('set', setHandler);\n        const unReset = on('reset', resetHandler);\n        // Track the relationship between the user callback and internal handlers\n        changeListeners.set(cb, { setHandler, resetHandler, propName });\n        return () => {\n            unSet();\n            unReset();\n            changeListeners.delete(cb);\n        };\n    };\n    const use = (...subscriptions) => {\n        const unsubs = subscriptions.reduce((unsubs, subscription) => {\n            if (subscription.set) {\n                unsubs.push(on('set', subscription.set));\n            }\n            if (subscription.get) {\n                unsubs.push(on('get', subscription.get));\n            }\n            if (subscription.reset) {\n                unsubs.push(on('reset', subscription.reset));\n            }\n            if (subscription.dispose) {\n                unsubs.push(on('dispose', subscription.dispose));\n            }\n            return unsubs;\n        }, []);\n        return () => unsubs.forEach((unsub) => unsub());\n    };\n    const forceUpdate = (key) => {\n        const oldValue = states.get(key);\n        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));\n    };\n    const removeListener = (propName, listener) => {\n        const listenerInfo = changeListeners.get(listener);\n        if (listenerInfo && listenerInfo.propName === propName) {\n            // Remove the specific handlers that were created for this listener\n            removeFromArray(handlers.set, listenerInfo.setHandler);\n            removeFromArray(handlers.reset, listenerInfo.resetHandler);\n            changeListeners.delete(listener);\n        }\n    };\n    return {\n        state,\n        get,\n        set,\n        on,\n        onChange,\n        use,\n        dispose,\n        reset,\n        forceUpdate,\n        removeListener,\n    };\n};\nconst removeFromArray = (array, item) => {\n    const index = array.indexOf(item);\n    if (index >= 0) {\n        array[index] = array[array.length - 1];\n        array.length--;\n    }\n};\n\nconst createStore = (defaultState, shouldUpdate) => {\n    const map = createObservableMap(defaultState, shouldUpdate);\n    map.use(stencilSubscription());\n    return map;\n};\n\nexport { createObservableMap, createStore };\n","/**\n * Wallet Adapters for Euclid Protocol\n * Unified interface for different wallet providers\n */\n\nimport type { WalletAdapter } from './types/euclid-api.types';\nimport type { EuclidChainConfig, TransactionResponse } from './types/api.types';\n\n/**\n * MetaMask wallet adapter for EVM chains\n */\nexport class MetaMaskAdapter implements WalletAdapter {\n  type = 'metamask' as const;\n\n  isAvailable(): boolean {\n    return typeof window !== 'undefined' && Boolean(window.ethereum?.isMetaMask);\n  }\n\n  async connect(chainId?: string): Promise<{ address: string; chainId: string }> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not installed');\n    }\n\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }) as string[];\n\n      if (!accounts || accounts.length === 0) {\n        throw new Error('No accounts found');\n      }\n\n      // Get current chain ID\n      const currentChainId = await window.ethereum.request({\n        method: 'eth_chainId'\n      }) as string;\n\n      // Switch to requested chain if provided\n      if (chainId && chainId !== currentChainId) {\n        await this.switchChain(chainId);\n      }\n\n      return {\n        address: accounts[0],\n        chainId: chainId || currentChainId\n      };\n    } catch (error) {\n      throw new Error(`Failed to connect MetaMask: ${error.message}`);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    // MetaMask doesn't have a disconnect method, this is handled by the wallet\n    console.log('MetaMask disconnect requested');\n  }\n\n  async getBalance(address: string): Promise<string> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not available');\n    }\n\n    try {\n      const balance = await window.ethereum.request({\n        method: 'eth_getBalance',\n        params: [address, 'latest']\n      }) as string;\n\n      return balance;\n    } catch (error) {\n      throw new Error(`Failed to get balance: ${error.message}`);\n    }\n  }\n\n  async signAndBroadcast(transaction: TransactionResponse): Promise<string> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not available');\n    }\n\n    if (transaction.type !== 'evm') {\n      throw new Error('MetaMask can only handle EVM transactions');\n    }\n\n    try {\n      const txHash = await window.ethereum.request({\n        method: 'eth_sendTransaction',\n        params: transaction.msgs.map(msg => ({\n          from: transaction.sender.address,\n          to: msg.to,\n          data: msg.data,\n          value: msg.value,\n          gasLimit: msg.gasLimit\n        }))\n      }) as string;\n\n      return txHash;\n    } catch (error) {\n      throw new Error(`Failed to send transaction: ${error.message}`);\n    }\n  }\n\n  async switchChain(chainId: string): Promise<void> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not available');\n    }\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId }]\n      });\n    } catch (error) {\n      // Chain not added to MetaMask\n      if (error.code === 4902) {\n        throw new Error('Chain not added to MetaMask. Please add the chain first.');\n      }\n      throw new Error(`Failed to switch chain: ${error.message}`);\n    }\n  }\n\n  async addChain(config: EuclidChainConfig): Promise<void> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not available');\n    }\n\n    if (config.type !== 'EVM') {\n      throw new Error('MetaMask only supports EVM chains');\n    }\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_addEthereumChain',\n        params: [{\n          chainId: config.chain_id,\n          chainName: config.display_name,\n          nativeCurrency: {\n            name: 'ETH', // This should come from chain config\n            symbol: 'ETH',\n            decimals: 18\n          },\n          rpcUrls: [config.explorer_url], // This should be RPC URL\n          blockExplorerUrls: [config.explorer_url]\n        }]\n      });\n    } catch (error) {\n      throw new Error(`Failed to add chain: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Keplr wallet adapter for Cosmos chains\n */\nexport class KeplrAdapter implements WalletAdapter {\n  type = 'keplr' as const;\n\n  isAvailable(): boolean {\n    return typeof window !== 'undefined' && Boolean(window.keplr);\n  }\n\n  async connect(chainId?: string): Promise<{ address: string; chainId: string }> {\n    if (!this.isAvailable()) {\n      throw new Error('Keplr is not installed');\n    }\n\n    try {\n      const defaultChainId = chainId || 'cosmoshub-4';\n\n      // Enable the chain\n      await window.keplr.enable(defaultChainId);\n\n      // Get the offline signer\n      const offlineSigner = window.keplr.getOfflineSigner(defaultChainId) as {\n        getAccounts: () => Promise<Array<{ address: string }>>;\n      };\n      const accounts = await offlineSigner.getAccounts();\n\n      if (!accounts || accounts.length === 0) {\n        throw new Error('No accounts found');\n      }\n\n      return {\n        address: accounts[0].address,\n        chainId: defaultChainId\n      };\n    } catch (error) {\n      throw new Error(`Failed to connect Keplr: ${error.message}`);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    // Keplr doesn't have a disconnect method\n    console.log('Keplr disconnect requested');\n  }\n\n  async getBalance(_address: string): Promise<string> {\n    // This would require a Cosmos LCD client\n    throw new Error('Balance checking not implemented for Keplr');\n  }\n\n  async signAndBroadcast(transaction: TransactionResponse): Promise<string> {\n    if (!this.isAvailable()) {\n      throw new Error('Keplr is not available');\n    }\n\n    if (transaction.type !== 'cosmwasm') {\n      throw new Error('Keplr can only handle CosmWasm transactions');\n    }\n\n    try {\n      // This is a simplified implementation\n      // In reality, you'd need to use StargateClient or similar\n\n      // This would need proper Cosmos transaction building\n      throw new Error('CosmWasm transaction signing not fully implemented');\n    } catch (error) {\n      throw new Error(`Failed to send transaction: ${error.message}`);\n    }\n  }\n\n  async switchChain(chainId: string): Promise<void> {\n    if (!this.isAvailable()) {\n      throw new Error('Keplr is not available');\n    }\n\n    try {\n      await window.keplr.enable(chainId);\n    } catch (error) {\n      throw new Error(`Failed to switch to chain ${chainId}: ${error.message}`);\n    }\n  }\n\n  async addChain(config: EuclidChainConfig): Promise<void> {\n    if (!this.isAvailable()) {\n      throw new Error('Keplr is not available');\n    }\n\n    if (config.type !== 'Cosmwasm') {\n      throw new Error('Keplr only supports Cosmos chains');\n    }\n\n    try {\n      await window.keplr.experimentalSuggestChain({\n        chainId: config.chain_id,\n        chainName: config.display_name,\n        rpc: config.explorer_url, // This should be RPC URL\n        rest: config.explorer_url, // This should be REST URL\n        bip44: {\n          coinType: 118\n        },\n        bech32Config: {\n          bech32PrefixAccAddr: 'cosmos',\n          bech32PrefixAccPub: 'cosmospub',\n          bech32PrefixValAddr: 'cosmosvaloper',\n          bech32PrefixValPub: 'cosmosvaloperpub',\n          bech32PrefixConsAddr: 'cosmosvalcons',\n          bech32PrefixConsPub: 'cosmosvalconspub'\n        },\n        currencies: [{\n          coinDenom: 'ATOM',\n          coinMinimalDenom: 'uatom',\n          coinDecimals: 6\n        }],\n        feeCurrencies: [{\n          coinDenom: 'ATOM',\n          coinMinimalDenom: 'uatom',\n          coinDecimals: 6\n        }],\n        stakeCurrency: {\n          coinDenom: 'ATOM',\n          coinMinimalDenom: 'uatom',\n          coinDecimals: 6\n        }\n      });\n    } catch (error) {\n      throw new Error(`Failed to add chain: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Phantom wallet adapter for Solana chains\n */\nexport class PhantomAdapter implements WalletAdapter {\n  type = 'phantom' as const;\n\n  isAvailable(): boolean {\n    return typeof window !== 'undefined' && Boolean(window.solana?.isPhantom);\n  }\n\n  async connect(chainId?: string): Promise<{ address: string; chainId: string }> {\n    if (!this.isAvailable()) {\n      throw new Error('Phantom is not installed');\n    }\n\n    try {\n      const resp = await window.solana.connect();\n\n      return {\n        address: resp.publicKey.toString(),\n        chainId: chainId || 'mainnet-beta'\n      };\n    } catch (error) {\n      throw new Error(`Failed to connect Phantom: ${error.message}`);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.isAvailable()) {\n      await window.solana.disconnect();\n    }\n  }\n\n  async getBalance(_address: string): Promise<string> {\n    // This would require a Solana connection\n    throw new Error('Balance checking not implemented for Phantom');\n  }\n\n  async signAndBroadcast(_transaction: TransactionResponse): Promise<string> {\n    throw new Error('Solana transaction signing not implemented');\n  }\n\n  async switchChain(chainId: string): Promise<void> {\n    // Phantom doesn't support multiple chains\n    console.log(`Chain switching not supported by Phantom: ${chainId}`);\n  }\n\n  async addChain(_config: EuclidChainConfig): Promise<void> {\n    // Phantom doesn't support adding chains\n    throw new Error('Adding chains not supported by Phantom');\n  }\n}\n\n/**\n * Wallet adapter factory\n */\nexport class WalletAdapterFactory {\n  private adapters: Map<string, WalletAdapter> = new Map();\n\n  constructor() {\n    // Register available adapters\n    this.adapters.set('metamask', new MetaMaskAdapter());\n    this.adapters.set('keplr', new KeplrAdapter());\n    this.adapters.set('phantom', new PhantomAdapter());\n  }\n\n  getAdapter(type: 'metamask' | 'keplr' | 'phantom'): WalletAdapter {\n    const adapter = this.adapters.get(type);\n    if (!adapter) {\n      throw new Error(`Unsupported wallet type: ${type}`);\n    }\n    return adapter;\n  }\n\n  getAvailableAdapters(): WalletAdapter[] {\n    return Array.from(this.adapters.values()).filter(adapter => adapter.isAvailable());\n  }\n\n  getAvailableWalletTypes(): ('metamask' | 'keplr' | 'phantom')[] {\n    return this.getAvailableAdapters().map(adapter => adapter.type);\n  }\n}\n\n// Export default factory instance\nexport const walletAdapterFactory = new WalletAdapterFactory();\n","import { createStore } from '@stencil/store';\nimport type { WalletState, WalletInfo } from '../utils/types/euclid-api.types';\nimport type { UserBalance } from '../utils/types/api.types';\nimport type { BaseStore } from './types';\nimport { walletAdapterFactory } from '../utils/wallet-adapters';\n\n// Extended wallet state to support multiple wallets\ninterface ExtendedWalletState extends WalletState {\n  connectedWallets: Map<string, WalletInfo>; // chainUID -> WalletInfo\n  wallets: Map<string, WalletInfo>; // alias for backward compatibility\n}\n\nconst initialState: ExtendedWalletState = {\n  isConnected: false,\n  address: null,\n  chainId: null,\n  chainUID: null,\n  walletType: null,\n  balances: [],\n  loading: false,\n  error: null,\n  connectedWallets: new Map(),\n  wallets: new Map(), // alias for backward compatibility\n};\n\nconst { state, onChange, reset, dispose } = createStore(initialState);\n\n// Actions\nconst actions = {\n  setLoading(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setError(error: string | null) {\n    state.error = error;\n  },\n\n  async connectWallet(walletType: 'metamask' | 'keplr' | 'phantom', chainId?: string) {\n    state.loading = true;\n    state.error = null;\n\n    try {\n      const adapter = walletAdapterFactory.getAdapter(walletType);\n\n      if (!adapter.isAvailable()) {\n        throw new Error(`${walletType} wallet is not installed`);\n      }\n\n      const connection = await adapter.connect(chainId);\n\n      state.isConnected = true;\n      state.address = connection.address;\n      state.chainId = connection.chainId;\n      state.chainUID = connection.chainId; // For now, using chainId as chainUID\n      state.walletType = walletType;\n      state.error = null;\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Failed to connect wallet';\n    } finally {\n      state.loading = false;\n    }\n  },\n\n  async disconnectWallet(chainUID?: string) {\n    if (chainUID) {\n      // Disconnect specific wallet\n      actions.removeWallet(chainUID);\n    } else {\n      // Disconnect all wallets\n      if (state.walletType) {\n        try {\n          const adapter = walletAdapterFactory.getAdapter(state.walletType);\n          await adapter.disconnect();\n        } catch (error) {\n          console.warn('Error disconnecting wallet:', error);\n        }\n      }\n\n      state.isConnected = false;\n      state.address = null;\n      state.chainId = null;\n      state.chainUID = null;\n      state.walletType = null;\n      state.balances = [];\n      state.connectedWallets.clear();\n      state.error = null;\n    }\n  },\n\n  setBalances(balances: UserBalance[]) {\n    state.balances = [...balances];\n  },\n\n  updateBalance(tokenId: string, balance: string) {\n    const existingIndex = state.balances.findIndex(b => b.token === tokenId);\n\n    const balanceObject: UserBalance = {\n      amount: balance,\n      token_id: tokenId,\n      // Legacy compatibility fields\n      token: tokenId,\n      balance: balance,\n      chain_uid: state.chainUID || '',\n      token_type: { native: { denom: tokenId } },\n    };\n\n    if (existingIndex >= 0) {\n      state.balances[existingIndex] = balanceObject;\n    } else {\n      state.balances.push(balanceObject);\n    }\n  },\n\n  async switchChain(chainId: string) {\n    if (!state.walletType) {\n      throw new Error('No wallet connected');\n    }\n\n    state.loading = true;\n    state.error = null;\n\n    try {\n      const adapter = walletAdapterFactory.getAdapter(state.walletType);\n      await adapter.switchChain(chainId);\n\n      state.chainId = chainId;\n      state.chainUID = chainId;\n      state.error = null;\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Failed to switch chain';\n    } finally {\n      state.loading = false;\n    }\n  },\n\n  clear() {\n    reset();\n  },\n\n  // Multi-wallet support methods\n  initialize() {\n    // Check for previously connected wallets and restore connections if possible\n    console.log('Wallet store initialized');\n  },\n\n  addWallet(chainUID: string, walletInfo: Omit<WalletInfo, 'chainUID'>) {\n    const fullWalletInfo: WalletInfo = {\n      ...walletInfo,\n      chainUID,\n      type: walletInfo.walletType, // Set legacy alias\n      name: walletInfo.walletType, // Set legacy name\n    };\n\n    state.connectedWallets.set(chainUID, fullWalletInfo);\n    state.wallets.set(chainUID, fullWalletInfo); // Keep alias synchronized\n\n    // Update primary wallet state if this is the first connection\n    if (!state.isConnected) {\n      state.isConnected = true;\n      state.address = walletInfo.address;\n      state.chainUID = chainUID;\n      state.walletType = walletInfo.walletType;\n      state.balances = [...walletInfo.balances];\n    }\n  },\n\n  removeWallet(chainUID: string) {\n    state.connectedWallets.delete(chainUID);\n    state.wallets.delete(chainUID); // Keep alias synchronized\n\n    // Update primary wallet state if we removed the current primary\n    if (state.chainUID === chainUID) {\n      const remaining = Array.from(state.connectedWallets.values());\n      if (remaining.length > 0) {\n        const newPrimary = remaining[0];\n        state.address = newPrimary.address;\n        state.chainUID = newPrimary.chainUID;\n        state.walletType = newPrimary.walletType;\n        state.balances = [...newPrimary.balances];\n      } else {\n        state.isConnected = false;\n        state.address = null;\n        state.chainUID = null;\n        state.walletType = null;\n        state.balances = [];\n      }\n    }\n  },\n\n  updateWalletBalances(chainUID: string, balances: UserBalance[]) {\n    const wallet = state.connectedWallets.get(chainUID);\n    if (wallet) {\n      const updatedWallet = { ...wallet, balances: [...balances] };\n      state.connectedWallets.set(chainUID, updatedWallet);\n\n      // Update primary state if this is the current primary wallet\n      if (state.chainUID === chainUID) {\n        state.balances = [...balances];\n      }\n    }\n  },\n};\n\n// Getters\nconst getters = {\n  getBalance: (tokenId: string) => {\n    return state.balances.find(balance => balance.token === tokenId);\n  },\n\n  getFormattedBalance: (tokenId: string, decimals: number = 18) => {\n    const balance = getters.getBalance(tokenId);\n    if (!balance) return '0';\n\n    try {\n      const value = BigInt(balance.balance);\n      const divisor = BigInt(10 ** decimals);\n      const beforeDecimal = value / divisor;\n      const afterDecimal = value % divisor;\n\n      return `${beforeDecimal.toString()}.${afterDecimal.toString().padStart(decimals, '0')}`;\n    } catch {\n      return '0';\n    }\n  },\n\n  hasSufficientBalance: (tokenIdOrChainUID: string, amountOrTokenId?: string, amountParam?: string) => {\n    // Support both signatures:\n    // hasSufficientBalance(tokenId, amount) - 2 params\n    // hasSufficientBalance(chainUID, tokenId, amount) - 3 params\n    if (typeof amountParam === 'string' && amountOrTokenId && amountParam) {\n      // 3-parameter version: chainUID, tokenId, amount\n      const chainUID = tokenIdOrChainUID;\n      const tokenId = amountOrTokenId;\n      const amount = amountParam;\n\n      const wallet = state.connectedWallets.get(chainUID);\n      if (!wallet) return false;\n\n      const balance = wallet.balances.find(b => b.token === tokenId);\n      if (!balance) return false;\n\n      try {\n        return BigInt(balance.balance) >= BigInt(amount);\n      } catch {\n        return false;\n      }\n    } else {\n      // 2-parameter version: tokenId, amount\n      const tokenId = tokenIdOrChainUID;\n      const amount = amountOrTokenId || '';\n\n      const balance = getters.getBalance(tokenId);\n      if (!balance) return false;\n\n      try {\n        return BigInt(balance.balance) >= BigInt(amount);\n      } catch {\n        return false;\n      }\n    }\n  },  isWalletAvailable: (walletType: 'metamask' | 'keplr' | 'phantom') => {\n    try {\n      const adapter = walletAdapterFactory.getAdapter(walletType);\n      return adapter.isAvailable();\n    } catch {\n      return false;\n    }\n  },\n\n  getAvailableWallets: () => {\n    return walletAdapterFactory.getAvailableWalletTypes();\n  },\n\n  // Multi-wallet getters\n  isWalletConnected: (chainUID: string) => {\n    const wallet = state.connectedWallets.get(chainUID);\n    return wallet ? wallet.isConnected : false;\n  },\n\n  getAllConnectedWallets: () => {\n    return Array.from(state.connectedWallets.values()).filter(wallet => wallet.isConnected);\n  },\n\n  getWalletBalance: (chainUID: string, tokenSymbol: string) => {\n    const wallet = state.connectedWallets.get(chainUID);\n    if (!wallet) return null;\n\n    return wallet.balances.find(balance =>\n      balance.token === tokenSymbol ||\n      balance.token.toLowerCase() === tokenSymbol.toLowerCase()\n    );\n  },\n\n  // Additional method for getting wallet by chain\n  getWallet: (chainUID: string) => {\n    return state.connectedWallets.get(chainUID) || null;\n  },\n\n  // Method for adding transaction records (placeholder)\n  addTransaction: (chainUID: string, transaction: { txHash: string; timestamp?: number; type?: string }) => {\n    // This would typically store transaction history\n    // For now, just log it\n    console.log(`Transaction added for ${chainUID}:`, transaction);\n  },\n\n  // Method for updating transaction status\n  updateTransactionStatus: (chainUID: string, txHash: string, status: 'pending' | 'confirmed' | 'failed') => {\n    // This would typically update stored transaction history\n    console.log(`Transaction ${txHash} on ${chainUID} updated to status: ${status}`);\n  },\n};\n\n// Proper store type definition extending BaseStore\nexport interface WalletStore extends BaseStore<ExtendedWalletState> {\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  connectWallet: (walletType: 'metamask' | 'keplr' | 'phantom', chainId?: string) => Promise<void>;\n  disconnectWallet: (chainUID?: string) => Promise<void>;\n  setBalances: (balances: UserBalance[]) => void;\n  updateBalance: (tokenId: string, balance: string) => void;\n  switchChain: (chainId: string) => Promise<void>;\n  clear: () => void;\n  initialize: () => void;\n  addWallet: (chainUID: string, walletInfo: Omit<WalletInfo, 'chainUID'>) => void;\n  removeWallet: (chainUID: string) => void;\n  updateWalletBalances: (chainUID: string, balances: UserBalance[]) => void;\n  getBalance: (tokenId: string) => UserBalance | undefined;\n  getFormattedBalance: (tokenId: string, decimals?: number) => string;\n  hasSufficientBalance: (tokenIdOrChainUID: string, amountOrTokenId?: string, amountParam?: string) => boolean;\n  isWalletAvailable: (walletType: 'metamask' | 'keplr' | 'phantom') => boolean;\n  getAvailableWallets: () => ('metamask' | 'keplr' | 'phantom')[];\n  isWalletConnected: (chainUID: string) => boolean;\n  getAllConnectedWallets: () => WalletInfo[];\n  getWalletBalance: (chainUID: string, tokenSymbol: string) => UserBalance | null;\n  getWallet: (chainUID: string) => WalletInfo | null;\n  addTransaction: (chainUID: string, transaction: { txHash: string; timestamp?: number; type?: string }) => void;\n  updateTransactionStatus: (chainUID: string, txHash: string, status: 'pending' | 'confirmed' | 'failed') => void;\n}\n\nexport const walletStore: WalletStore = {\n  state,\n  onChange,\n  reset,\n  dispose,\n  ...actions,\n  ...getters,\n};\n\nexport type { WalletState };\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}