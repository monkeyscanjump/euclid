{"file":"p-BMm0inSs.js","mappings":"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","names":[],"sources":["src/utils/wallet-adapter.ts"],"sourcesContent":["/**\n * Wallet Adapter Utility\n *\n * Abstracts the actual connection logic for different wallet types.\n * Used by euclid-wallet-controller to maintain separation of concerns.\n */\n\nimport type { EuclidChainConfig } from './types/api.types';\n\nexport type WalletType = 'keplr' | 'metamask' | 'phantom' | 'cosmostation' | 'walletconnect' | 'other';\n\n// Declare global window extensions for wallets\ndeclare global {\n  interface Window {\n    keplr?: {\n      enable: (chainId: string) => Promise<void>;\n      experimentalSuggestChain: (chainInfo: unknown) => Promise<void>;\n      getOfflineSigner: (chainId: string) => {\n        getAccounts: () => Promise<Array<{ address: string }>>;\n      };\n      getKey: (chainId: string) => Promise<{ bech32Address: string }>;\n    };\n    ethereum?: {\n      isMetaMask?: boolean;\n      request: (args: { method: string; params?: unknown[] }) => Promise<unknown>;\n    };\n    cosmostation?: {\n      cosmos: {\n        request: (args: { method: string; params: unknown }) => Promise<unknown>;\n      };\n    };\n    solana?: {\n      isPhantom?: boolean;\n      connect: () => Promise<{ publicKey: { toString: () => string } }>;\n      disconnect: () => Promise<void>;\n    };\n  }\n}export interface WalletConnectionResult {\n  success: boolean;\n  address?: string;\n  chainId?: string;\n  error?: string;\n}\n\nexport interface WalletAdapter {\n  isInstalled(): boolean;\n  connect(chainConfig: EuclidChainConfig): Promise<WalletConnectionResult>;\n  disconnect(chainUID: string): Promise<void>;\n  getAddress(chainUID: string): Promise<string | null>;\n  switchChain(chainConfig: EuclidChainConfig): Promise<boolean>;\n}\n\n// Keplr Wallet Adapter\nexport class KeplrAdapter implements WalletAdapter {\n  private get keplr() {\n    return window.keplr;\n  }\n\n  isInstalled(): boolean {\n    return !!window.keplr;\n  }\n\n  async connect(chainConfig: EuclidChainConfig): Promise<WalletConnectionResult> {\n    try {\n      if (!this.isInstalled()) {\n        return { success: false, error: 'Keplr wallet not installed' };\n      }\n\n      // Suggest chain if not already added\n      if (chainConfig.type === 'Cosmwasm') {\n        try {\n          await this.keplr.experimentalSuggestChain({\n            chainId: chainConfig.chain_id,\n            chainName: chainConfig.display_name,\n            rpc: 'https://rpc.cosmos.network', // Default RPC\n            rest: 'https://api.cosmos.network', // Default REST\n            bip44: { coinType: 118 },\n            bech32Config: {\n              bech32PrefixAccAddr: this.getAddressPrefix(chainConfig.chain_id),\n              bech32PrefixAccPub: this.getAddressPrefix(chainConfig.chain_id) + 'pub',\n              bech32PrefixValAddr: this.getAddressPrefix(chainConfig.chain_id) + 'valoper',\n              bech32PrefixValPub: this.getAddressPrefix(chainConfig.chain_id) + 'valoperpub',\n              bech32PrefixConsAddr: this.getAddressPrefix(chainConfig.chain_id) + 'valcons',\n              bech32PrefixConsPub: this.getAddressPrefix(chainConfig.chain_id) + 'valconspub'\n            },\n            currencies: [{\n              coinDenom: 'ATOM', // Default\n              coinMinimalDenom: 'uatom',\n              coinDecimals: 6,\n            }],\n            feeCurrencies: [{\n              coinDenom: 'ATOM', // Default\n              coinMinimalDenom: 'uatom',\n              coinDecimals: 6,\n            }],\n            stakeCurrency: {\n              coinDenom: 'ATOM', // Default\n              coinMinimalDenom: 'uatom',\n              coinDecimals: 6,\n            }\n          });\n        } catch (suggestError) {\n          console.warn('Failed to suggest chain to Keplr:', suggestError);\n        }\n      }\n\n      // Enable the chain\n      await this.keplr.enable(chainConfig.chain_id);\n\n      // Get the offline signer and accounts\n      const offlineSigner = this.keplr.getOfflineSigner(chainConfig.chain_id);\n      const accounts = await (offlineSigner as { getAccounts: () => Promise<Array<{ address: string }>> }).getAccounts();\n\n      if (accounts.length === 0) {\n        return { success: false, error: 'No accounts found' };\n      }\n\n      return {\n        success: true,\n        address: accounts[0].address,\n        chainId: chainConfig.chain_id,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to connect to Keplr',\n      };\n    }\n  }\n\n  async disconnect(chainUID: string): Promise<void> {\n    // Keplr doesn't have a programmatic disconnect method\n    // The user needs to disconnect from the Keplr extension directly\n    console.log('Keplr disconnect requested for:', chainUID);\n  }\n\n  async getAddress(chainUID: string): Promise<string | null> {\n    try {\n      if (!this.isInstalled()) return null;\n\n      // Use Keplr's getKey method to get the address\n      const key = await (this.keplr as unknown as { getKey: (chainId: string) => Promise<{ bech32Address: string }> }).getKey(chainUID);\n      return key.bech32Address;\n    } catch {\n      return null;\n    }\n  }\n\n  async switchChain(chainConfig: EuclidChainConfig): Promise<boolean> {\n    try {\n      await this.keplr.enable(chainConfig.chain_id);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  private getAddressPrefix(chainId: string): string {\n    // Common Cosmos chain prefixes\n    const prefixes: Record<string, string> = {\n      'cosmoshub-4': 'cosmos',\n      'osmosis-1': 'osmo',\n      'juno-1': 'juno',\n      'stargaze-1': 'stars',\n    };\n    return prefixes[chainId] || 'cosmos';\n  }\n}\n\n// MetaMask Wallet Adapter\nexport class MetaMaskAdapter implements WalletAdapter {\n  private get ethereum() {\n    return window.ethereum;\n  }\n\n  isInstalled(): boolean {\n    return !!window.ethereum && window.ethereum.isMetaMask;\n  }\n\n  async connect(chainConfig: EuclidChainConfig): Promise<WalletConnectionResult> {\n    try {\n      if (!this.isInstalled()) {\n        return { success: false, error: 'MetaMask not installed' };\n      }\n\n      if (chainConfig.type !== 'EVM') {\n        return { success: false, error: 'MetaMask only supports EVM chains' };\n      }\n\n      // Request account access\n      const accounts = await this.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n\n      if (!Array.isArray(accounts) || accounts.length === 0) {\n        return { success: false, error: 'No accounts found' };\n      }\n\n      // Switch to or add the correct network\n      const switched = await this.switchChain(chainConfig);\n      if (!switched) {\n        return { success: false, error: 'Failed to switch network' };\n      }\n\n      return {\n        success: true,\n        address: accounts[0],\n        chainId: chainConfig.chain_id,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to connect to MetaMask',\n      };\n    }\n  }\n\n  async disconnect(_chainUID: string): Promise<void> {\n    // MetaMask doesn't have a programmatic disconnect method\n    // The connection persists until the user disconnects from MetaMask directly\n    // Parameter kept for interface consistency but not used in MetaMask\n  }\n\n  async getAddress(_chainUID: string): Promise<string | null> {\n    try {\n      if (!this.isInstalled()) return null;\n\n      const accounts = await this.ethereum.request({\n        method: 'eth_accounts'\n      });\n      return Array.isArray(accounts) && accounts.length > 0 ? accounts[0] : null;\n    } catch {\n      return null;\n    }\n  }\n\n  async switchChain(chainConfig: EuclidChainConfig): Promise<boolean> {\n    try {\n      const chainIdHex = `0x${parseInt(chainConfig.chain_id).toString(16)}`;\n\n      // Try to switch to the chain\n      try {\n        await this.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: chainIdHex }],\n        });\n        return true;\n      } catch (switchError: unknown) {\n        // Chain not added to MetaMask, try to add it\n        if ((switchError as { code?: number }).code === 4902) {\n          await this.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: chainIdHex,\n              chainName: chainConfig.display_name,\n              rpcUrls: ['https://rpc.example.com'], // Default RPC\n              nativeCurrency: {\n                name: 'ETH',\n                symbol: 'ETH',\n                decimals: 18,\n              },\n              blockExplorerUrls: chainConfig.explorer_url ? [chainConfig.explorer_url] : [],\n            }],\n          });\n          return true;\n        }\n        throw switchError;\n      }\n    } catch {\n      return false;\n    }\n  }\n}\n\n// Cosmostation Adapter (similar to Keplr but for Cosmostation wallet)\nexport class CosmostationAdapter implements WalletAdapter {\n  private get cosmostation() {\n    return window.cosmostation;\n  }\n\n  isInstalled(): boolean {\n    return !!window.cosmostation;\n  }\n\n  async connect(chainConfig: EuclidChainConfig): Promise<WalletConnectionResult> {\n    try {\n      if (!this.isInstalled()) {\n        return { success: false, error: 'Cosmostation wallet not installed' };\n      }\n\n      if (chainConfig.type !== 'Cosmwasm') {\n        return { success: false, error: 'Cosmostation only supports Cosmos chains' };\n      }\n\n      const account = await this.cosmostation.cosmos.request({\n        method: 'cos_requestAccount',\n        params: { chainName: chainConfig.chain_id },\n      });\n\n      return {\n        success: true,\n        address: (account as {address: string}).address,\n        chainId: chainConfig.chain_id,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to connect to Cosmostation',\n      };\n    }\n  }\n\n  async disconnect(chainUID: string): Promise<void> {\n    console.log('Cosmostation disconnect requested for:', chainUID);\n  }\n\n  async getAddress(chainUID: string): Promise<string | null> {\n    try {\n      if (!this.isInstalled()) return null;\n\n      const account = await this.cosmostation.cosmos.request({\n        method: 'cos_account',\n        params: { chainName: chainUID },\n      });\n      return (account as {address?: string})?.address || null;\n    } catch {\n      return null;\n    }\n  }\n\n  async switchChain(_chainConfig: EuclidChainConfig): Promise<boolean> {\n    // Cosmostation handles chain switching automatically\n    return true;\n  }\n}\n\n// Phantom Wallet Adapter\nexport class PhantomAdapter implements WalletAdapter {\n  private get phantom() {\n    return (window as { phantom?: { ethereum?: { request: (args: { method: string; params?: unknown[] }) => Promise<unknown> } } }).phantom?.ethereum;\n  }\n\n  isInstalled(): boolean {\n    return !!this.phantom;\n  }\n\n  async connect(chainConfig: EuclidChainConfig): Promise<WalletConnectionResult> {\n    try {\n      if (!this.isInstalled()) {\n        return { success: false, error: 'Phantom wallet not installed' };\n      }\n\n      if (chainConfig.type !== 'EVM') {\n        return { success: false, error: 'Phantom only supports EVM chains' };\n      }\n\n      // Request account access\n      const accounts = await this.phantom.request({\n        method: 'eth_requestAccounts'\n      });\n\n      if (!Array.isArray(accounts) || accounts.length === 0) {\n        return { success: false, error: 'No accounts found' };\n      }\n\n      return {\n        success: true,\n        address: accounts[0],\n        chainId: chainConfig.chain_id,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to connect to Phantom',\n      };\n    }\n  }\n\n  async disconnect(_chainUID: string): Promise<void> {\n    // Phantom doesn't have a programmatic disconnect method\n  }\n\n  async getAddress(_chainUID: string): Promise<string | null> {\n    try {\n      if (!this.isInstalled()) return null;\n\n      const accounts = await this.phantom.request({\n        method: 'eth_accounts'\n      });\n      return Array.isArray(accounts) && accounts.length > 0 ? accounts[0] : null;\n    } catch {\n      return null;\n    }\n  }\n\n  async switchChain(chainConfig: EuclidChainConfig): Promise<boolean> {\n    try {\n      const chainIdHex = `0x${parseInt(chainConfig.chain_id).toString(16)}`;\n\n      await this.phantom.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: chainIdHex }],\n      });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\n// Wallet Adapter Factory\nexport class WalletAdapterFactory {\n  private static adapters: Map<WalletType, WalletAdapter> = new Map();\n\n  static {\n    this.adapters.set('keplr', new KeplrAdapter());\n    this.adapters.set('metamask', new MetaMaskAdapter());\n    this.adapters.set('phantom', new PhantomAdapter());\n    this.adapters.set('cosmostation', new CosmostationAdapter());\n  }\n\n  static getAdapter(walletType: WalletType): WalletAdapter | null {\n    return this.adapters.get(walletType) || null;\n  }\n\n  static getAvailableWallets(): Array<{ type: WalletType; installed: boolean }> {\n    return Array.from(this.adapters.entries()).map(([type, adapter]) => ({\n      type,\n      installed: adapter.isInstalled(),\n    }));\n  }\n\n  static async connectWallet(\n    walletType: WalletType,\n    chainConfig: EuclidChainConfig\n  ): Promise<WalletConnectionResult> {\n    const adapter = this.getAdapter(walletType);\n    if (!adapter) {\n      return { success: false, error: `Adapter not found for ${walletType}` };\n    }\n\n    return adapter.connect(chainConfig);\n  }\n\n  static async disconnectWallet(walletType: WalletType, chainUID: string): Promise<void> {\n    const adapter = this.getAdapter(walletType);\n    if (adapter) {\n      await adapter.disconnect(chainUID);\n    }\n  }\n}\n"],"version":3}