{"version":3,"file":"wallet.store.js","sourceRoot":"","sources":["../../src/store/wallet.store.ts"],"names":[],"mappings":"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","sourcesContent":["import { createStore } from '@stencil/store';\nimport type { WalletState, WalletInfo } from '../utils/types/euclid-api.types';\nimport type { UserBalance } from '../utils/types/api.types';\nimport type { BaseStore } from './types';\nimport { walletAdapterFactory } from '../utils/wallet-adapters';\n\n// Extended wallet state to support multiple wallets\ninterface ExtendedWalletState extends WalletState {\n  connectedWallets: Map<string, WalletInfo>; // chainUID -> WalletInfo\n  wallets: Map<string, WalletInfo>; // alias for backward compatibility\n}\n\nconst initialState: ExtendedWalletState = {\n  isConnected: false,\n  address: null,\n  chainId: null,\n  chainUID: null,\n  walletType: null,\n  balances: [],\n  loading: false,\n  error: null,\n  connectedWallets: new Map(),\n  wallets: new Map(), // alias for backward compatibility\n};\n\nconst { state, onChange, reset, dispose } = createStore(initialState);\n\n// Actions\nconst actions = {\n  setLoading(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setError(error: string | null) {\n    state.error = error;\n  },\n\n  async connectWallet(walletType: 'metamask' | 'keplr' | 'phantom', chainId?: string) {\n    state.loading = true;\n    state.error = null;\n\n    try {\n      const adapter = walletAdapterFactory.getAdapter(walletType);\n\n      if (!adapter.isAvailable()) {\n        throw new Error(`${walletType} wallet is not installed`);\n      }\n\n      const connection = await adapter.connect(chainId);\n\n      state.isConnected = true;\n      state.address = connection.address;\n      state.chainId = connection.chainId;\n      state.chainUID = connection.chainId; // For now, using chainId as chainUID\n      state.walletType = walletType;\n      state.error = null;\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Failed to connect wallet';\n    } finally {\n      state.loading = false;\n    }\n  },\n\n  async disconnectWallet(chainUID?: string) {\n    if (chainUID) {\n      // Disconnect specific wallet\n      actions.removeWallet(chainUID);\n    } else {\n      // Disconnect all wallets\n      if (state.walletType) {\n        try {\n          const adapter = walletAdapterFactory.getAdapter(state.walletType);\n          await adapter.disconnect();\n        } catch (error) {\n          console.warn('Error disconnecting wallet:', error);\n        }\n      }\n\n      state.isConnected = false;\n      state.address = null;\n      state.chainId = null;\n      state.chainUID = null;\n      state.walletType = null;\n      state.balances = [];\n      state.connectedWallets.clear();\n      state.error = null;\n    }\n  },\n\n  setBalances(balances: UserBalance[]) {\n    state.balances = [...balances];\n  },\n\n  updateBalance(tokenId: string, balance: string) {\n    const existingIndex = state.balances.findIndex(b => b.token === tokenId);\n\n    const balanceObject: UserBalance = {\n      amount: balance,\n      token_id: tokenId,\n      // Legacy compatibility fields\n      token: tokenId,\n      balance: balance,\n      chain_uid: state.chainUID || '',\n      token_type: { native: { denom: tokenId } },\n    };\n\n    if (existingIndex >= 0) {\n      state.balances[existingIndex] = balanceObject;\n    } else {\n      state.balances.push(balanceObject);\n    }\n  },\n\n  async switchChain(chainId: string) {\n    if (!state.walletType) {\n      throw new Error('No wallet connected');\n    }\n\n    state.loading = true;\n    state.error = null;\n\n    try {\n      const adapter = walletAdapterFactory.getAdapter(state.walletType);\n      await adapter.switchChain(chainId);\n\n      state.chainId = chainId;\n      state.chainUID = chainId;\n      state.error = null;\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Failed to switch chain';\n    } finally {\n      state.loading = false;\n    }\n  },\n\n  clear() {\n    reset();\n  },\n\n  // Multi-wallet support methods\n  initialize() {\n    // Check for previously connected wallets and restore connections if possible\n    console.log('Wallet store initialized');\n  },\n\n  addWallet(chainUID: string, walletInfo: Omit<WalletInfo, 'chainUID'>) {\n    const fullWalletInfo: WalletInfo = {\n      ...walletInfo,\n      chainUID,\n      type: walletInfo.walletType, // Set legacy alias\n      name: walletInfo.walletType, // Set legacy name\n    };\n\n    state.connectedWallets.set(chainUID, fullWalletInfo);\n    state.wallets.set(chainUID, fullWalletInfo); // Keep alias synchronized\n\n    // Update primary wallet state if this is the first connection\n    if (!state.isConnected) {\n      state.isConnected = true;\n      state.address = walletInfo.address;\n      state.chainUID = chainUID;\n      state.walletType = walletInfo.walletType;\n      state.balances = [...walletInfo.balances];\n    }\n  },\n\n  removeWallet(chainUID: string) {\n    state.connectedWallets.delete(chainUID);\n    state.wallets.delete(chainUID); // Keep alias synchronized\n\n    // Update primary wallet state if we removed the current primary\n    if (state.chainUID === chainUID) {\n      const remaining = Array.from(state.connectedWallets.values());\n      if (remaining.length > 0) {\n        const newPrimary = remaining[0];\n        state.address = newPrimary.address;\n        state.chainUID = newPrimary.chainUID;\n        state.walletType = newPrimary.walletType;\n        state.balances = [...newPrimary.balances];\n      } else {\n        state.isConnected = false;\n        state.address = null;\n        state.chainUID = null;\n        state.walletType = null;\n        state.balances = [];\n      }\n    }\n  },\n\n  updateWalletBalances(chainUID: string, balances: UserBalance[]) {\n    const wallet = state.connectedWallets.get(chainUID);\n    if (wallet) {\n      const updatedWallet = { ...wallet, balances: [...balances] };\n      state.connectedWallets.set(chainUID, updatedWallet);\n\n      // Update primary state if this is the current primary wallet\n      if (state.chainUID === chainUID) {\n        state.balances = [...balances];\n      }\n    }\n  },\n};\n\n// Getters\nconst getters = {\n  getBalance: (tokenId: string) => {\n    return state.balances.find(balance => balance.token === tokenId);\n  },\n\n  getFormattedBalance: (tokenId: string, decimals: number = 18) => {\n    const balance = getters.getBalance(tokenId);\n    if (!balance) return '0';\n\n    try {\n      const value = BigInt(balance.balance);\n      const divisor = BigInt(10 ** decimals);\n      const beforeDecimal = value / divisor;\n      const afterDecimal = value % divisor;\n\n      return `${beforeDecimal.toString()}.${afterDecimal.toString().padStart(decimals, '0')}`;\n    } catch {\n      return '0';\n    }\n  },\n\n  hasSufficientBalance: (tokenIdOrChainUID: string, amountOrTokenId?: string, amountParam?: string) => {\n    // Support both signatures:\n    // hasSufficientBalance(tokenId, amount) - 2 params\n    // hasSufficientBalance(chainUID, tokenId, amount) - 3 params\n    if (typeof amountParam === 'string' && amountOrTokenId && amountParam) {\n      // 3-parameter version: chainUID, tokenId, amount\n      const chainUID = tokenIdOrChainUID;\n      const tokenId = amountOrTokenId;\n      const amount = amountParam;\n\n      const wallet = state.connectedWallets.get(chainUID);\n      if (!wallet) return false;\n\n      const balance = wallet.balances.find(b => b.token === tokenId);\n      if (!balance) return false;\n\n      try {\n        return BigInt(balance.balance) >= BigInt(amount);\n      } catch {\n        return false;\n      }\n    } else {\n      // 2-parameter version: tokenId, amount\n      const tokenId = tokenIdOrChainUID;\n      const amount = amountOrTokenId || '';\n\n      const balance = getters.getBalance(tokenId);\n      if (!balance) return false;\n\n      try {\n        return BigInt(balance.balance) >= BigInt(amount);\n      } catch {\n        return false;\n      }\n    }\n  },  isWalletAvailable: (walletType: 'metamask' | 'keplr' | 'phantom') => {\n    try {\n      const adapter = walletAdapterFactory.getAdapter(walletType);\n      return adapter.isAvailable();\n    } catch {\n      return false;\n    }\n  },\n\n  getAvailableWallets: () => {\n    return walletAdapterFactory.getAvailableWalletTypes();\n  },\n\n  // Multi-wallet getters\n  isWalletConnected: (chainUID: string) => {\n    const wallet = state.connectedWallets.get(chainUID);\n    return wallet ? wallet.isConnected : false;\n  },\n\n  getAllConnectedWallets: () => {\n    return Array.from(state.connectedWallets.values()).filter(wallet => wallet.isConnected);\n  },\n\n  getWalletBalance: (chainUID: string, tokenSymbol: string) => {\n    const wallet = state.connectedWallets.get(chainUID);\n    if (!wallet) return null;\n\n    return wallet.balances.find(balance =>\n      balance.token === tokenSymbol ||\n      balance.token.toLowerCase() === tokenSymbol.toLowerCase()\n    );\n  },\n\n  // Additional method for getting wallet by chain\n  getWallet: (chainUID: string) => {\n    return state.connectedWallets.get(chainUID) || null;\n  },\n\n  // Method for adding transaction records (placeholder)\n  addTransaction: (chainUID: string, transaction: { txHash: string; timestamp?: number; type?: string }) => {\n    // This would typically store transaction history\n    // For now, just log it\n    console.log(`Transaction added for ${chainUID}:`, transaction);\n  },\n\n  // Method for updating transaction status\n  updateTransactionStatus: (chainUID: string, txHash: string, status: 'pending' | 'confirmed' | 'failed') => {\n    // This would typically update stored transaction history\n    console.log(`Transaction ${txHash} on ${chainUID} updated to status: ${status}`);\n  },\n};\n\n// Proper store type definition extending BaseStore\nexport interface WalletStore extends BaseStore<ExtendedWalletState> {\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  connectWallet: (walletType: 'metamask' | 'keplr' | 'phantom', chainId?: string) => Promise<void>;\n  disconnectWallet: (chainUID?: string) => Promise<void>;\n  setBalances: (balances: UserBalance[]) => void;\n  updateBalance: (tokenId: string, balance: string) => void;\n  switchChain: (chainId: string) => Promise<void>;\n  clear: () => void;\n  initialize: () => void;\n  addWallet: (chainUID: string, walletInfo: Omit<WalletInfo, 'chainUID'>) => void;\n  removeWallet: (chainUID: string) => void;\n  updateWalletBalances: (chainUID: string, balances: UserBalance[]) => void;\n  getBalance: (tokenId: string) => UserBalance | undefined;\n  getFormattedBalance: (tokenId: string, decimals?: number) => string;\n  hasSufficientBalance: (tokenIdOrChainUID: string, amountOrTokenId?: string, amountParam?: string) => boolean;\n  isWalletAvailable: (walletType: 'metamask' | 'keplr' | 'phantom') => boolean;\n  getAvailableWallets: () => ('metamask' | 'keplr' | 'phantom')[];\n  isWalletConnected: (chainUID: string) => boolean;\n  getAllConnectedWallets: () => WalletInfo[];\n  getWalletBalance: (chainUID: string, tokenSymbol: string) => UserBalance | null;\n  getWallet: (chainUID: string) => WalletInfo | null;\n  addTransaction: (chainUID: string, transaction: { txHash: string; timestamp?: number; type?: string }) => void;\n  updateTransactionStatus: (chainUID: string, txHash: string, status: 'pending' | 'confirmed' | 'failed') => void;\n}\n\nexport const walletStore: WalletStore = {\n  state,\n  onChange,\n  reset,\n  dispose,\n  ...actions,\n  ...getters,\n};\n\nexport type { WalletState };\n"]}