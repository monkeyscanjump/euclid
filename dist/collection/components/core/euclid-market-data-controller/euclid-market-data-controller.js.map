{"version":3,"file":"euclid-market-data-controller.js","sourceRoot":"","sources":["../../../../src/components/core/euclid-market-data-controller/euclid-market-data-controller.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, State, Listen } from '@stencil/core';\nimport { marketStore } from '../../../store/market.store';\nimport { apiClient } from '../../../utils/api-client';\nimport { DEFAULTS } from '../../../utils/constants';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\n\n@Component({\n  tag: 'euclid-market-data-controller',\n})\nexport class EuclidMarketDataController {\n  @State() isInitialized = false;\n  private refreshInterval: number;\n\n  async componentDidLoad() {\n    await this.initialize();\n  }\n\n  disconnectedCallback() {\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n  }\n\n  private async initialize() {\n    console.log('üìä Initializing Market Data Controller...');\n\n    // Load initial market data\n    await this.loadInitialData();\n\n    // Set up periodic market data refresh\n    this.setupPeriodicRefresh();\n\n    this.isInitialized = true;\n    console.log('üìä Market Data Controller initialized');\n  }\n\n  private async loadInitialData() {\n    try {\n      marketStore.setLoading(true);\n\n      console.log('üìä Loading initial market data...');\n\n      // Load chains\n      const chainsResponse = await apiClient.getAllChains(false);\n      if (chainsResponse.success && chainsResponse.data) {\n        // Store the EuclidChainConfig[] data directly\n        marketStore.setChains(chainsResponse.data);\n        console.log('üì° Loaded chains:', chainsResponse.data.length);\n      } else {\n        console.warn('Failed to load chains:', chainsResponse.error);\n      }\n\n      // Load tokens\n      const tokensResponse = await apiClient.getAllTokens();\n      if (tokensResponse.success && tokensResponse.data) {\n        // Store the TokenMetadata[] data directly\n        marketStore.setTokens(tokensResponse.data);\n        console.log('ü™ô Loaded tokens:', tokensResponse.data.length);\n      } else {\n        console.warn('Failed to load tokens:', tokensResponse.error);\n      }\n\n      // Load pools\n      const poolsResponse = await apiClient.getAllPools();\n      if (poolsResponse.success && poolsResponse.data) {\n        marketStore.setPools(poolsResponse.data);\n        console.log('üèä Loaded pools:', poolsResponse.data.length);\n      } else {\n        console.warn('Failed to load pools:', poolsResponse.error);\n      }\n\n    } catch (error) {\n      console.error('Failed to load initial market data:', error);\n    } finally {\n      marketStore.setLoading(false);\n    }\n  }\n\n  private setupPeriodicRefresh() {\n    // Refresh market data every 5 minutes\n    this.refreshInterval = window.setInterval(async () => {\n      if (marketStore.isDataStale()) {\n        console.log('üîÑ Refreshing stale market data...');\n        await this.refreshMarketData();\n      }\n    }, DEFAULTS.MARKET_DATA_REFRESH_INTERVAL);\n  }\n\n  private async refreshMarketData() {\n    try {\n      marketStore.setLoading(true);\n\n      // Refresh chains data\n      const chainsResponse = await apiClient.getAllChains(false);\n      if (chainsResponse.success && chainsResponse.data) {\n        marketStore.setChains(chainsResponse.data);\n      }\n\n      // Refresh tokens data\n      const tokensResponse = await apiClient.getAllTokens();\n      if (tokensResponse.success && tokensResponse.data) {\n        marketStore.setTokens(tokensResponse.data);\n      }\n\n      console.log('‚úÖ Market data refreshed successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to refresh market data:', error);\n    } finally {\n      marketStore.setLoading(false);\n    }\n  }\n\n  @Listen(EUCLID_EVENTS.MARKET.LOAD_INITIAL, { target: 'window' })\n  async handleInitialDataLoad() {\n    console.log('üìä Loading initial market data...');\n    await this.loadInitialData();\n  }\n\n  @Listen(EUCLID_EVENTS.MARKET.REFRESH_DATA, { target: 'window' })\n  async handleRefreshRequest() {\n    console.log('üîÑ Manual market data refresh requested');\n    await this.refreshMarketData();\n  }\n\n  @Listen(EUCLID_EVENTS.MARKET.TOKEN_DETAILS_REQUEST, { target: 'window' })\n  async handleTokenDetailsRequest(event: CustomEvent<{ tokenId: string }>) {\n    const { tokenId } = event.detail;\n    console.log('üìã Loading token details for:', tokenId);\n\n    try {\n      // Get token denominations across all chains\n      const denomsResponse = await apiClient.getTokenDenoms(tokenId);\n      if (denomsResponse.success && denomsResponse.data) {\n        const denoms = denomsResponse.data.router.token_denoms.denoms;\n\n        // Emit token details loaded event\n        dispatchEuclidEvent(EUCLID_EVENTS.MARKET.TOKEN_DETAILS_SUCCESS, {\n          tokenId,\n          data: { denoms }\n        });\n      }\n\n      // Get escrow information\n      const escrowsResponse = await apiClient.getEscrows(tokenId);\n      if (escrowsResponse.success && escrowsResponse.data) {\n        const escrows = escrowsResponse.data.router.escrows;\n\n        // Emit escrow info loaded event\n        dispatchEuclidEvent(EUCLID_EVENTS.MARKET.ESCROWS_LOADED, {\n          tokenId,\n          data: { escrows }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to load token details:', error);\n\n      dispatchEuclidEvent(EUCLID_EVENTS.MARKET.TOKEN_DETAILS_FAILED, {\n        tokenId,\n        error: error.message\n      });\n    }\n  }\n\n  @Listen(EUCLID_EVENTS.MARKET.CHAIN_DETAILS_REQUEST, { target: 'window' })\n  async handleChainDetailsRequest(event: CustomEvent<{ chainUID: string }>) {\n    const { chainUID } = event.detail;\n    console.log('üîó Loading chain details for:', chainUID);\n\n    try {\n      // Get chain-specific data\n      const chain = marketStore.getChain(chainUID);\n      if (chain) {\n        // Emit chain details loaded event\n        dispatchEuclidEvent(EUCLID_EVENTS.MARKET.CHAIN_DETAILS_SUCCESS, {\n          chainUID,\n          data: { chain }\n        });\n      } else {\n        // Refresh chains if not found\n        await this.refreshMarketData();\n      }\n    } catch (error) {\n      console.error('Failed to load chain details:', error);\n\n      dispatchEuclidEvent(EUCLID_EVENTS.MARKET.CHAIN_DETAILS_FAILED, {\n        chainUID,\n        error: error.message\n      });\n    }\n  }\n\n  render() {\n    // This is a headless controller - no visual output\n    return null;\n  }\n}\n"]}