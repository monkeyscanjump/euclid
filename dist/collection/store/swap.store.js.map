{"version":3,"file":"swap.store.js","sourceRoot":"","sources":["../../src/store/swap.store.ts"],"names":[],"mappings":"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","sourcesContent":["import { createStore } from '@stencil/store';\nimport type { SwapState } from '../utils/types/euclid-api.types';\nimport type { TokenMetadata, RoutePath } from '../utils/types/api.types';\nimport type { BaseStore } from './types';\n\nconst initialState: SwapState = {\n  tokenIn: null,\n  tokenOut: null,\n  fromToken: null, // alias for backward compatibility\n  toToken: null,   // alias for backward compatibility\n  amountIn: '',\n  amountOut: '',\n  fromAmount: '', // alias for backward compatibility\n  toAmount: '',   // alias for backward compatibility\n  routes: [],\n  selectedRoute: null,\n  slippage: 0.5, // 0.5% default\n  loading: false,\n  error: null,\n};\n\nconst { state, onChange, reset, dispose } = createStore(initialState);\n\n// Actions\nconst actions = {\n  setTokenIn(token: TokenMetadata | null) {\n    state.tokenIn = token;\n    state.fromToken = token; // Keep aliases synchronized\n    // Clear routes when changing tokens\n    state.routes = [];\n    state.selectedRoute = null;\n    state.amountOut = '';\n    state.toAmount = '';\n  },\n\n  setTokenOut(token: TokenMetadata | null) {\n    state.tokenOut = token;\n    state.toToken = token; // Keep aliases synchronized\n    // Clear routes when changing tokens\n    state.routes = [];\n    state.selectedRoute = null;\n    state.amountOut = '';\n    state.toAmount = '';\n  },\n\n  // Backward compatibility aliases\n  setFromToken(token: TokenMetadata | null) {\n    actions.setTokenIn(token);\n  },\n\n  setToToken(token: TokenMetadata | null) {\n    actions.setTokenOut(token);\n  },\n\n  setAmountIn(amount: string) {\n    state.amountIn = amount;\n    state.fromAmount = amount; // Keep aliases synchronized\n    // Clear output when changing input\n    if (!amount) {\n      state.amountOut = '';\n      state.toAmount = '';\n      state.routes = [];\n      state.selectedRoute = null;\n    }\n  },\n\n  setAmountOut(amount: string) {\n    state.amountOut = amount;\n    state.toAmount = amount; // Keep aliases synchronized\n  },\n\n  // Backward compatibility aliases\n  setFromAmount(amount: string) {\n    actions.setAmountIn(amount);\n  },\n\n  setToAmount(amount: string) {\n    actions.setAmountOut(amount);\n  },\n\n  setRoutes(routes: RoutePath[]) {\n    state.routes = [...routes];\n    state.loading = false;\n    state.error = null;\n\n    // Auto-select best route (first one, assumed to be optimal)\n    if (routes.length > 0) {\n      actions.setSelectedRoute(routes[0]);\n    }\n  },\n\n  setSelectedRoute(route: RoutePath | null) {\n    state.selectedRoute = route;\n\n    // Calculate expected output from route\n    if (route && route.path.length > 0) {\n      const lastHop = route.path[route.path.length - 1];\n      state.amountOut = lastHop.amount_out;\n    }\n  },\n\n  setLoading(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setError(error: string | null) {\n    state.error = error;\n  },\n\n  setSlippage(slippage: number) {\n    state.slippage = slippage;\n  },\n\n  // Additional methods that components expect\n  setLoadingRoutes(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setSwapping(swapping: boolean) {\n    state.loading = swapping; // Use loading flag for swapping state\n  },\n\n  swapTokens() {\n    const tokenIn = state.tokenIn;\n    const tokenOut = state.tokenOut;\n    const amountIn = state.amountIn;\n\n    state.tokenIn = tokenOut;\n    state.tokenOut = tokenIn;\n    state.fromToken = tokenOut; // Keep aliases synchronized\n    state.toToken = tokenIn;\n    state.amountIn = '';\n    state.amountOut = amountIn;\n    state.fromAmount = '';\n    state.toAmount = amountIn;\n    state.routes = [];\n    state.selectedRoute = null;\n    state.error = null;\n  },\n\n  clear() {\n    reset();\n  },\n};\n\n// Getters\nconst getters = {\n  canSwap: () => {\n    return !!(\n      state.tokenIn &&\n      state.tokenOut &&\n      state.amountIn &&\n      parseFloat(state.amountIn) > 0 &&\n      state.selectedRoute &&\n      !state.loading\n    );\n  },\n\n  getPriceImpact: () => {\n    return state.selectedRoute?.total_price_impact || '0';\n  },\n\n  getEstimatedGas: () => {\n    // This would be calculated based on the route complexity\n    if (!state.selectedRoute) return '0';\n\n    const hopCount = state.selectedRoute.path.length;\n    return (hopCount * 100000).toString(); // Rough estimate\n  },\n\n  isValidPair: () => {\n    return !!(\n      state.tokenIn &&\n      state.tokenOut &&\n      state.tokenIn.id !== state.tokenOut.id\n    );\n  },\n\n  getSlippageAmount: () => {\n    if (!state.amountOut || !state.slippage) return '0';\n\n    try {\n      const output = BigInt(state.amountOut);\n      const slippageBps = BigInt(Math.floor(state.slippage * 100)); // Convert to basis points\n      const slippageAmount = (output * slippageBps) / BigInt(10000);\n      const minimumReceive = output - slippageAmount;\n\n      return minimumReceive.toString();\n    } catch {\n      return '0';\n    }\n  },\n};\n\n// Proper store type definition extending BaseStore\nexport interface SwapStore extends BaseStore<SwapState> {\n  setTokenIn: (token: TokenMetadata | null) => void;\n  setTokenOut: (token: TokenMetadata | null) => void;\n  setFromToken: (token: TokenMetadata | null) => void; // alias\n  setToToken: (token: TokenMetadata | null) => void;   // alias\n  setAmountIn: (amount: string) => void;\n  setAmountOut: (amount: string) => void;\n  setFromAmount: (amount: string) => void; // alias\n  setToAmount: (amount: string) => void;   // alias\n  setRoutes: (routes: RoutePath[]) => void;\n  setSelectedRoute: (route: RoutePath | null) => void;\n  setLoading: (loading: boolean) => void;\n  setLoadingRoutes: (loading: boolean) => void; // alias\n  setSwapping: (swapping: boolean) => void; // alias\n  setError: (error: string | null) => void;\n  setSlippage: (slippage: number) => void;\n  swapTokens: () => void;\n  clear: () => void;\n  canSwap: () => boolean;\n  getPriceImpact: () => string;\n  getEstimatedGas: () => string;\n  isValidPair: () => boolean;\n  getSlippageAmount: () => string;\n}\n\nexport const swapStore: SwapStore = {\n  state,\n  onChange,\n  reset,\n  dispose,\n  ...actions,\n  ...getters,\n};\n\nexport type { SwapState };\n"]}