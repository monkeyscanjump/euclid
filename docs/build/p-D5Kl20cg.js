import{D as n}from"./p-8CHUc0Tf.js";import"./p-DWrf3bWA.js";import"./p-uEsOKkhe.js";async function i(i,c,a){const e={...n,...a};const r=new AbortController;const o=setTimeout((()=>r.abort()),e.apiTimeout);try{const n=await fetch(e.graphqlEndpoint,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({query:i,variables:c}),signal:r.signal});clearTimeout(o);if(!n.ok){throw new Error(`HTTP ${n.status}: ${n.statusText}`)}const a=await n.json();if(a.errors){throw new Error(`GraphQL errors: ${a.errors.map((n=>n.message)).join(", ")}`)}return a.data}catch(n){clearTimeout(o);const i=n instanceof Error?n.message:"Unknown error";throw new Error(`Chain query failed: ${i}`)}}async function c(n){const c=`\n    query Chains($showAllChains: Boolean, $type: String) {\n      chains {\n        all_chains(show_all_chains: $showAllChains, type: $type) {\n          chain_id\n          chain_uid\n          display_name\n          factory_address\n          token_factory_address\n          explorer_url\n          logo\n          type\n        }\n      }\n    }\n  `;const a=await i(c,n);return a.chains.all_chains}async function a(n){const c=`\n    query Contracts($type: String, $chainUId: String) {\n      chains {\n        contracts(type: $type, chainUId: $chainUId) {\n          ContractAddress\n          ChainUID\n          Type\n        }\n      }\n    }\n  `;const a=await i(c,n);return a.chains.contracts}async function e(n){const c=`\n    query ChainConfig($chainUid: String, $chainId: String) {\n      chains {\n        chain_config(chain_uid: $chainUid, chain_id: $chainId) {\n          chain_id\n          chain_uid\n          display_name\n          explorer_url\n          factory_address\n          token_factory_address\n          logo\n          type\n        }\n      }\n    }\n  `;const a=await i(c,n);return a.chains.chain_config}async function r(n){const c=`\n    query Evm_chain_config($chainUid: String, $chainId: String) {\n      chains {\n        evm_chain_config(chain_uid: $chainUid, chain_id: $chainId) {\n          chain_id\n          chain_uid\n          explorer_url\n          name\n          native_currency {\n            decimals\n            name\n            symbol\n          }\n          rpc_urls {\n            default {\n              http\n            }\n          }\n        }\n      }\n    }\n  `;const a=await i(c,n);return a.chains.evm_chain_config}async function o(n){const c=`\n    query Keplr_config($chainId: String, $chainUid: String) {\n      chains {\n        keplr_config(chain_id: $chainId, chain_uid: $chainUid) {\n          chainID\n          chainName\n          rpc\n          rest\n          explorer_url\n          coinType\n          features\n          stakeCurrency {\n            coinDenom\n            coinMinimalDenom\n            coinDecimals\n            coinGeckoID\n          }\n          gasPriceStep {\n            low\n            average\n            high\n          }\n          feeCurrencies {\n            coinDenom\n            coinMinimalDenom\n            coinDecimals\n            coinGeckoID\n            gasPriceStep {\n              low\n              average\n              high\n            }\n          }\n          currencies {\n            coinDenom\n            coinMinimalDenom\n            coinDecimals\n            coinGeckoID\n          }\n          bech32Config {\n            bech32PrefixAccAddr\n            bech32PrefixAccPub\n            bech32PrefixValAddr\n            bech32PrefixValPub\n            bech32PrefixConsAddr\n            bech32PrefixConsPub\n          }\n          bip44 {\n            coinType\n          }\n        }\n      }\n    }\n  `;const a=await i(c,n);return a.chains.keplr_config}async function t(){const n=`\n    query Router_config {\n      chains {\n        router_config {\n          contract_address\n          chain_uid\n          type\n          explorer_url\n          logo\n        }\n      }\n    }\n  `;const c=await i(n);return c.chains.router_config}async function s(){const n=`\n    query AllEvmChains {\n      chains {\n        all_evm_chains {\n          chain_id\n          chain_uid\n          explorer_url\n          name\n          native_currency {\n            decimals\n            name\n            symbol\n          }\n          rpc_urls {\n            default {\n              http\n            }\n          }\n        }\n      }\n    }\n  `;const c=await i(n);return c.chains.all_evm_chains}export{s as getAllEvmChainsImpl,e as getChainConfigImpl,c as getChainsImpl,a as getContractsImpl,r as getEvmChainConfigImpl,o as getKeplrConfigImpl,t as getRouterConfigImpl};
//# sourceMappingURL=p-D5Kl20cg.js.map