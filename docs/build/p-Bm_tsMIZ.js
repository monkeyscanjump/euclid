import{D as n}from"./p-9CRWQAc1.js";async function i(i,a,s){const t={...n,...s};const e=new AbortController;const r=setTimeout((()=>e.abort()),t.apiTimeout);try{const n=await fetch(t.graphqlEndpoint,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({query:i,variables:a}),signal:e.signal});clearTimeout(r);if(!n.ok){throw new Error(`HTTP ${n.status}: ${n.statusText}`)}const s=await n.json();if(s.errors){throw new Error(`GraphQL errors: ${s.errors.map((n=>n.message)).join(", ")}`)}return s.data}catch(n){clearTimeout(r);const i=n instanceof Error?n.message:"Unknown error";throw new Error(`VCoin query failed: ${i}`)}}async function a(n,a,s,t){const e=`\n    query All_balances($chainUid: String!, $vcoinAddress: String!, $limit: Int, $offset: Int) {\n      vcoin(chainUid: $chainUid, vcoinAddress: $vcoinAddress) {\n        all_balances(limit: $limit, offset: $offset) {\n          balances {\n            user_address\n            balance\n            chainUid\n            last_updated\n          }\n          pagination {\n            total_count\n            limit\n            offset\n          }\n        }\n      }\n    }\n  `;const r=await i(e,{chainUid:n,vcoinAddress:a,limit:s,offset:t});return r.vcoin.all_balances}async function s(n,a){const s=`\n    query Total_supply($chainUid: String!, $vcoinAddress: String!) {\n      vcoin(chainUid: $chainUid, vcoinAddress: $vcoinAddress) {\n        total_supply {\n          total_supply\n          circulating_supply\n          max_supply\n          token_info {\n            symbol\n            name\n            decimals\n          }\n          last_updated\n        }\n      }\n    }\n  `;const t=await i(s,{chainUid:n,vcoinAddress:a});return t.vcoin.total_supply}async function t(n,a,s){const t=`\n    query User_balance($chainUid: String!, $vcoinAddress: String!, $userAddress: String!) {\n      vcoin(chainUid: $chainUid, vcoinAddress: $vcoinAddress) {\n        user_balance(user_address: $userAddress) {\n          user_address\n          balance\n          virtual_balance\n          locked_balance\n          available_balance\n          chainUid\n          last_updated\n          transaction_history {\n            tx_hash\n            amount\n            type\n            timestamp\n          }\n        }\n      }\n    }\n  `;const e=await i(t,{chainUid:n,vcoinAddress:a,userAddress:s});return e.vcoin.user_balance}export{a as getAllBalancesImpl,s as getTotalSupplyImpl,t as getUserBalanceImpl};
//# sourceMappingURL=p-Bm_tsMIZ.js.map