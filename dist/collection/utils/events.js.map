{"version":3,"file":"events.js","sourceRoot":"","sources":["../../src/utils/events.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,0DAA0D;AAC1D,MAAM,CAAC,MAAM,aAAa,GAAG;IAC3B,kCAAkC;IAClC,eAAe,EAAE,+BAA+B;IAChD,eAAe,EAAE,+BAA+B;IAChD,cAAc,EAAE,8BAA8B;IAE9C,qCAAqC;IACrC,kBAAkB,EAAE,kCAAkC;IACtD,kBAAkB,EAAE,kCAAkC;IAEtD,uBAAuB;IACvB,aAAa,EAAE,6BAA6B;CACpC,CAAC;AAEX,iDAAiD;AACjD,MAAM,CAAC,MAAM,WAAW,GAAG;IACzB,mBAAmB;IACnB,cAAc,EAAE,4BAA4B;IAC5C,oBAAoB,EAAE,kCAAkC;IACxD,mBAAmB,EAAE,iCAAiC;IAEtD,iBAAiB;IACjB,eAAe,EAAE,6BAA6B;IAC9C,eAAe,EAAE,6BAA6B;IAC9C,cAAc,EAAE,4BAA4B;CACpC,CAAC;AAEX,sDAAsD;AACtD,MAAM,CAAC,MAAM,gBAAgB,GAAG;IAC9B,2BAA2B;IAC3B,WAAW,EAAE,8BAA8B;IAC3C,WAAW,EAAE,8BAA8B;IAC3C,UAAU,EAAE,6BAA6B;IAEzC,8BAA8B;IAC9B,cAAc,EAAE,iCAAiC;IACjD,cAAc,EAAE,iCAAiC;IACjD,aAAa,EAAE,gCAAgC;IAE/C,sBAAsB;IACtB,iBAAiB,EAAE,oCAAoC;CAC/C,CAAC;AAEX,kEAAkE;AAClE,MAAM,CAAC,MAAM,kBAAkB,GAAG;IAChC,wBAAwB;IACxB,SAAS,EAAE,8BAA8B;IACzC,SAAS,EAAE,8BAA8B;IACzC,OAAO,EAAE,4BAA4B;IACrC,MAAM,EAAE,2BAA2B;IAEnC,sBAAsB;IACtB,aAAa,EAAE,kCAAkC;IACjD,aAAa,EAAE,kCAAkC;IACjD,SAAS,EAAE,8BAA8B;IACzC,cAAc,EAAE,mCAAmC;CAC3C,CAAC;AAEX,6DAA6D;AAC7D,MAAM,CAAC,MAAM,aAAa,GAAG;IAC3B,uBAAuB;IACvB,YAAY,EAAE,4BAA4B;IAC1C,YAAY,EAAE,4BAA4B;IAE1C,oBAAoB;IACpB,qBAAqB,EAAE,qCAAqC;IAC5D,qBAAqB,EAAE,qCAAqC;IAC5D,oBAAoB,EAAE,oCAAoC;IAE1D,oBAAoB;IACpB,qBAAqB,EAAE,qCAAqC;IAC5D,qBAAqB,EAAE,qCAAqC;IAC5D,oBAAoB,EAAE,oCAAoC;IAE1D,cAAc;IACd,cAAc,EAAE,8BAA8B;CACtC,CAAC;AAEX,sDAAsD;AACtD,MAAM,CAAC,MAAM,WAAW,GAAG;IACzB,kBAAkB;IAClB,YAAY,EAAE,0BAA0B;IACxC,UAAU,EAAE,wBAAwB;IACpC,gBAAgB,EAAE,8BAA8B;IAEhD,qBAAqB;IACrB,gBAAgB,EAAE,8BAA8B;CACxC,CAAC;AAEX,iDAAiD;AACjD,MAAM,CAAC,MAAM,SAAS,GAAG;IACvB,kBAAkB;IAClB,cAAc,EAAE,0BAA0B;IAE1C,qBAAqB;IACrB,iBAAiB,EAAE,6BAA6B;IAChD,kBAAkB,EAAE,8BAA8B;IAClD,gBAAgB,EAAE,4BAA4B;IAC9C,iBAAiB,EAAE,6BAA6B;CACxC,CAAC;AAEX,yCAAyC;AACzC,MAAM,CAAC,MAAM,aAAa,GAAG;IAC3B,MAAM,EAAE,aAAa;IACrB,IAAI,EAAE,WAAW;IACjB,SAAS,EAAE,gBAAgB;IAC3B,WAAW,EAAE,kBAAkB;IAC/B,MAAM,EAAE,aAAa;IACrB,IAAI,EAAE,WAAW;IACjB,EAAE,EAAE,SAAS;CACL,CAAC;AAsDX,yCAAyC;AACzC,MAAM,UAAU,iBAAiB,CAA8B,SAAiB,EAAE,IAAQ;IACxF,OAAO,IAAI,WAAW,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;AACtD,CAAC;AAED,4CAA4C;AAC5C,MAAM,UAAU,mBAAmB,CAA8B,SAAiB,EAAE,IAAQ;IAC1F,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;AAC3D,CAAC","sourcesContent":["/**\n * Centralized event name constants for the Euclid event system.\n * All events follow the pattern: euclid:<group>:<action>\n * This ensures consistent naming and prevents conflicts with other frameworks.\n */\n\n// Wallet Events - Handle wallet connection and management\nexport const WALLET_EVENTS = {\n  // Connection requests and results\n  CONNECT_REQUEST: 'euclid:wallet:connect-request',\n  CONNECT_SUCCESS: 'euclid:wallet:connect-success',\n  CONNECT_FAILED: 'euclid:wallet:connect-failed',\n\n  // Disconnection requests and results\n  DISCONNECT_REQUEST: 'euclid:wallet:disconnect-request',\n  DISCONNECT_SUCCESS: 'euclid:wallet:disconnect-success',\n\n  // Wallet state changes\n  STATE_CHANGED: 'euclid:wallet:state-changed',\n} as const;\n\n// Swap Events - Handle token swapping operations\nexport const SWAP_EVENTS = {\n  // Route management\n  ROUTES_REFRESH: 'euclid:swap:routes-refresh',\n  ROUTES_START_POLLING: 'euclid:swap:routes-start-polling',\n  ROUTES_STOP_POLLING: 'euclid:swap:routes-stop-polling',\n\n  // Swap execution\n  EXECUTE_REQUEST: 'euclid:swap:execute-request',\n  EXECUTE_SUCCESS: 'euclid:swap:execute-success',\n  EXECUTE_FAILED: 'euclid:swap:execute-failed',\n} as const;\n\n// Liquidity Events - Handle liquidity pool operations\nexport const LIQUIDITY_EVENTS = {\n  // Add liquidity operations\n  ADD_REQUEST: 'euclid:liquidity:add-request',\n  ADD_SUCCESS: 'euclid:liquidity:add-success',\n  ADD_FAILED: 'euclid:liquidity:add-failed',\n\n  // Remove liquidity operations\n  REMOVE_REQUEST: 'euclid:liquidity:remove-request',\n  REMOVE_SUCCESS: 'euclid:liquidity:remove-success',\n  REMOVE_FAILED: 'euclid:liquidity:remove-failed',\n\n  // Position management\n  POSITIONS_REFRESH: 'euclid:liquidity:positions-refresh',\n} as const;\n\n// Transaction Events - Handle transaction tracking and monitoring\nexport const TRANSACTION_EVENTS = {\n  // Transaction lifecycle\n  SUBMITTED: 'euclid:transaction:submitted',\n  FINALIZED: 'euclid:transaction:finalized',\n  TIMEOUT: 'euclid:transaction:timeout',\n  FAILED: 'euclid:transaction:failed',\n\n  // Tracking management\n  TRACK_REQUEST: 'euclid:transaction:track-request',\n  STOP_TRACKING: 'euclid:transaction:stop-tracking',\n  GET_STATS: 'euclid:transaction:get-stats',\n  STATS_RESPONSE: 'euclid:transaction:stats-response',\n} as const;\n\n// Market Data Events - Handle market information and pricing\nexport const MARKET_EVENTS = {\n  // Initial data loading\n  LOAD_INITIAL: 'euclid:market:load-initial',\n  REFRESH_DATA: 'euclid:market:refresh-data',\n\n  // Token information\n  TOKEN_DETAILS_REQUEST: 'euclid:market:token-details-request',\n  TOKEN_DETAILS_SUCCESS: 'euclid:market:token-details-success',\n  TOKEN_DETAILS_FAILED: 'euclid:market:token-details-failed',\n\n  // Chain information\n  CHAIN_DETAILS_REQUEST: 'euclid:market:chain-details-request',\n  CHAIN_DETAILS_SUCCESS: 'euclid:market:chain-details-success',\n  CHAIN_DETAILS_FAILED: 'euclid:market:chain-details-failed',\n\n  // Escrow data\n  ESCROWS_LOADED: 'euclid:market:escrows-loaded',\n} as const;\n\n// User Data Events - Handle user-specific information\nexport const USER_EVENTS = {\n  // Data management\n  REFRESH_DATA: 'euclid:user:refresh-data',\n  CLEAR_DATA: 'euclid:user:clear-data',\n  CONTROLLER_READY: 'euclid:user:controller-ready',\n\n  // Balance management\n  BALANCES_REFRESH: 'euclid:user:balances-refresh',\n} as const;\n\n// UI Events - Handle user interface interactions\nexport const UI_EVENTS = {\n  // Token selection\n  TOKEN_SELECTED: 'euclid:ui:token-selected',\n\n  // Modal interactions\n  WALLET_MODAL_OPEN: 'euclid:ui:wallet-modal-open',\n  WALLET_MODAL_CLOSE: 'euclid:ui:wallet-modal-close',\n  TOKEN_MODAL_OPEN: 'euclid:ui:token-modal-open',\n  TOKEN_MODAL_CLOSE: 'euclid:ui:token-modal-close',\n} as const;\n\n// Consolidated export for easy importing\nexport const EUCLID_EVENTS = {\n  WALLET: WALLET_EVENTS,\n  SWAP: SWAP_EVENTS,\n  LIQUIDITY: LIQUIDITY_EVENTS,\n  TRANSACTION: TRANSACTION_EVENTS,\n  MARKET: MARKET_EVENTS,\n  USER: USER_EVENTS,\n  UI: UI_EVENTS,\n} as const;\n\n// Type definitions for event data payloads\nexport interface WalletEventData {\n  chainUID: string;\n  walletType?: string;\n  address?: string;\n  error?: string;\n}\n\nexport interface SwapEventData {\n  fromToken?: string;\n  toToken?: string;\n  amount?: string;\n  txHash?: string;\n  error?: string;\n}\n\nexport interface LiquidityEventData {\n  poolId?: string;\n  tokens?: Array<{ tokenId: string; amount: string }>;\n  lpTokenAmount?: string;\n  txHash?: string;\n  error?: string;\n}\n\nexport interface TransactionEventData {\n  txHash: string;\n  chainUID: string;\n  type: 'swap' | 'add_liquidity' | 'remove_liquidity' | 'other';\n  status?: 'pending' | 'success' | 'failed' | 'timeout';\n  error?: string;\n}\n\nexport interface MarketEventData {\n  tokenId?: string;\n  chainUID?: string;\n  data?: Record<string, unknown>;\n  error?: string;\n}\n\nexport interface UserEventData {\n  chainUID?: string;\n  address?: string;\n  data?: Record<string, unknown>;\n}\n\nexport interface UIEventData {\n  tokenId?: string;\n  modalType?: string;\n  action?: string;\n  data?: Record<string, unknown>;\n}\n\n// Helper function to create typed events\nexport function createEuclidEvent<T = Record<string, unknown>>(eventName: string, data?: T): CustomEvent<T> {\n  return new CustomEvent(eventName, { detail: data });\n}\n\n// Helper function to dispatch events safely\nexport function dispatchEuclidEvent<T = Record<string, unknown>>(eventName: string, data?: T): void {\n  window.dispatchEvent(createEuclidEvent(eventName, data));\n}\n"]}