{"version":3,"file":"euclid-api.types.js","sourceRoot":"","sources":["../../../src/utils/types/euclid-api.types.ts"],"names":[],"mappings":"AAAA,iCAAiC;AACjC,sEAAsE","sourcesContent":["// Euclid Protocol Specific Types\n// These are derived from the Euclid documentation and used internally\n\nimport type {\n  TokenWithDenom,\n  TokenWithDenomAndAmount,\n  CrossChainUser,\n  EuclidChainConfig,\n  TokenMetadata,\n  PoolInfo,\n  UserBalance,\n  SwapPath,\n  RoutePath,\n  TransactionResponse\n} from './api.types';\n\n// Re-export for convenience\nexport type { RoutePath } from './api.types';\n\n// Legacy alias\nexport type ChainInfo = EuclidChainConfig;\n\n// ============================================================================\n// INTERNAL STORE TYPES\n// ============================================================================\n\nexport interface WalletState {\n  isConnected: boolean;\n  address: string | null;\n  chainId: string | null;\n  chainUID: string | null;\n  walletType: 'metamask' | 'keplr' | 'phantom' | null;\n  balances: UserBalance[];\n  loading: boolean;\n  error: string | null;\n}\n\n// Legacy wallet info type for backward compatibility\nexport interface WalletInfo {\n  address: string;\n  chainUID: string;\n  isConnected: boolean;\n  walletType: 'metamask' | 'keplr' | 'phantom';\n  type?: 'metamask' | 'keplr' | 'phantom'; // legacy alias for walletType\n  name?: string; // legacy compatibility\n  balances: UserBalance[];\n}\n\nexport interface SwapState {\n  tokenIn: TokenMetadata | null;\n  tokenOut: TokenMetadata | null;\n  fromToken: TokenMetadata | null; // alias for backward compatibility\n  toToken: TokenMetadata | null;   // alias for backward compatibility\n  amountIn: string;\n  amountOut: string;\n  fromAmount: string; // alias for backward compatibility\n  toAmount: string;   // alias for backward compatibility\n  routes: RoutePath[];\n  selectedRoute: RoutePath | null;\n  slippage: number;\n  loading: boolean;\n  error: string | null;\n}\n\nexport interface LiquidityState {\n  token1: TokenMetadata | null;\n  token2: TokenMetadata | null;\n  amount1: string;\n  amount2: string;\n  token1Amount: string; // legacy alias for amount1\n  token2Amount: string; // legacy alias for amount2\n  pool: PoolInfo | null;\n  selectedPool: PoolInfo | null; // legacy alias for pool\n  userLpBalance: string;\n  loading: boolean;\n  error: string | null;\n}\n\nexport interface MarketState {\n  chains: EuclidChainConfig[];\n  tokens: TokenMetadata[];\n  pools: PoolInfo[];\n  prices: Record<string, number>;\n  loading: boolean;\n  error: string | null;\n  lastUpdated: number;\n}\n\n// ============================================================================\n// COMPONENT PROP TYPES\n// ============================================================================\n\nexport interface TokenInputProps {\n  label: string;\n  value: string;\n  token: TokenMetadata | null;\n  balances: UserBalance[];\n  onValueChange: (value: string) => void;\n  onTokenSelect: () => void;\n  disabled?: boolean;\n  showBalance?: boolean;\n  showMax?: boolean;\n}\n\nexport interface PoolCardProps {\n  pool: PoolInfo;\n  token1Metadata: TokenMetadata;\n  token2Metadata: TokenMetadata;\n  userLpBalance?: string;\n  onAddLiquidity: () => void;\n  onRemoveLiquidity: () => void;\n}\n\n// ============================================================================\n// API CLIENT INTERFACES\n// ============================================================================\n\nexport interface EuclidGraphQLClient {\n  getChains(variables?: { showAllChains?: boolean; type?: string }): Promise<EuclidChainConfig[]>;\n  getTokenMetadata(variables?: { token?: string; chain_uid?: string }): Promise<TokenMetadata[]>;\n  getAllPools(): Promise<PoolInfo[]>;\n  getUserBalances(user: CrossChainUser): Promise<UserBalance[]>;\n}\n\nexport interface EuclidRESTClient {\n  getRoutes(request: {\n    amount_in: string;\n    token_in: string;\n    token_out: string;\n    external?: boolean;\n    chain_uids?: string[];\n  }): Promise<RoutePath[]>;\n\n  buildSwapTransaction(request: {\n    amount_in: string;\n    asset_in: TokenWithDenom;\n    slippage: string;\n    sender: CrossChainUser;\n    swap_path: SwapPath;\n  }): Promise<TransactionResponse>;\n\n  buildAddLiquidityTransaction(request: {\n    slippage_tolerance_bps: number;\n    pair_info: { token_1: TokenWithDenomAndAmount; token_2: TokenWithDenomAndAmount };\n    sender: CrossChainUser;\n  }): Promise<TransactionResponse>;\n\n  buildRemoveLiquidityTransaction(request: {\n    slippage_tolerance_bps: number;\n    lp_token_amount: string;\n    sender: CrossChainUser;\n  }): Promise<TransactionResponse>;\n}\n\n// ============================================================================\n// WALLET ADAPTER TYPES\n// ============================================================================\n\nexport interface WalletAdapter {\n  type: 'metamask' | 'keplr' | 'phantom';\n  isAvailable(): boolean;\n  connect(chainId?: string): Promise<{ address: string; chainId: string }>;\n  disconnect(): Promise<void>;\n  getBalance(address: string): Promise<string>;\n  signAndBroadcast(transaction: TransactionResponse): Promise<string>;\n  switchChain(chainId: string): Promise<void>;\n  addChain(config: EuclidChainConfig): Promise<void>;\n}\n\n// ============================================================================\n// EVENT TYPES\n// ============================================================================\n\nexport interface WalletConnectedEvent {\n  address: string;\n  chainId: string;\n  chainUID: string;\n  walletType: 'metamask' | 'keplr' | 'phantom';\n}\n\nexport interface SwapCompletedEvent {\n  txHash: string;\n  tokenIn: TokenWithDenomAndAmount;\n  tokenOut: TokenWithDenomAndAmount;\n  route: RoutePath;\n}\n\nexport interface LiquidityAddedEvent {\n  txHash: string;\n  token1: TokenWithDenomAndAmount;\n  token2: TokenWithDenomAndAmount;\n  lpTokenAmount: string;\n}\n\nexport interface LiquidityRemovedEvent {\n  txHash: string;\n  lpTokenAmount: string;\n  token1Amount: string;\n  token2Amount: string;\n}\n\n// ============================================================================\n// UTILITY TYPES\n// ============================================================================\n\nexport type ChainType = 'EVM' | 'Cosmwasm';\n\nexport interface FormattedBalance {\n  raw: string;\n  formatted: string;\n  symbol: string;\n  usdValue?: number;\n}\n\nexport interface PriceInfo {\n  tokenId: string;\n  price: number;\n  change24h: number;\n  marketCap?: number;\n  volume24h?: number;\n}\n\nexport interface TransactionStatus {\n  hash: string;\n  status: 'pending' | 'success' | 'failed';\n  timestamp: number;\n  chainUID: string;\n  blockHeight?: number;\n  gasUsed?: string;\n  fee?: string;\n}\n"]}