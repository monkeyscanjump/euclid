{"file":"p-Bfu1xZ0p.js","mappings":"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","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/core/euclid-liquidity-controller/euclid-liquidity-controller.tsx"],"sourcesContent":["import { Component, Listen, State, Watch } from '@stencil/core';\nimport { liquidityStore } from '../../../store/liquidity.store';\nimport { marketStore } from '../../../store/market.store';\nimport { walletStore } from '../../../store/wallet.store';\nimport { apiClient } from '../../../utils/api-client';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\n\ninterface TransactionResponse {\n  txHash?: string;\n  transactionHash?: string;\n}\n\n@Component({\n  tag: 'euclid-liquidity-controller',\n})\nexport class EuclidLiquidityController {\n  @State() isInitialized = false;\n\n  async componentDidLoad() {\n    await this.initialize();\n  }\n\n  private async initialize() {\n    console.log('üíß Initializing Liquidity Controller...');\n\n    // Subscribe to liquidity store changes\n    liquidityStore.onChange('selectedPool', () => this.handlePoolChange());\n\n    this.isInitialized = true;\n    console.log('‚úÖ Liquidity Controller initialized');\n  }\n\n  private handlePoolChange() {\n    const { selectedPool } = liquidityStore.state;\n    if (selectedPool) {\n      console.log('üèä Pool selected for liquidity operations:', selectedPool.id);\n    }\n  }\n\n  // Execute add liquidity transaction\n  async executeAddLiquidity(): Promise<{ success: boolean; txHash?: string; error?: string }> {\n    try {\n      const { selectedPool, token1, token2, token1Amount, token2Amount } = liquidityStore.state;\n\n      if (!selectedPool || !token1 || !token2 || !token1Amount || !token2Amount) {\n        return { success: false, error: 'Missing required liquidity parameters' };\n      }\n\n      // Check if wallets are connected for both tokens\n      const token1Wallet = walletStore.getWallet(token1.chainUID);\n      const token2Wallet = walletStore.getWallet(token2.chainUID);\n\n      if (!token1Wallet?.isConnected) {\n        return { success: false, error: `Wallet not connected for ${token1.symbol}` };\n      }\n\n      if (!token2Wallet?.isConnected) {\n        return { success: false, error: `Wallet not connected for ${token2.symbol}` };\n      }\n\n      // Check sufficient balances\n      if (!walletStore.hasSufficientBalance(token1.chainUID, token1.id, token1Amount)) {\n        return { success: false, error: `Insufficient ${token1.symbol} balance` };\n      }\n\n      if (!walletStore.hasSufficientBalance(token2.chainUID, token2.id, token2Amount)) {\n        return { success: false, error: `Insufficient ${token2.symbol} balance` };\n      }\n\n      liquidityStore.setAddingLiquidity(true);\n\n      console.log('üíß Executing add liquidity...', {\n        pool: selectedPool.id,\n        token1: token1.symbol,\n        token2: token2.symbol,\n        amount1: token1Amount,\n        amount2: token2Amount,\n      });\n\n      // Execute add liquidity via API\n      const result = await apiClient.createAddLiquidityTransactionWrapped({\n        slippage_tolerance_bps: 50, // 0.5% = 50 basis points\n        timeout: (Math.floor(Date.now() / 1000) + 1200).toString(), // 20 minutes\n        pair_info: {\n          token_1: {\n            token: token1.id,\n            amount: token1Amount,\n            token_type: token1.token_type || { native: { denom: token1.id } }\n          },\n          token_2: {\n            token: token2.id,\n            amount: token2Amount,\n            token_type: token2.token_type || { native: { denom: token2.id } }\n          }\n        },\n        sender: {\n          address: token1Wallet.address,\n          chain_uid: token1.chainUID\n        }\n      });\n\n      if (result.success && result.data) {\n        const transactionData = result.data as TransactionResponse;\n        const { txHash } = transactionData;\n\n                // Get wallet info and track the transaction\n        const connectedWallets = walletStore.getAllConnectedWallets();\n        const walletInfo = connectedWallets[0]; // Use primary wallet\n        const primaryChain = walletInfo.chainUID;\n\n        walletStore.addTransaction(primaryChain, {\n          txHash: txHash || (result.data as TransactionResponse)?.transactionHash || 'pending',\n          timestamp: Date.now(),\n          type: 'add_liquidity'\n        });\n\n        // Emit global event for transaction tracking\n        dispatchEuclidEvent(EUCLID_EVENTS.TRANSACTION.SUBMITTED, {\n          txHash,\n          chainUID: primaryChain,\n          type: 'add_liquidity',\n        });\n\n        console.log('‚úÖ Add liquidity transaction submitted:', txHash);\n        return { success: true, txHash };\n      } else {\n        return { success: false, error: result.error || 'Add liquidity execution failed' };\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      console.error('‚ùå Add liquidity execution error:', errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      liquidityStore.setAddingLiquidity(false);\n    }\n  }\n\n  // Execute remove liquidity transaction\n  async executeRemoveLiquidity(\n    poolId: string,\n    lpTokenAmount: string\n  ): Promise<{ success: boolean; txHash?: string; error?: string }> {\n    try {\n      const position = liquidityStore.getPosition(poolId);\n      if (!position) {\n        return { success: false, error: 'Liquidity position not found' };\n      }\n\n      // Get the pool info from market store\n      const allPools = marketStore.state.pools;\n      const pool = allPools.find(p => p.id === poolId);\n\n      if (!pool) {\n        return { success: false, error: 'Pool not found' };\n      }\n\n      // Get token metadata to find chain info\n      const tokens = marketStore.state.tokens;\n      const token1 = tokens.find(t => t.address === pool.token_1);\n      if (!token1) {\n        return { success: false, error: 'Token metadata not found' };\n      }\n\n      const primaryWallet = walletStore.getWallet(token1.chain_uid);\n\n      if (!primaryWallet?.isConnected) {\n        return { success: false, error: `Wallet not connected for ${token1.chain_uid}` };\n      }\n\n      // Check sufficient LP token balance\n      const lpBalance = walletStore.getWalletBalance(token1.chain_uid, `lp-${poolId}`);\n      if (!lpBalance || BigInt(lpBalance.amount) < BigInt(lpTokenAmount)) {\n        return { success: false, error: 'Insufficient LP token balance' };\n      }\n\n      liquidityStore.setRemovingLiquidity(true);\n\n      console.log('üíß Executing remove liquidity...', {\n        poolId,\n        lpAmount: lpTokenAmount,\n      });\n\n      // Execute remove liquidity via API\n      const result = await apiClient.createRemoveLiquidityTransactionWrapped({\n        slippage_tolerance_bps: 50, // 0.5% = 50 basis points\n        timeout: (Math.floor(Date.now() / 1000) + 1200).toString(), // 20 minutes\n        lp_token_amount: lpTokenAmount,\n        sender: {\n          address: primaryWallet.address,\n          chain_uid: token1.chain_uid\n        }\n      });\n\n      if (result.success && result.data) {\n        const transactionData = result.data as TransactionResponse;\n        const { txHash } = transactionData;\n\n        // Add transaction to wallet store\n        walletStore.addTransaction(token1.chain_uid, {\n          txHash,\n          timestamp: Date.now(),\n          type: 'remove_liquidity'\n        });\n\n        // Emit global event for transaction tracking\n        dispatchEuclidEvent(EUCLID_EVENTS.TRANSACTION.SUBMITTED, {\n          txHash,\n          chainUID: token1.chain_uid,\n          type: 'remove_liquidity',\n        });\n\n        console.log('‚úÖ Remove liquidity transaction submitted:', txHash);\n        return { success: true, txHash };\n      } else {\n        return { success: false, error: result.error || 'Remove liquidity execution failed' };\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      console.error('‚ùå Remove liquidity execution error:', errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      liquidityStore.setRemovingLiquidity(false);\n    }\n  }\n\n  // Event listeners\n  @Listen(EUCLID_EVENTS.LIQUIDITY.ADD_REQUEST, { target: 'window' })\n  async handleAddLiquidityExecution() {\n    console.log('üíß Add liquidity execution requested via event');\n    const result = await this.executeAddLiquidity();\n\n    // Emit result event\n    if (result.success) {\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.ADD_SUCCESS, {\n        txHash: result.txHash,\n      });\n    } else {\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.ADD_FAILED, {\n        error: result.error,\n      });\n    }\n  }\n\n  @Listen(EUCLID_EVENTS.LIQUIDITY.REMOVE_REQUEST, { target: 'window' })\n  async handleRemoveLiquidityExecution(event: CustomEvent<{ poolId: string; lpTokenAmount: string }>) {\n    console.log('üíß Remove liquidity execution requested via event');\n    const { poolId, lpTokenAmount } = event.detail;\n    const result = await this.executeRemoveLiquidity(poolId, lpTokenAmount);\n\n    // Emit result event\n    if (result.success) {\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.REMOVE_SUCCESS, {\n        txHash: result.txHash,\n      });\n    } else {\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.REMOVE_FAILED, {\n        error: result.error,\n      });\n    }\n  }\n\n  @Watch('isInitialized')\n  onInitializedChange(newValue: boolean) {\n    if (newValue) {\n      console.log('üíß Liquidity Controller ready for operations');\n    }\n  }\n\n  render() {\n    // This is a headless controller - no visual output\n    return null;\n  }\n}\n"],"version":3}