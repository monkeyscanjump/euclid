import{D as n}from"./p-9CRWQAc1.js";async function t(t,e,o){const i={...n,...o};const a=new AbortController;const r=setTimeout((()=>a.abort()),i.apiTimeout);try{const n=await fetch(i.graphqlEndpoint,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({query:t,variables:e}),signal:a.signal});clearTimeout(r);if(!n.ok){throw new Error(`HTTP ${n.status}: ${n.statusText}`)}const o=await n.json();if(o.errors){throw new Error(`GraphQL errors: ${o.errors.map((n=>n.message)).join(", ")}`)}return o.data}catch(n){clearTimeout(r);const t=n instanceof Error?n.message:"Unknown error";throw new Error(`Token query failed: ${t}`)}}async function e(n){const e=`\n    query Token(\n      $limit: Int,\n      $offset: Int,\n      $verified: Boolean,\n      $dex: [String!],\n      $chainUids: [String!],\n      $showVolume: Boolean,\n      $search: String\n    ) {\n      token {\n        token_metadatas(\n          limit: $limit,\n          offset: $offset,\n          verified: $verified,\n          dex: $dex,\n          chain_uids: $chainUids,\n          show_volume: $showVolume,\n          search: $search\n        ) {\n          coinDecimal\n          displayName\n          tokenId\n          description\n          image\n          price\n          price_change_24h\n          price_change_7d\n          dex\n          chain_uids\n          total_volume\n          total_volume_24h\n          tags\n          min_swap_value\n          social\n          is_verified\n        }\n      }\n    }\n  `;const o=await t(e,n);return o.token.token_metadatas.map((n=>({...n,total_volume:parseFloat(n.total_volume)||0,total_volume_24h:parseFloat(n.total_volume_24h)||0,min_swap_value:parseFloat(n.min_swap_value)||0})))}async function o(n){const e=`\n    query Token($tokenId: String!) {\n      token {\n        token_metadata(token_id: $tokenId) {\n          coinDecimal\n          displayName\n          tokenId\n          description\n          image\n          price\n          price_change_24h\n          price_change_7d\n          dex\n          chain_uids\n          total_volume\n          total_volume_24h\n          tags\n          min_swap_value\n          social\n          is_verified\n          market_cap\n          circulating_supply\n          total_supply\n          max_supply\n          holders_count\n        }\n      }\n    }\n  `;const o=await t(e,{tokenId:n});const i=o.token.token_metadata;if(!i)return null;return{...i,total_volume:parseFloat(i.total_volume)||0,total_volume_24h:parseFloat(i.total_volume_24h)||0,min_swap_value:parseFloat(i.min_swap_value)||0,market_cap:parseFloat(i.market_cap)||0,circulating_supply:parseFloat(i.circulating_supply)||0,total_supply:parseFloat(i.total_supply)||0,max_supply:parseFloat(i.max_supply)||0}}async function i(n,t){const o={search:n};if(t){o.chainUids=[t]}return e(o)}async function a(n,t){const o=await e({search:n,chainUids:[t],limit:1});return o.length>0?o[0]:null}async function r(n){const e=`\n    query Token_price($tokenId: String!) {\n      token {\n        token_price(token_id: $tokenId) {\n          token_id\n          price_usd\n          price_change_24h\n          price_change_7d\n          price_change_30d\n          market_cap\n          volume_24h\n          last_updated\n        }\n      }\n    }\n  `;const o=await t(e,{tokenId:n});return o.token.token_price}async function s(n,e,o){const i=`\n    query Token_history($tokenId: String!, $timeframe: String, $limit: Int) {\n      token {\n        token_history(token_id: $tokenId, timeframe: $timeframe, limit: $limit) {\n          historical_data {\n            timestamp\n            price_usd\n            volume_24h\n            market_cap\n          }\n          timeframe\n          token_id\n        }\n      }\n    }\n  `;const a=await t(i,{tokenId:n,timeframe:e,limit:o});return a.token.token_history}async function c(n){const e=`\n    query Token_supply($tokenId: String!) {\n      token {\n        token_supply(token_id: $tokenId) {\n          token_id\n          total_supply\n          circulating_supply\n          max_supply\n          holders_count\n          supply_type\n          last_updated\n        }\n      }\n    }\n  `;const o=await t(e,{tokenId:n});return o.token.token_supply}async function l(n,e,o){const i=`\n    query Token_transfers($tokenId: String!, $limit: Int, $offset: Int) {\n      token {\n        token_transfers(token_id: $tokenId, limit: $limit, offset: $offset) {\n          transfers {\n            tx_hash\n            from_address\n            to_address\n            amount\n            timestamp\n            block_height\n            chain_uid\n          }\n          pagination {\n            total_count\n            limit\n            offset\n          }\n        }\n      }\n    }\n  `;const a=await t(i,{tokenId:n,limit:e,offset:o});return a.token.token_transfers}async function _(n,e,o){const i=`\n    query Token_holders($tokenId: String!, $limit: Int, $offset: Int) {\n      token {\n        token_holders(token_id: $tokenId, limit: $limit, offset: $offset) {\n          holders {\n            address\n            balance\n            percentage\n            chain_uid\n            last_updated\n          }\n          pagination {\n            total_count\n            limit\n            offset\n          }\n        }\n      }\n    }\n  `;const a=await t(i,{tokenId:n,limit:e,offset:o});return a.token.token_holders}async function m(n,e,o){const i=`\n    query Top_tokens($sortBy: String, $limit: Int, $timeframe: String) {\n      token {\n        top_tokens(sort_by: $sortBy, limit: $limit, timeframe: $timeframe) {\n          tokens {\n            token_id\n            display_name\n            symbol\n            price_usd\n            market_cap\n            volume_24h\n            price_change_24h\n            rank\n          }\n          sort_criteria\n          timeframe\n        }\n      }\n    }\n  `;const a=await t(i,{sortBy:n,limit:e,timeframe:o});return a.token.top_tokens}export{o as getTokenByIdImpl,a as getTokenBySymbolImpl,s as getTokenHistoryImpl,_ as getTokenHoldersImpl,e as getTokenMetadataImpl,r as getTokenPriceImpl,c as getTokenSupplyImpl,l as getTokenTransfersImpl,m as getTopTokensImpl,i as searchTokensImpl};
//# sourceMappingURL=p-DSbD_X6d.js.map