{"file":"p-B5-fHFCm.js","mappings":"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","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/core/euclid-user-data-controller/euclid-user-data-controller.tsx"],"sourcesContent":["import { Component, h, State, Listen, Watch } from '@stencil/core';\nimport { walletStore } from '../../../store/wallet.store';\nimport { apiClient } from '../../../utils/api-client';\nimport { DEFAULTS } from '../../../utils/constants';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\nimport type { UserBalance, WalletInfo } from '../../../utils/types';\n\ninterface BalanceItem {\n  denom: string;\n  amount: string;\n}\n\ninterface BalanceData {\n  balance?: {\n    all?: BalanceItem[];\n  };\n}\n\n@Component({\n  tag: 'euclid-user-data-controller',\n})\nexport class EuclidUserDataController {\n  @State() isInitialized = false;\n  @State() isLoading = false;\n  @State() error: string | null = null;\n\n  private refreshTimer: number;\n  private retryCount = 0;\n  private maxRetries = 3;\n\n  async componentDidLoad() {\n    await this.initialize();\n  }\n\n  disconnectedCallback() {\n    this.clearPeriodicRefresh();\n    walletStore.dispose?.();\n  }\n\n  private async initialize() {\n    console.log('üë§ Initializing User Data Controller...');\n\n    // Listen for wallet connection changes\n    walletStore.onChange('wallets', async (wallets: Map<string, WalletInfo>) => {\n      const connectedWallets = Array.from(wallets.values()).filter(wallet => wallet.isConnected);\n      if (connectedWallets.length > 0) {\n        await this.handleWalletConnection(connectedWallets);\n      } else {\n        this.handleWalletDisconnection();\n      }\n    });\n\n    // Initial check for already connected wallets\n    const connectedWallets = walletStore.getAllConnectedWallets();\n    if (connectedWallets.length > 0) {\n      await this.handleWalletConnection(connectedWallets);\n    }\n\n    this.isInitialized = true;\n    console.log('‚úÖ User Data Controller initialized');\n  }\n\n  private async handleWalletConnection(_wallets: WalletInfo[]) {\n    try {\n      this.isLoading = true;\n      this.error = null;\n\n      console.log('üîó Wallets connected, loading user data...');\n\n      // Load user data for each connected wallet\n      await Promise.all([\n        this.loadUserBalances(),\n        this.loadLiquidityPositions(),\n        this.loadUserTransactions()\n      ]);\n\n      // Start periodic refresh\n      this.setupPeriodicRefresh();\n\n      // Reset retry count on success\n      this.retryCount = 0;\n\n    } catch (error) {\n      console.error('‚ùå Failed to load user data:', error);\n      await this.handleLoadError(error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private handleWalletDisconnection() {\n    console.log('üîå Wallets disconnected, clearing user data...');\n\n    this.clearPeriodicRefresh();\n    this.retryCount = 0;\n\n    // Clear all wallet data\n    walletStore.clear();\n  }\n\n  private async loadUserBalances() {\n    const connectedWallets = walletStore.getAllConnectedWallets();\n\n    for (const wallet of connectedWallets) {\n      try {\n        console.log(`üí∞ Loading balances for ${wallet.chainUID}:${wallet.address.slice(0, 8)}...`);\n\n        const balanceResponse = await apiClient.getBalance(wallet.address, wallet.chainUID);\n\n        if (balanceResponse.success && balanceResponse.data) {\n          const balanceData = balanceResponse.data as BalanceData;\n          if (balanceData.balance?.all) {\n            const chainBalances: UserBalance[] = balanceData.balance.all.map(item => ({\n              amount: item.amount,\n              token_id: item.denom,\n              // Legacy compatibility fields\n              token: item.denom,\n              balance: item.amount,\n              chain_uid: wallet.chainUID,\n              token_type: { native: { denom: item.denom } }\n            }));\n\n            // Update wallet store with balances for this chain\n            walletStore.updateWalletBalances(wallet.chainUID, chainBalances);\n          }\n        }\n      } catch (error) {\n        console.warn(`‚ö†Ô∏è Failed to load balance for ${wallet.chainUID}:`, error.message);\n        // Continue loading other addresses even if one fails\n      }\n    }\n\n    console.log(`‚úÖ Updated balances for connected wallets`);\n  }\n\n  private async loadLiquidityPositions() {\n    const connectedWallets = walletStore.getAllConnectedWallets();\n\n    for (const wallet of connectedWallets) {\n      try {\n        console.log(`üèä Loading liquidity positions for ${wallet.chainUID}:${wallet.address.slice(0, 8)}...`);\n\n        // Stub implementation - to be completed later\n        console.log('Liquidity positions loading - implementation pending');\n\n        // TODO: Implement proper liquidity position loading\n        // const poolsResponse = await apiClient.getUserPools(wallet.address);\n        // Process and update walletStore.updateWalletPositions(wallet.chainUID, positions);\n\n      } catch (error) {\n        console.warn(`‚ö†Ô∏è Failed to load liquidity positions for ${wallet.chainUID}:`, error.message);\n      }\n    }\n  }\n\n  private async loadUserTransactions() {\n    const connectedWallets = walletStore.getAllConnectedWallets();\n\n    for (const wallet of connectedWallets) {\n      try {\n        console.log(`üìä Loading transactions for ${wallet.chainUID}:${wallet.address.slice(0, 8)}...`);\n\n        // Stub implementation - to be completed later\n        console.log('Transactions loading - implementation pending');\n\n        // TODO: Implement proper transaction loading\n        // const txResponse = await apiClient.getUserTransactions(wallet.address, wallet.chainUID);\n        // Process and update walletStore.updateWalletTransactions(wallet.chainUID, transactions);\n\n      } catch (error) {\n        console.warn(`‚ö†Ô∏è Failed to load transactions for ${wallet.chainUID}:`, error.message);\n      }\n    }\n  }\n\n  private calculatePoolShare(lpTokenBalance: string, poolInfo: Record<string, unknown>): number {\n    try {\n      const lpBalance = parseFloat(lpTokenBalance);\n      const totalSupply = parseFloat(String(poolInfo.totalSupply || poolInfo.liquidity || '0'));\n\n      if (totalSupply === 0) return 0;\n      return (lpBalance / totalSupply) * 100;\n    } catch {\n      return 0;\n    }\n  }\n\n  private calculateTokenAmount(sharePercentage: number, tokenInfo: Record<string, unknown>): string {\n    try {\n      const reserve = parseFloat(String(tokenInfo.reserve || tokenInfo.balance || '0'));\n      const amount = (reserve * sharePercentage) / 100;\n      return amount.toString();\n    } catch {\n      return '0';\n    }\n  }\n\n  private calculatePositionValue(sharePercentage: number, poolInfo: Record<string, unknown>): string {\n    try {\n      const tvl = parseFloat(String(poolInfo.tvl || poolInfo.liquidity || '0'));\n      const value = (tvl * sharePercentage) / 100;\n      return value.toString();\n    } catch {\n      return '0';\n    }\n  }\n\n  private setupPeriodicRefresh() {\n    this.clearPeriodicRefresh();\n\n    this.refreshTimer = window.setInterval(async () => {\n      // Check if we have connected wallets\n      const connectedWallets = walletStore.getAllConnectedWallets();\n      if (connectedWallets.length > 0) {\n        console.log('üîÑ Refreshing wallet data...');\n        await this.refreshUserData();\n      }\n    }, DEFAULTS.BALANCE_REFRESH_INTERVAL);\n  }\n\n  private clearPeriodicRefresh() {\n    if (this.refreshTimer) {\n      clearInterval(this.refreshTimer);\n      this.refreshTimer = null;\n    }\n  }\n\n  private async refreshUserData() {\n    const connectedWallets = walletStore.getAllConnectedWallets();\n    if (connectedWallets.length === 0) return;\n\n    try {\n      this.isLoading = true;\n\n      await Promise.all([\n        this.loadUserBalances(),\n        this.loadLiquidityPositions()\n      ]);\n\n      // Portfolio value calculation to be implemented later\n      console.log('Portfolio value calculation - implementation pending');\n\n      this.retryCount = 0;\n\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to refresh user data:', error);\n      await this.handleLoadError(error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private async handleLoadError(error: Error) {\n    this.retryCount++;\n\n    if (this.retryCount < this.maxRetries) {\n      console.log(`üîÑ Retrying user data load (${this.retryCount}/${this.maxRetries})...`);\n\n      // Exponential backoff\n      const delay = Math.pow(2, this.retryCount) * 1000;\n      setTimeout(() => {\n        this.refreshUserData();\n      }, delay);\n\n    } else {\n      console.error('‚ùå Max retries reached for user data loading');\n      this.error = error.message || 'Failed to load user data';\n    }\n  }\n\n  @Listen(EUCLID_EVENTS.USER.REFRESH_DATA, { target: 'window' })\n  async handleRefreshRequest() {\n    console.log('üîÑ Manual user data refresh requested');\n    await this.refreshUserData();\n  }\n\n  @Listen(EUCLID_EVENTS.USER.CLEAR_DATA, { target: 'window' })\n  handleClearRequest() {\n    console.log('üóëÔ∏è User data clear requested');\n    walletStore.clear();\n    this.clearPeriodicRefresh();\n  }\n\n  @Watch('isInitialized')\n  onInitializedChange(newValue: boolean) {\n    if (newValue) {\n      // Emit initialization complete event\n      dispatchEuclidEvent(EUCLID_EVENTS.USER.CONTROLLER_READY, {\n        timestamp: Date.now()\n      });\n    }\n  }\n\n  render() {\n    // This is a headless controller - no visual output\n    return null;\n  }\n}\n"],"version":3}