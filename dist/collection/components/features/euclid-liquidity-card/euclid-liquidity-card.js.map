{"version":3,"file":"euclid-liquidity-card.js","sourceRoot":"","sources":["../../../../src/components/features/euclid-liquidity-card/euclid-liquidity-card.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, h, State, Event, EventEmitter, Listen, Element } from '@stencil/core';\nimport { walletStore } from '../../../store/wallet.store';\nimport { appStore } from '../../../store/app.store';\nimport { liquidityStore } from '../../../store/liquidity.store';\nimport { marketStore } from '../../../store/market.store';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\nimport type { PoolInfo, TokenMetadata } from '../../../utils/types/api.types';\n\nexport interface LiquidityToken {\n  symbol: string;\n  name: string;\n  address: string;\n  chainUID: string;\n  decimals: number;\n  logoUrl?: string;\n  balance?: string;\n  price?: number;\n}\n\nexport interface LiquidityPoolInfo {\n  address: string;\n  tokenA: LiquidityToken;\n  tokenB: LiquidityToken;\n  reserveA: string;\n  reserveB: string;\n  totalSupply: string;\n  lpTokenSymbol: string;\n  fee: number; // 0.3 = 0.3%\n  apy: number;\n  tvl: number;\n}\n\nexport interface LiquidityPosition {\n  poolAddress: string;\n  lpTokenBalance: string;\n  shareOfPool: number;\n  tokenAAmount: string;\n  tokenBAmount: string;\n  value: number;\n}\n\nexport interface LiquidityQuote {\n  tokenAAmount: string;\n  tokenBAmount: string;\n  lpTokensReceived: string;\n  shareOfPool: number;\n  priceImpact: number;\n  minimumLpReceived: string;\n}\n\nexport interface RemoveLiquidityQuote {\n  lpTokenAmount: string;\n  tokenAReceived: string;\n  tokenBReceived: string;\n  shareRemoved: number;\n  minimumTokenAReceived: string;\n  minimumTokenBReceived: string;\n}\n\n@Component({\n  tag: 'euclid-liquidity-card',\n  styleUrl: 'euclid-liquidity-card.css',\n  shadow: true,\n})\nexport class EuclidLiquidityCard {\n  @Element() element!: HTMLElement;\n\n  /**\n   * Available tokens for liquidity provision (legacy - use store instead)\n   * @deprecated Use marketStore instead\n   */\n  @Prop() tokens: LiquidityToken[] = [];\n\n  /**\n   * Available pools (legacy - use store instead)\n   * @deprecated Use marketStore instead\n   */\n  @Prop() pools: LiquidityPoolInfo[] = [];\n\n  /**\n   * User's liquidity positions\n   */\n  @Prop() positions: LiquidityPosition[] = [];\n\n  // Store data (automatically synced like pools-list)\n  @State() storePools: PoolInfo[] = [];\n  @State() storeTokens: TokenMetadata[] = [];\n  @State() storeLoading: boolean = false;\n\n  // Selected pool from store data (this is what we actually use)\n  @State() selectedStorePool: PoolInfo | null = null;\n\n  /**\n   * Selected pool for liquidity operations\n   */\n  @Prop({ mutable: true }) selectedPool: LiquidityPoolInfo | null = null;\n\n  /**\n   * Current mode: 'add' or 'remove'\n   */\n  @Prop({ mutable: true }) mode: 'add' | 'remove' = 'add';\n\n  /**\n   * Token A amount input\n   */\n  @Prop({ mutable: true }) tokenAAmount: string = '';\n\n  /**\n   * Token B amount input\n   */\n  @Prop({ mutable: true }) tokenBAmount: string = '';\n\n  /**\n   * LP token amount for removal\n   */\n  @Prop({ mutable: true }) lpTokenAmount: string = '';\n\n  /**\n   * Whether the component is in loading state\n   */\n  @Prop() loading: boolean = false;\n\n  /**\n   * Whether the liquidity functionality is disabled\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * Connected wallet address\n   */\n  @Prop() walletAddress: string = '';\n\n  /**\n   * Default slippage tolerance (0.5 = 0.5%)\n   */\n  @Prop() defaultSlippage: number = 0.5;\n\n  /**\n   * Card title\n   */\n  @Prop() cardTitle: string = 'Manage Liquidity';\n\n  // Internal state\n  @State() isPoolSelectorOpen: boolean = false;\n    // Token selector type removed - no individual token selection needed\n  @State() currentQuote: LiquidityQuote | null = null;\n  @State() removeQuote: RemoveLiquidityQuote | null = null;\n  @State() isQuoting: boolean = false;\n  @State() slippage: number = this.defaultSlippage;\n  @State() isAdvancedOpen: boolean = false;\n  @State() lpPercentage: number = 0;\n\n  // Events\n  @Event() liquidityAdded: EventEmitter<{\n    pool: LiquidityPoolInfo;\n    tokenAAmount: string;\n    tokenBAmount: string;\n    expectedLpTokens: string;\n    slippage: number;\n  }>;\n\n  @Event() liquidityRemoved: EventEmitter<{\n    pool: LiquidityPoolInfo;\n    lpTokenAmount: string;\n    expectedTokenA: string;\n    expectedTokenB: string;\n    slippage: number;\n  }>;\n\n  @Event() poolSelected: EventEmitter<PoolInfo>;\n\n  @Event() quoteRequested: EventEmitter<{\n    pool: PoolInfo;\n    tokenAAmount?: string;\n    tokenBAmount?: string;\n    lpTokenAmount?: string;\n    mode: 'add' | 'remove';\n  }>;\n\n  // Quote update timer\n  private quoteTimer: NodeJS.Timeout | null = null;\n\n  componentWillLoad() {\n    // Connect to market store for automatic data updates\n    this.syncWithStore();\n\n    // Listen for store changes\n    marketStore.onChange('pools', () => {\n      this.syncWithStore();\n    });\n\n    marketStore.onChange('tokens', () => {\n      this.syncWithStore();\n    });\n  }\n\n  componentDidLoad() {\n    // Auto-quote when inputs change\n    this.startQuoteTimer();\n  }\n\n  disconnectedCallback() {\n    if (this.quoteTimer) {\n      clearTimeout(this.quoteTimer);\n    }\n  }\n\n  private syncWithStore() {\n    // Use store data if available, fallback to legacy props\n    this.storePools = marketStore.state.pools.length > 0 ? marketStore.state.pools : [];\n    this.storeTokens = marketStore.state.tokens.length > 0 ? marketStore.state.tokens : [];\n    this.storeLoading = marketStore.state.loading;\n\n    console.log('🔄 Liquidity card store sync:', {\n      storePools: this.storePools.length,\n      storeTokens: this.storeTokens.length,\n      storeLoading: this.storeLoading\n    });\n  }\n\n  @Listen('valueChange')\n  handleInputChange(event: CustomEvent) {\n    const inputId = (event.target as HTMLElement).id;\n\n    if (inputId === 'token-a-input') {\n      this.tokenAAmount = event.detail.value;\n      this.calculateTokenBFromA();\n    } else if (inputId === 'token-b-input') {\n      this.tokenBAmount = event.detail.value;\n      this.calculateTokenAFromB();\n    } else if (inputId === 'lp-token-input') {\n      this.lpTokenAmount = event.detail.value;\n      this.startQuoteTimer();\n    }\n  }\n\n  // Token selection removed - pools determine tokens\n\n  @Listen('modalClose')\n  handleModalClose() {\n    this.isPoolSelectorOpen = false;\n  }\n\n  // findPoolWithToken method removed - pool selection is direct\n\n  private calculateTokenBFromA() {\n    if (!this.selectedPool || !this.tokenAAmount || parseFloat(this.tokenAAmount) <= 0) {\n      this.tokenBAmount = '';\n      return;\n    }\n\n    const pool = this.selectedPool;\n    const reserveA = parseFloat(pool.reserveA);\n    const reserveB = parseFloat(pool.reserveB);\n    const amountA = parseFloat(this.tokenAAmount);\n\n    // Calculate proportional amount for token B\n    const amountB = (amountA * reserveB) / reserveA;\n    this.tokenBAmount = amountB.toFixed(6);\n\n    this.startQuoteTimer();\n  }\n\n  private calculateTokenAFromB() {\n    if (!this.selectedPool || !this.tokenBAmount || parseFloat(this.tokenBAmount) <= 0) {\n      this.tokenAAmount = '';\n      return;\n    }\n\n    const pool = this.selectedPool;\n    const reserveA = parseFloat(pool.reserveA);\n    const reserveB = parseFloat(pool.reserveB);\n    const amountB = parseFloat(this.tokenBAmount);\n\n    // Calculate proportional amount for token A\n    const amountA = (amountB * reserveA) / reserveB;\n    this.tokenAAmount = amountA.toFixed(6);\n\n    this.startQuoteTimer();\n  }\n\n  private startQuoteTimer() {\n    if (this.quoteTimer) {\n      clearTimeout(this.quoteTimer);\n    }\n\n    if (this.shouldRequestQuote()) {\n      this.quoteTimer = setTimeout(() => {\n        this.requestQuote();\n      }, 800);\n    } else {\n      this.currentQuote = null;\n      this.removeQuote = null;\n    }\n  }\n\n  private shouldRequestQuote(): boolean {\n    if (!this.selectedPool) return false;\n\n    if (this.mode === 'add') {\n      return !!(this.tokenAAmount && this.tokenBAmount &&\n                parseFloat(this.tokenAAmount) > 0 && parseFloat(this.tokenBAmount) > 0);\n    } else {\n      return !!(this.lpTokenAmount && parseFloat(this.lpTokenAmount) > 0);\n    }\n  }\n\n  private async requestQuote() {\n    if (!this.selectedPool) return;\n\n    this.isQuoting = true;\n\n    // Convert LiquidityPoolInfo to PoolInfo format for the event\n    const apiPool: PoolInfo = {\n      pool_id: this.selectedPool.address,\n      id: this.selectedPool.address,\n      token_1: this.selectedPool.tokenA.address,\n      token_2: this.selectedPool.tokenB.address,\n      token1: this.selectedPool.tokenA.address, // legacy compatibility\n      token2: this.selectedPool.tokenB.address, // legacy compatibility\n      total_liquidity: this.selectedPool.totalSupply\n    };\n\n    this.quoteRequested.emit({\n      pool: apiPool,\n      tokenAAmount: this.mode === 'add' ? this.tokenAAmount : undefined,\n      tokenBAmount: this.mode === 'add' ? this.tokenBAmount : undefined,\n      lpTokenAmount: this.mode === 'remove' ? this.lpTokenAmount : undefined,\n      mode: this.mode,\n    });\n\n    // Simulate quote response\n    setTimeout(() => {\n      if (this.selectedPool) {\n        if (this.mode === 'add' && this.tokenAAmount && this.tokenBAmount) {\n          const pool = this.selectedPool;\n          const totalSupply = parseFloat(pool.totalSupply);\n          const reserveA = parseFloat(pool.reserveA);\n          const amountA = parseFloat(this.tokenAAmount);\n\n          // Calculate LP tokens to be received\n          const lpTokensReceived = totalSupply > 0\n            ? (amountA / reserveA) * totalSupply\n            : Math.sqrt(parseFloat(this.tokenAAmount) * parseFloat(this.tokenBAmount));\n\n          this.currentQuote = {\n            tokenAAmount: this.tokenAAmount,\n            tokenBAmount: this.tokenBAmount,\n            lpTokensReceived: lpTokensReceived.toFixed(6),\n            shareOfPool: (lpTokensReceived / (totalSupply + lpTokensReceived)) * 100,\n            priceImpact: Math.random() * 0.5, // Mock price impact\n            minimumLpReceived: (lpTokensReceived * (1 - this.slippage / 100)).toFixed(6),\n          };\n        } else if (this.mode === 'remove' && this.lpTokenAmount) {\n          const pool = this.selectedPool;\n          const totalSupply = parseFloat(pool.totalSupply);\n          const lpAmount = parseFloat(this.lpTokenAmount);\n          const shareRemoved = (lpAmount / totalSupply) * 100;\n\n          const tokenAReceived = (lpAmount / totalSupply) * parseFloat(pool.reserveA);\n          const tokenBReceived = (lpAmount / totalSupply) * parseFloat(pool.reserveB);\n\n          this.removeQuote = {\n            lpTokenAmount: this.lpTokenAmount,\n            tokenAReceived: tokenAReceived.toFixed(6),\n            tokenBReceived: tokenBReceived.toFixed(6),\n            shareRemoved,\n            minimumTokenAReceived: (tokenAReceived * (1 - this.slippage / 100)).toFixed(6),\n            minimumTokenBReceived: (tokenBReceived * (1 - this.slippage / 100)).toFixed(6),\n          };\n        }\n      }\n      this.isQuoting = false;\n    }, 1000);\n  }\n\n  private handleModeChange = (newMode: 'add' | 'remove') => {\n    this.mode = newMode;\n    this.resetAmounts();\n    this.currentQuote = null;\n    this.removeQuote = null;\n  };\n\n  private resetAmounts = () => {\n    this.tokenAAmount = '';\n    this.tokenBAmount = '';\n    this.lpTokenAmount = '';\n    this.lpPercentage = 0;\n  };\n\n  // Token selection is not needed - tokens are determined by pool selection\n\n  private openPoolSelector = () => {\n    this.isPoolSelectorOpen = true;\n  };\n\n  // Legacy selectPool method removed - use selectStorePool instead\n\n  private selectStorePool = (pool: PoolInfo) => {\n    // Store the selected pool directly - no conversion needed!\n    this.selectedStorePool = pool;\n    this.isPoolSelectorOpen = false;\n    this.resetAmounts();\n\n    // Emit the pool selection event with actual store data\n    this.poolSelected.emit(pool);\n\n    console.log('🎯 Pool selected:', {\n      poolId: pool.pool_id,\n      token1: pool.token_1,\n      token2: pool.token_2,\n      totalLiquidity: pool.total_liquidity,\n      apr: pool.apr\n    });\n  };\n\n  private handleMaxClick = (type: 'tokenA' | 'tokenB' | 'lp') => {\n    if (type === 'tokenA' && this.selectedPool?.tokenA.balance) {\n      this.tokenAAmount = this.selectedPool.tokenA.balance;\n      this.calculateTokenBFromA();\n    } else if (type === 'tokenB' && this.selectedPool?.tokenB.balance) {\n      this.tokenBAmount = this.selectedPool.tokenB.balance;\n      this.calculateTokenAFromB();\n    } else if (type === 'lp') {\n      const position = this.getUserPosition();\n      if (position) {\n        this.lpTokenAmount = position.lpTokenBalance;\n        this.startQuoteTimer();\n      }\n    }\n  };\n\n  private handlePercentageClick = (percentage: number) => {\n    this.lpPercentage = percentage;\n    const position = this.getUserPosition();\n    if (position) {\n      const amount = (parseFloat(position.lpTokenBalance) * percentage / 100).toFixed(6);\n      this.lpTokenAmount = amount;\n      this.startQuoteTimer();\n    }\n  };\n\n  private getUserPosition(): LiquidityPosition | null {\n    if (!this.selectedPool) return null;\n    return this.positions.find(pos => pos.poolAddress === this.selectedPool!.address) || null;\n  }\n\n  private handleLiquidity = () => {\n    // Check if we need to connect wallets first\n    if (!this.isWalletConnectedForLiquidity()) {\n      // Determine which chain to connect to\n      const chainUID = this.getFirstDisconnectedChain();\n      appStore.openWalletModal(chainUID);\n      return;\n    }\n\n    if (!this.selectedPool) return;\n\n    // Update liquidity store - convert to api.types.PoolInfo format\n    const apiPool: PoolInfo = {\n      pool_id: this.selectedPool.address,\n      id: this.selectedPool.address,\n      token_1: this.selectedPool.tokenA.address,\n      token_2: this.selectedPool.tokenB.address,\n      token1: this.selectedPool.tokenA.address, // legacy compatibility\n      token2: this.selectedPool.tokenB.address, // legacy compatibility\n      total_liquidity: this.selectedPool.totalSupply\n    };\n\n    liquidityStore.setSelectedPool(apiPool);\n\n    if (this.mode === 'add' && this.currentQuote) {\n      // Set liquidity store values\n      liquidityStore.setToken1Amount(this.tokenAAmount);\n      liquidityStore.setToken2Amount(this.tokenBAmount);\n\n      // Trigger add liquidity execution\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.ADD_REQUEST);\n\n      // Emit legacy event for backward compatibility\n      this.liquidityAdded.emit({\n        pool: this.selectedPool,\n        tokenAAmount: this.tokenAAmount,\n        tokenBAmount: this.tokenBAmount,\n        expectedLpTokens: this.currentQuote.lpTokensReceived,\n        slippage: this.slippage,\n      });\n    } else if (this.mode === 'remove' && this.removeQuote) {\n      // Trigger remove liquidity execution\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.REMOVE_REQUEST, {\n        poolId: this.selectedPool.address,\n        lpTokenAmount: this.lpTokenAmount,\n      });\n\n      // Emit legacy event for backward compatibility\n      this.liquidityRemoved.emit({\n        pool: this.selectedPool,\n        lpTokenAmount: this.lpTokenAmount,\n        expectedTokenA: this.removeQuote.tokenAReceived,\n        expectedTokenB: this.removeQuote.tokenBReceived,\n        slippage: this.slippage,\n      });\n    }\n  };\n\n  private getFirstDisconnectedChain(): string {\n    if (!this.selectedPool) return 'ethereum';\n\n    const tokenAConnected = walletStore.isWalletConnected(this.selectedPool.tokenA.chainUID);\n    if (!tokenAConnected) return this.selectedPool.tokenA.chainUID;\n\n    return this.selectedPool.tokenB.chainUID;\n  }\n\n  private canExecute(): boolean {\n    if (!this.selectedPool || !this.walletAddress || this.loading || this.disabled || this.isQuoting) {\n      return false;\n    }\n\n    if (this.mode === 'add') {\n      return !!(this.currentQuote && this.tokenAAmount && this.tokenBAmount);\n    } else {\n      return !!(this.removeQuote && this.lpTokenAmount);\n    }\n  }\n\n  private getButtonText(): string {\n    // Check wallet connection for required chains\n    if (!this.isWalletConnectedForLiquidity()) {\n      const chainName = this.getRequiredChainName();\n      return `Connect ${chainName}`;\n    }\n\n    if (!this.selectedPool) return 'Select Pool';\n\n    if (this.mode === 'add') {\n      if (!this.tokenAAmount || !this.tokenBAmount) return 'Enter Amounts';\n      if (this.isQuoting) return 'Getting Quote...';\n      if (this.loading) return 'Adding Liquidity...';\n      return 'Add Liquidity';\n    } else {\n      if (!this.lpTokenAmount) return 'Enter LP Amount';\n      if (this.isQuoting) return 'Getting Quote...';\n      if (this.loading) return 'Removing Liquidity...';\n      return 'Remove Liquidity';\n    }\n  }\n\n  private isWalletConnectedForLiquidity(): boolean {\n    if (!this.selectedPool) return false;\n\n    // For liquidity operations, we need wallets connected for both token chains\n    const tokenAConnected = walletStore.isWalletConnected(this.selectedPool.tokenA.chainUID);\n    const tokenBConnected = walletStore.isWalletConnected(this.selectedPool.tokenB.chainUID);\n\n    return tokenAConnected && tokenBConnected;\n  }\n\n  private getRequiredChainName(): string {\n    if (!this.selectedPool) return 'Wallet';\n\n    // Check which chains need connection\n    const tokenAConnected = walletStore.isWalletConnected(this.selectedPool.tokenA.chainUID);\n    const tokenBConnected = walletStore.isWalletConnected(this.selectedPool.tokenB.chainUID);\n\n    if (!tokenAConnected && !tokenBConnected) {\n      return 'Wallets';\n    } else if (!tokenAConnected) {\n      return this.getChainDisplayName(this.selectedPool.tokenA.chainUID);\n    } else if (!tokenBConnected) {\n      return this.getChainDisplayName(this.selectedPool.tokenB.chainUID);\n    }\n\n    return 'Wallet';\n  }\n\n  private getChainDisplayName(chainUID: string): string {\n    // Simple mapping - in production this would come from chain config\n    const chainNames = {\n      'ethereum': 'Ethereum',\n      'polygon': 'Polygon',\n      'arbitrum': 'Arbitrum',\n      'optimism': 'Optimism',\n      'cosmoshub-4': 'Cosmos Hub',\n      'osmosis-1': 'Osmosis',\n    };\n    return chainNames[chainUID] || 'Wallet';\n  }\n\n  render() {\n    const position = this.getUserPosition();\n\n    return (\n      <div class=\"liquidity-card\">\n        {/* Header */}\n        <div class=\"liquidity-header\">\n          <h3 class=\"liquidity-title\">{this.cardTitle}</h3>\n          <div class=\"mode-toggle\">\n            <button\n              class={{\n                'mode-button': true,\n                'mode-button--active': this.mode === 'add',\n              }}\n              onClick={() => this.handleModeChange('add')}\n              type=\"button\"\n            >\n              Add\n            </button>\n            <button\n              class={{\n                'mode-button': true,\n                'mode-button--active': this.mode === 'remove',\n              }}\n              onClick={() => this.handleModeChange('remove')}\n              type=\"button\"\n            >\n              Remove\n            </button>\n          </div>\n        </div>\n\n        {/* Pool Selection */}\n        <div class=\"pool-section\">\n          <div class=\"section-header\">\n            <span class=\"section-label\">Pool</span>\n          </div>\n\n          <div class=\"pool-selector\" onClick={this.openPoolSelector}>\n            {this.selectedStorePool ? (\n              <div class=\"selected-pool\">\n                <div class=\"pool-tokens\">\n                  <div class=\"token-pair\">\n                    {/* Token logos would come from storeTokens metadata */}\n                  </div>\n                  <div class=\"pool-info\">\n                    <span class=\"pool-name\">\n                      {this.selectedStorePool.token_1.toUpperCase()}/{this.selectedStorePool.token_2.toUpperCase()}\n                    </span>\n                    <span class=\"pool-fee\">Pool Fee</span>\n                  </div>\n                </div>\n                <div class=\"pool-stats\">\n                  <div class=\"stat\">\n                    <span class=\"stat-label\">APR</span>\n                    <span class=\"stat-value\">{this.selectedStorePool.apr || 'N/A'}</span>\n                  </div>\n                  <div class=\"stat\">\n                    <span class=\"stat-label\">TVL</span>\n                    <span class=\"stat-value\">${parseFloat(this.selectedStorePool.total_liquidity || '0').toLocaleString()}</span>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div class=\"select-pool-button\">\n                <span>Select Pool</span>\n                <svg class=\"dropdown-arrow\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M7 10l5 5 5-5z\"/>\n                </svg>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Position Info (only show in remove mode) */}\n        {this.mode === 'remove' && position && (\n          <div class=\"position-info\">\n            <div class=\"position-header\">\n              <span class=\"position-label\">Your Position</span>\n            </div>\n            <div class=\"position-details\">\n              <div class=\"position-row\">\n                <span class=\"position-item-label\">LP Tokens</span>\n                <span class=\"position-item-value\">{parseFloat(position.lpTokenBalance).toLocaleString()}</span>\n              </div>\n              <div class=\"position-row\">\n                <span class=\"position-item-label\">Pool Share</span>\n                <span class=\"position-item-value\">{position.shareOfPool.toFixed(4)}%</span>\n              </div>\n              <div class=\"position-row\">\n                <span class=\"position-item-label\">{this.selectedPool?.tokenA.symbol}</span>\n                <span class=\"position-item-value\">{parseFloat(position.tokenAAmount).toLocaleString()}</span>\n              </div>\n              <div class=\"position-row\">\n                <span class=\"position-item-label\">{this.selectedPool?.tokenB.symbol}</span>\n                <span class=\"position-item-value\">{parseFloat(position.tokenBAmount).toLocaleString()}</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {this.mode === 'add' ? this.renderAddLiquidity() : this.renderRemoveLiquidity()}\n\n        {/* Quote Information */}\n        {(this.currentQuote || this.removeQuote) && (\n          <div class=\"quote-info\">\n            {this.mode === 'add' && this.currentQuote ? (\n              <div>\n                <div class=\"quote-row\">\n                  <span class=\"quote-label\">LP Tokens Received</span>\n                  <span class=\"quote-value\">{parseFloat(this.currentQuote.lpTokensReceived).toLocaleString()}</span>\n                </div>\n                <div class=\"quote-row\">\n                  <span class=\"quote-label\">Pool Share</span>\n                  <span class=\"quote-value\">{this.currentQuote.shareOfPool.toFixed(4)}%</span>\n                </div>\n                {this.currentQuote.priceImpact > 0.1 && (\n                  <div class=\"quote-row\">\n                    <span class=\"quote-label\">Price Impact</span>\n                    <span class={{\n                      'quote-value': true,\n                      'quote-value--warning': this.currentQuote.priceImpact > 1,\n                      'quote-value--danger': this.currentQuote.priceImpact > 3,\n                    }}>\n                      {this.currentQuote.priceImpact.toFixed(3)}%\n                    </span>\n                  </div>\n                )}\n              </div>\n            ) : this.mode === 'remove' && this.removeQuote ? (\n              <div>\n                <div class=\"quote-row\">\n                  <span class=\"quote-label\">Pool Share Removed</span>\n                  <span class=\"quote-value\">{this.removeQuote.shareRemoved.toFixed(4)}%</span>\n                </div>\n                <div class=\"quote-row\">\n                  <span class=\"quote-label\">{this.selectedPool?.tokenA.symbol} Received</span>\n                  <span class=\"quote-value\">{parseFloat(this.removeQuote.tokenAReceived).toLocaleString()}</span>\n                </div>\n                <div class=\"quote-row\">\n                  <span class=\"quote-label\">{this.selectedPool?.tokenB.symbol} Received</span>\n                  <span class=\"quote-value\">{parseFloat(this.removeQuote.tokenBReceived).toLocaleString()}</span>\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n\n        {/* Advanced Settings */}\n        <div class=\"advanced-section\">\n          <button\n            class=\"advanced-toggle\"\n            onClick={() => this.isAdvancedOpen = !this.isAdvancedOpen}\n            type=\"button\"\n          >\n            <span>Advanced Settings</span>\n            <svg class={{\n              'dropdown-arrow': true,\n              'dropdown-arrow--open': this.isAdvancedOpen,\n            }} viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path d=\"M7 10l5 5 5-5z\"/>\n            </svg>\n          </button>\n\n          {this.isAdvancedOpen && (\n            <div class=\"advanced-panel\">\n              <div class=\"setting-item\">\n                <label class=\"setting-label\">Slippage Tolerance</label>\n                <div class=\"slippage-controls\">\n                  {[0.1, 0.5, 1.0].map((value) => (\n                    <button\n                      class={{\n                        'slippage-btn': true,\n                        'slippage-btn--active': this.slippage === value,\n                      }}\n                      onClick={() => this.slippage = value}\n                      type=\"button\"\n                    >\n                      {value}%\n                    </button>\n                  ))}\n                  <input\n                    class=\"slippage-input\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"50\"\n                    step=\"0.1\"\n                    value={this.slippage}\n                    onInput={(e) => this.slippage = parseFloat((e.target as HTMLInputElement).value)}\n                    placeholder=\"Custom\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Action Button */}\n        <euclid-button\n          variant=\"primary\"\n          size=\"lg\"\n          full-width={true}\n          loading={this.loading}\n          disabled={!this.canExecute()}\n          onClick={this.handleLiquidity}\n        >\n          {this.getButtonText()}\n        </euclid-button>\n\n        {/* Pool Selector Dropdown */}\n        {this.isPoolSelectorOpen && (\n          <div class=\"pool-selector-dropdown\">\n            <div class=\"dropdown-header\">\n              <h4>Select Pool</h4>\n              <button class=\"close-button\" onClick={() => this.isPoolSelectorOpen = false}>×</button>\n            </div>\n            <div class=\"pool-list\">\n              {this.storePools.length > 0 ? (\n                this.storePools.map(pool => (\n                  <div\n                    key={pool.pool_id}\n                    class=\"pool-item\"\n                    onClick={() => this.selectStorePool(pool)}\n                  >\n                    <div class=\"pool-tokens\">\n                      <span class=\"pool-name\">{pool.token_1.toUpperCase()}/{pool.token_2.toUpperCase()}</span>\n                    </div>\n                    <div class=\"pool-stats\">\n                      <span class=\"apr\">APR: {pool.apr || '0.00%'}</span>\n                      <span class=\"tvl\">TVL: ${parseFloat(pool.total_liquidity || '0').toLocaleString()}</span>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div class=\"no-pools\">No pools available</div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  private renderAddLiquidity() {\n    return (\n      <div class=\"liquidity-inputs\">\n        {/* Token A Input */}\n        <div class=\"token-input-section\">\n          <div class=\"input-header\">\n            <span class=\"input-label\">First Token</span>\n            {this.selectedPool?.tokenA.balance && (\n              <span class=\"balance-label\" onClick={() => this.handleMaxClick('tokenA')}>\n                Balance: {parseFloat(this.selectedPool.tokenA.balance).toLocaleString()}\n              </span>\n            )}\n          </div>\n\n          <euclid-token-input\n            id=\"token-a-input\"\n            value={this.tokenAAmount}\n            placeholder=\"0.0\"\n            show-max={!!this.selectedPool?.tokenA.balance}\n            onMaxClick={() => this.handleMaxClick('tokenA')}\n          >\n            <div slot=\"token\" class=\"token-display\">\n              {this.selectedStorePool ? (\n                <div class=\"selected-token\">\n                  <div class=\"token-info\">\n                    <span class=\"token-symbol\">{this.selectedStorePool.token_1.toUpperCase()}</span>\n                    <span class=\"token-name\">{this.selectedStorePool.token_1}</span>\n                  </div>\n                </div>\n              ) : (\n                <div class=\"no-pool-selected\">\n                  <span class=\"token-symbol\">TOKEN</span>\n                  <span class=\"token-name\">Select pool first</span>\n                </div>\n              )}\n            </div>\n          </euclid-token-input>\n        </div>\n\n        {/* Token B Input */}\n        <div class=\"token-input-section\">\n          <div class=\"input-header\">\n            <span class=\"input-label\">Second Token</span>\n            {this.selectedPool?.tokenB.balance && (\n              <span class=\"balance-label\" onClick={() => this.handleMaxClick('tokenB')}>\n                Balance: {parseFloat(this.selectedPool.tokenB.balance).toLocaleString()}\n              </span>\n            )}\n          </div>\n\n          <euclid-token-input\n            id=\"token-b-input\"\n            value={this.tokenBAmount}\n            placeholder=\"0.0\"\n            show-max={!!this.selectedPool?.tokenB.balance}\n            onMaxClick={() => this.handleMaxClick('tokenB')}\n          >\n            <div slot=\"token\" class=\"token-display\">\n              {this.selectedStorePool ? (\n                <div class=\"selected-token\">\n                  <div class=\"token-info\">\n                    <span class=\"token-symbol\">{this.selectedStorePool.token_2.toUpperCase()}</span>\n                    <span class=\"token-name\">{this.selectedStorePool.token_2}</span>\n                  </div>\n                </div>\n              ) : (\n                <div class=\"no-pool-selected\">\n                  <span class=\"token-symbol\">TOKEN</span>\n                  <span class=\"token-name\">Select pool first</span>\n                </div>\n              )}\n            </div>\n          </euclid-token-input>\n        </div>\n      </div>\n    );\n  }\n\n  private renderRemoveLiquidity() {\n    const position = this.getUserPosition();\n\n    return (\n      <div class=\"remove-liquidity\">\n        {/* Percentage Buttons */}\n        <div class=\"percentage-section\">\n          <div class=\"percentage-label\">Amount to Remove</div>\n          <div class=\"percentage-buttons\">\n            {[25, 50, 75, 100].map((percent) => (\n              <button\n                class={{\n                  'percentage-btn': true,\n                  'percentage-btn--active': this.lpPercentage === percent,\n                }}\n                onClick={() => this.handlePercentageClick(percent)}\n                type=\"button\"\n              >\n                {percent}%\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* LP Token Input */}\n        <div class=\"token-input-section\">\n          <div class=\"input-header\">\n            <span class=\"input-label\">LP Tokens to Remove</span>\n            {position && (\n              <span class=\"balance-label\" onClick={() => this.handleMaxClick('lp')}>\n                Balance: {parseFloat(position.lpTokenBalance).toLocaleString()}\n              </span>\n            )}\n          </div>\n\n          <euclid-token-input\n            id=\"lp-token-input\"\n            value={this.lpTokenAmount}\n            placeholder=\"0.0\"\n            show-max={!!position}\n            onMaxClick={() => this.handleMaxClick('lp')}\n          >\n            <div slot=\"token\" class=\"lp-token-display\">\n              {this.selectedPool ? (\n                <div class=\"lp-token-info\">\n                  <div class=\"token-pair\">\n                    {this.selectedPool.tokenA.logoUrl && (\n                      <img src={this.selectedPool.tokenA.logoUrl} alt={this.selectedPool.tokenA.symbol} class=\"token-logo\" />\n                    )}\n                    {this.selectedPool.tokenB.logoUrl && (\n                      <img src={this.selectedPool.tokenB.logoUrl} alt={this.selectedPool.tokenB.symbol} class=\"token-logo token-logo--overlap\" />\n                    )}\n                  </div>\n                  <span class=\"lp-symbol\">{this.selectedPool.lpTokenSymbol}</span>\n                </div>\n              ) : (\n                <span>Select Pool</span>\n              )}\n            </div>\n          </euclid-token-input>\n        </div>\n\n      </div>\n    );\n  }\n}\n"]}