{"file":"p-7SIWrB4f.js","mappings":"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","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/core/euclid-market-data-controller/euclid-market-data-controller.tsx"],"sourcesContent":["import { Component, h, State, Listen } from '@stencil/core';\nimport { marketStore } from '../../../store/market.store';\nimport { apiClient } from '../../../utils/api-client';\nimport { DEFAULTS } from '../../../utils/constants';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\n\n@Component({\n  tag: 'euclid-market-data-controller',\n})\nexport class EuclidMarketDataController {\n  @State() isInitialized = false;\n  private refreshInterval: number;\n\n  async componentDidLoad() {\n    await this.initialize();\n  }\n\n  disconnectedCallback() {\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n  }\n\n  private async initialize() {\n    console.log('üìä Initializing Market Data Controller...');\n\n    // Load initial market data\n    await this.loadInitialData();\n\n    // Set up periodic market data refresh\n    this.setupPeriodicRefresh();\n\n    this.isInitialized = true;\n    console.log('üìä Market Data Controller initialized');\n  }\n\n  private async loadInitialData() {\n    try {\n      marketStore.setLoading(true);\n\n      console.log('üìä Loading initial market data...');\n\n      // Load chains\n      const chainsResponse = await apiClient.getAllChains(false);\n      if (chainsResponse.success && chainsResponse.data) {\n        // Store the EuclidChainConfig[] data directly\n        marketStore.setChains(chainsResponse.data);\n        console.log('üì° Loaded chains:', chainsResponse.data.length);\n      } else {\n        console.warn('Failed to load chains:', chainsResponse.error);\n      }\n\n      // Load tokens\n      const tokensResponse = await apiClient.getAllTokens();\n      if (tokensResponse.success && tokensResponse.data) {\n        // Store the TokenMetadata[] data directly\n        marketStore.setTokens(tokensResponse.data);\n        console.log('ü™ô Loaded tokens:', tokensResponse.data.length);\n      } else {\n        console.warn('Failed to load tokens:', tokensResponse.error);\n      }\n\n      // Load pools\n      const poolsResponse = await apiClient.getAllPools();\n      if (poolsResponse.success && poolsResponse.data) {\n        marketStore.setPools(poolsResponse.data);\n        console.log('üèä Loaded pools:', poolsResponse.data.length);\n      } else {\n        console.warn('Failed to load pools:', poolsResponse.error);\n      }\n\n    } catch (error) {\n      console.error('Failed to load initial market data:', error);\n    } finally {\n      marketStore.setLoading(false);\n    }\n  }\n\n  private setupPeriodicRefresh() {\n    // Refresh market data every 5 minutes\n    this.refreshInterval = window.setInterval(async () => {\n      if (marketStore.isDataStale()) {\n        console.log('üîÑ Refreshing stale market data...');\n        await this.refreshMarketData();\n      }\n    }, DEFAULTS.MARKET_DATA_REFRESH_INTERVAL);\n  }\n\n  private async refreshMarketData() {\n    try {\n      marketStore.setLoading(true);\n\n      // Refresh chains data\n      const chainsResponse = await apiClient.getAllChains(false);\n      if (chainsResponse.success && chainsResponse.data) {\n        marketStore.setChains(chainsResponse.data);\n      }\n\n      // Refresh tokens data\n      const tokensResponse = await apiClient.getAllTokens();\n      if (tokensResponse.success && tokensResponse.data) {\n        marketStore.setTokens(tokensResponse.data);\n      }\n\n      console.log('‚úÖ Market data refreshed successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to refresh market data:', error);\n    } finally {\n      marketStore.setLoading(false);\n    }\n  }\n\n  @Listen(EUCLID_EVENTS.MARKET.LOAD_INITIAL, { target: 'window' })\n  async handleInitialDataLoad() {\n    console.log('üìä Loading initial market data...');\n    await this.loadInitialData();\n  }\n\n  @Listen(EUCLID_EVENTS.MARKET.REFRESH_DATA, { target: 'window' })\n  async handleRefreshRequest() {\n    console.log('üîÑ Manual market data refresh requested');\n    await this.refreshMarketData();\n  }\n\n  @Listen(EUCLID_EVENTS.MARKET.TOKEN_DETAILS_REQUEST, { target: 'window' })\n  async handleTokenDetailsRequest(event: CustomEvent<{ tokenId: string }>) {\n    const { tokenId } = event.detail;\n    console.log('üìã Loading token details for:', tokenId);\n\n    try {\n      // Get token denominations across all chains\n      const denomsResponse = await apiClient.getTokenDenoms(tokenId);\n      if (denomsResponse.success && denomsResponse.data) {\n        const denoms = denomsResponse.data.router.token_denoms.denoms;\n\n        // Emit token details loaded event\n        dispatchEuclidEvent(EUCLID_EVENTS.MARKET.TOKEN_DETAILS_SUCCESS, {\n          tokenId,\n          data: { denoms }\n        });\n      }\n\n      // Get escrow information\n      const escrowsResponse = await apiClient.getEscrows(tokenId);\n      if (escrowsResponse.success && escrowsResponse.data) {\n        const escrows = escrowsResponse.data.router.escrows;\n\n        // Emit escrow info loaded event\n        dispatchEuclidEvent(EUCLID_EVENTS.MARKET.ESCROWS_LOADED, {\n          tokenId,\n          data: { escrows }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to load token details:', error);\n\n      dispatchEuclidEvent(EUCLID_EVENTS.MARKET.TOKEN_DETAILS_FAILED, {\n        tokenId,\n        error: error.message\n      });\n    }\n  }\n\n  @Listen(EUCLID_EVENTS.MARKET.CHAIN_DETAILS_REQUEST, { target: 'window' })\n  async handleChainDetailsRequest(event: CustomEvent<{ chainUID: string }>) {\n    const { chainUID } = event.detail;\n    console.log('üîó Loading chain details for:', chainUID);\n\n    try {\n      // Get chain-specific data\n      const chain = marketStore.getChain(chainUID);\n      if (chain) {\n        // Emit chain details loaded event\n        dispatchEuclidEvent(EUCLID_EVENTS.MARKET.CHAIN_DETAILS_SUCCESS, {\n          chainUID,\n          data: { chain }\n        });\n      } else {\n        // Refresh chains if not found\n        await this.refreshMarketData();\n      }\n    } catch (error) {\n      console.error('Failed to load chain details:', error);\n\n      dispatchEuclidEvent(EUCLID_EVENTS.MARKET.CHAIN_DETAILS_FAILED, {\n        chainUID,\n        error: error.message\n      });\n    }\n  }\n\n  render() {\n    // This is a headless controller - no visual output\n    return null;\n  }\n}\n"],"version":3}