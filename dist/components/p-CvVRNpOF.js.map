{"file":"p-CvVRNpOF.js","mappings":"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","names":[],"sources":["src/store/liquidity.store.ts"],"sourcesContent":["import { createStore } from '@stencil/store';\nimport type { LiquidityState } from '../utils/types/euclid-api.types';\nimport type { TokenMetadata, PoolInfo, LiquidityPosition } from '../utils/types/api.types';\nimport type { BaseStore } from './types';\n\nconst initialState: LiquidityState = {\n  token1: null,\n  token2: null,\n  amount1: '',\n  amount2: '',\n  token1Amount: '', // legacy alias\n  token2Amount: '', // legacy alias\n  pool: null,\n  selectedPool: null, // legacy alias\n  userLpBalance: '0',\n  loading: false,\n  error: null,\n};\n\nconst { state, onChange, reset, dispose } = createStore(initialState);\n\n// Actions\nconst actions = {\n  setLoading(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setError(error: string | null) {\n    state.error = error;\n  },\n\n  setToken1(token: TokenMetadata | null) {\n    state.token1 = token;\n\n    // Clear pool if tokens don't match\n    if (state.pool && token &&\n        state.pool.token_1 !== token.id &&\n        state.pool.token_2 !== token.id) {\n      state.pool = null;\n    }\n  },\n\n  setToken2(token: TokenMetadata | null) {\n    state.token2 = token;\n\n    // Clear pool if tokens don't match\n    if (state.pool && token &&\n        state.pool.token_1 !== token.id &&\n        state.pool.token_2 !== token.id) {\n      state.pool = null;\n    }\n  },\n\n  setAmount1(amount: string) {\n    state.amount1 = amount;\n    state.token1Amount = amount; // Keep alias synchronized\n  },\n\n  setAmount2(amount: string) {\n    state.amount2 = amount;\n    state.token2Amount = amount; // Keep alias synchronized\n  },\n\n  // Backward compatibility aliases\n  setToken1Amount(amount: string) {\n    actions.setAmount1(amount);\n  },\n\n  setToken2Amount(amount: string) {\n    actions.setAmount2(amount);\n  },\n\n  setPool(pool: PoolInfo | null) {\n    state.pool = pool;\n    state.selectedPool = pool; // Keep alias synchronized\n  },\n\n  // Backward compatibility alias\n  setSelectedPool(pool: PoolInfo | null) {\n    actions.setPool(pool);\n  },\n\n  setUserLpBalance(balance: string) {\n    state.userLpBalance = balance;\n  },\n\n  swapTokens() {\n    const token1 = state.token1;\n    const token2 = state.token2;\n    const amount1 = state.amount1;\n    const amount2 = state.amount2;\n\n    state.token1 = token2;\n    state.token2 = token1;\n    state.amount1 = amount2;\n    state.amount2 = amount1;\n  },\n\n  clear() {\n    reset();\n  },\n\n  // Additional methods that components expect\n  setAddingLiquidity(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setRemovingLiquidity(loading: boolean) {\n    state.loading = loading;\n  },\n\n  getPosition(poolId: string): LiquidityPosition | null {\n    // This would typically fetch from API or cache\n    // For now, return null\n    console.warn(`getPosition(${poolId}) not implemented`);\n    return null;\n  },\n};\n\n// Getters\nconst getters = {\n  canAddLiquidity: () => {\n    return !!(\n      state.token1 &&\n      state.token2 &&\n      state.amount1 &&\n      state.amount2 &&\n      parseFloat(state.amount1) > 0 &&\n      parseFloat(state.amount2) > 0 &&\n      !state.loading\n    );\n  },\n\n  canRemoveLiquidity: () => {\n    return !!(\n      state.pool &&\n      state.userLpBalance &&\n      parseFloat(state.userLpBalance) > 0 &&\n      !state.loading\n    );\n  },\n\n  getPoolLiquidity: () => {\n    return state.pool?.total_liquidity || '0';\n  },\n\n  getPoolVolume24h: () => {\n    return state.pool?.volume_24h || '0';\n  },\n\n  getPoolFees24h: () => {\n    return state.pool?.fees_24h || '0';\n  },\n\n  getPoolAPR: () => {\n    return state.pool?.apr || '0';\n  },\n\n  isValidPair: () => {\n    return !!(\n      state.token1 &&\n      state.token2 &&\n      state.token1.id !== state.token2.id\n    );\n  },\n};\n\n// Store interface\nexport interface LiquidityStore extends BaseStore<LiquidityState> {\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  setToken1: (token: TokenMetadata | null) => void;\n  setToken2: (token: TokenMetadata | null) => void;\n  setAmount1: (amount: string) => void;\n  setAmount2: (amount: string) => void;\n  setToken1Amount: (amount: string) => void; // alias\n  setToken2Amount: (amount: string) => void; // alias\n  setPool: (pool: PoolInfo | null) => void;\n  setSelectedPool: (pool: PoolInfo | null) => void; // alias\n  setUserLpBalance: (balance: string) => void;\n  swapTokens: () => void;\n  clear: () => void;\n  setAddingLiquidity: (loading: boolean) => void;\n  setRemovingLiquidity: (loading: boolean) => void;\n  getPosition: (poolId: string) => LiquidityPosition | null;\n  canAddLiquidity: () => boolean;\n  canRemoveLiquidity: () => boolean;\n  getPoolLiquidity: () => string;\n  getPoolVolume24h: () => string;\n  getPoolFees24h: () => string;\n  getPoolAPR: () => string;\n  isValidPair: () => boolean;\n}\n\nexport const liquidityStore: LiquidityStore = {\n  state,\n  onChange,\n  reset,\n  dispose,\n  ...actions,\n  ...getters,\n};\n\nexport type { LiquidityState };\n"],"version":3}