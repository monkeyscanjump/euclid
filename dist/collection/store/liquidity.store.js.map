{"version":3,"file":"liquidity.store.js","sourceRoot":"","sources":["../../src/store/liquidity.store.ts"],"names":[],"mappings":"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","sourcesContent":["import { createStore } from '@stencil/store';\nimport type { LiquidityState } from '../utils/types/euclid-api.types';\nimport type { TokenMetadata, PoolInfo, LiquidityPosition } from '../utils/types/api.types';\nimport type { BaseStore } from './types';\n\nconst initialState: LiquidityState = {\n  token1: null,\n  token2: null,\n  amount1: '',\n  amount2: '',\n  token1Amount: '', // legacy alias\n  token2Amount: '', // legacy alias\n  pool: null,\n  selectedPool: null, // legacy alias\n  userLpBalance: '0',\n  loading: false,\n  error: null,\n};\n\nconst { state, onChange, reset, dispose } = createStore(initialState);\n\n// Actions\nconst actions = {\n  setLoading(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setError(error: string | null) {\n    state.error = error;\n  },\n\n  setToken1(token: TokenMetadata | null) {\n    state.token1 = token;\n\n    // Clear pool if tokens don't match\n    if (state.pool && token &&\n        state.pool.token_1 !== token.id &&\n        state.pool.token_2 !== token.id) {\n      state.pool = null;\n    }\n  },\n\n  setToken2(token: TokenMetadata | null) {\n    state.token2 = token;\n\n    // Clear pool if tokens don't match\n    if (state.pool && token &&\n        state.pool.token_1 !== token.id &&\n        state.pool.token_2 !== token.id) {\n      state.pool = null;\n    }\n  },\n\n  setAmount1(amount: string) {\n    state.amount1 = amount;\n    state.token1Amount = amount; // Keep alias synchronized\n  },\n\n  setAmount2(amount: string) {\n    state.amount2 = amount;\n    state.token2Amount = amount; // Keep alias synchronized\n  },\n\n  // Backward compatibility aliases\n  setToken1Amount(amount: string) {\n    actions.setAmount1(amount);\n  },\n\n  setToken2Amount(amount: string) {\n    actions.setAmount2(amount);\n  },\n\n  setPool(pool: PoolInfo | null) {\n    state.pool = pool;\n    state.selectedPool = pool; // Keep alias synchronized\n  },\n\n  // Backward compatibility alias\n  setSelectedPool(pool: PoolInfo | null) {\n    actions.setPool(pool);\n  },\n\n  setUserLpBalance(balance: string) {\n    state.userLpBalance = balance;\n  },\n\n  swapTokens() {\n    const token1 = state.token1;\n    const token2 = state.token2;\n    const amount1 = state.amount1;\n    const amount2 = state.amount2;\n\n    state.token1 = token2;\n    state.token2 = token1;\n    state.amount1 = amount2;\n    state.amount2 = amount1;\n  },\n\n  clear() {\n    reset();\n  },\n\n  // Additional methods that components expect\n  setAddingLiquidity(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setRemovingLiquidity(loading: boolean) {\n    state.loading = loading;\n  },\n\n  getPosition(poolId: string): LiquidityPosition | null {\n    // This would typically fetch from API or cache\n    // For now, return null\n    console.warn(`getPosition(${poolId}) not implemented`);\n    return null;\n  },\n};\n\n// Getters\nconst getters = {\n  canAddLiquidity: () => {\n    return !!(\n      state.token1 &&\n      state.token2 &&\n      state.amount1 &&\n      state.amount2 &&\n      parseFloat(state.amount1) > 0 &&\n      parseFloat(state.amount2) > 0 &&\n      !state.loading\n    );\n  },\n\n  canRemoveLiquidity: () => {\n    return !!(\n      state.pool &&\n      state.userLpBalance &&\n      parseFloat(state.userLpBalance) > 0 &&\n      !state.loading\n    );\n  },\n\n  getPoolLiquidity: () => {\n    return state.pool?.total_liquidity || '0';\n  },\n\n  getPoolVolume24h: () => {\n    return state.pool?.volume_24h || '0';\n  },\n\n  getPoolFees24h: () => {\n    return state.pool?.fees_24h || '0';\n  },\n\n  getPoolAPR: () => {\n    return state.pool?.apr || '0';\n  },\n\n  isValidPair: () => {\n    return !!(\n      state.token1 &&\n      state.token2 &&\n      state.token1.id !== state.token2.id\n    );\n  },\n};\n\n// Store interface\nexport interface LiquidityStore extends BaseStore<LiquidityState> {\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  setToken1: (token: TokenMetadata | null) => void;\n  setToken2: (token: TokenMetadata | null) => void;\n  setAmount1: (amount: string) => void;\n  setAmount2: (amount: string) => void;\n  setToken1Amount: (amount: string) => void; // alias\n  setToken2Amount: (amount: string) => void; // alias\n  setPool: (pool: PoolInfo | null) => void;\n  setSelectedPool: (pool: PoolInfo | null) => void; // alias\n  setUserLpBalance: (balance: string) => void;\n  swapTokens: () => void;\n  clear: () => void;\n  setAddingLiquidity: (loading: boolean) => void;\n  setRemovingLiquidity: (loading: boolean) => void;\n  getPosition: (poolId: string) => LiquidityPosition | null;\n  canAddLiquidity: () => boolean;\n  canRemoveLiquidity: () => boolean;\n  getPoolLiquidity: () => string;\n  getPoolVolume24h: () => string;\n  getPoolFees24h: () => string;\n  getPoolAPR: () => string;\n  isValidPair: () => boolean;\n}\n\nexport const liquidityStore: LiquidityStore = {\n  state,\n  onChange,\n  reset,\n  dispose,\n  ...actions,\n  ...getters,\n};\n\nexport type { LiquidityState };\n"]}