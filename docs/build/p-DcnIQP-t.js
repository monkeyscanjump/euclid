import{D as n}from"./p-9CRWQAc1.js";import{l as o}from"./p-b11lwN92.js";async function t(o,t,e){const r={...n,...e};const i=new AbortController;const a=setTimeout((()=>i.abort()),r.apiTimeout);try{const n=await fetch(r.graphqlEndpoint,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({query:o,variables:t}),signal:i.signal});clearTimeout(a);if(!n.ok){throw new Error(`HTTP ${n.status}: ${n.statusText}`)}const e=await n.json();if(e.errors){throw new Error(`GraphQL errors: ${e.errors.map((n=>n.message)).join(", ")}`)}return e.data}catch(n){clearTimeout(a);const o=n instanceof Error?n.message:"Unknown error";throw new Error(`Pool query failed: ${o}`)}}async function e(n=true){const e=`\n    query Token_pair_with_liquidity($limit: Int, $onlyShowVerified: Boolean) {\n      pool {\n        token_pair_with_liquidity(limit: $limit, only_show_verified: $onlyShowVerified) {\n          results {\n            pair {\n              token_1\n              token_2\n            }\n            vlp\n            total_liquidity\n            apr\n            tags\n            created_at\n          }\n          pagination {\n            total_count\n            limit\n            offset\n          }\n        }\n      }\n    }\n  `;try{const o=await t(e,{onlyShowVerified:n});const r=o.pool.token_pair_with_liquidity.results.map((n=>({pool_id:n.vlp,token_1:n.pair.token_1,token_2:n.pair.token_2,total_liquidity:n.total_liquidity,volume_24h:"0",fees_24h:"0",apr:n.apr,id:n.vlp,token1:n.pair.token_1,token2:n.pair.token_2,tvl:n.total_liquidity,vlp:n.vlp,tags:n.tags,createdAt:n.created_at})));return{success:true,data:r}}catch(n){o.error("Utils","Error fetching pools:",n);return{success:false,error:n instanceof Error?n.message:"Unknown error"}}}async function r(n){const o=`\n    query Pool($poolId: String!) {\n      pool {\n        pool_by_id(pool_id: $poolId) {\n          pool_id\n          token_1\n          token_2\n          total_liquidity\n          volume_24h\n          volume_7d\n          fees_24h\n          apr\n          apy\n          tvl_change_24h\n          volume_change_24h\n          pool_address\n          dex\n          chain_uid\n          created_at\n          fee_rate\n          tags\n        }\n      }\n    }\n  `;const e=await t(o,{poolId:n});return e.pool.pool_by_id}export{e as getAllPoolsImpl,r as getPoolByIdImpl};
//# sourceMappingURL=p-DcnIQP-t.js.map