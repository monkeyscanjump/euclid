{"version":3,"file":"wallet-adapters.js","sourceRoot":"","sources":["../../src/utils/wallet-adapters.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Wallet Adapters for Euclid Protocol\n * Unified interface for different wallet providers\n */\n\nimport type { WalletAdapter } from './types/euclid-api.types';\nimport type { EuclidChainConfig, TransactionResponse } from './types/api.types';\n\n/**\n * MetaMask wallet adapter for EVM chains\n */\nexport class MetaMaskAdapter implements WalletAdapter {\n  type = 'metamask' as const;\n\n  isAvailable(): boolean {\n    return typeof window !== 'undefined' && Boolean(window.ethereum?.isMetaMask);\n  }\n\n  async connect(chainId?: string): Promise<{ address: string; chainId: string }> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not installed');\n    }\n\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }) as string[];\n\n      if (!accounts || accounts.length === 0) {\n        throw new Error('No accounts found');\n      }\n\n      // Get current chain ID\n      const currentChainId = await window.ethereum.request({\n        method: 'eth_chainId'\n      }) as string;\n\n      // Switch to requested chain if provided\n      if (chainId && chainId !== currentChainId) {\n        await this.switchChain(chainId);\n      }\n\n      return {\n        address: accounts[0],\n        chainId: chainId || currentChainId\n      };\n    } catch (error) {\n      throw new Error(`Failed to connect MetaMask: ${error.message}`);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    // MetaMask doesn't have a disconnect method, this is handled by the wallet\n    console.log('MetaMask disconnect requested');\n  }\n\n  async getBalance(address: string): Promise<string> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not available');\n    }\n\n    try {\n      const balance = await window.ethereum.request({\n        method: 'eth_getBalance',\n        params: [address, 'latest']\n      }) as string;\n\n      return balance;\n    } catch (error) {\n      throw new Error(`Failed to get balance: ${error.message}`);\n    }\n  }\n\n  async signAndBroadcast(transaction: TransactionResponse): Promise<string> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not available');\n    }\n\n    if (transaction.type !== 'evm') {\n      throw new Error('MetaMask can only handle EVM transactions');\n    }\n\n    try {\n      const txHash = await window.ethereum.request({\n        method: 'eth_sendTransaction',\n        params: transaction.msgs.map(msg => ({\n          from: transaction.sender.address,\n          to: msg.to,\n          data: msg.data,\n          value: msg.value,\n          gasLimit: msg.gasLimit\n        }))\n      }) as string;\n\n      return txHash;\n    } catch (error) {\n      throw new Error(`Failed to send transaction: ${error.message}`);\n    }\n  }\n\n  async switchChain(chainId: string): Promise<void> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not available');\n    }\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId }]\n      });\n    } catch (error) {\n      // Chain not added to MetaMask\n      if (error.code === 4902) {\n        throw new Error('Chain not added to MetaMask. Please add the chain first.');\n      }\n      throw new Error(`Failed to switch chain: ${error.message}`);\n    }\n  }\n\n  async addChain(config: EuclidChainConfig): Promise<void> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not available');\n    }\n\n    if (config.type !== 'EVM') {\n      throw new Error('MetaMask only supports EVM chains');\n    }\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_addEthereumChain',\n        params: [{\n          chainId: config.chain_id,\n          chainName: config.display_name,\n          nativeCurrency: {\n            name: 'ETH', // This should come from chain config\n            symbol: 'ETH',\n            decimals: 18\n          },\n          rpcUrls: [config.explorer_url], // This should be RPC URL\n          blockExplorerUrls: [config.explorer_url]\n        }]\n      });\n    } catch (error) {\n      throw new Error(`Failed to add chain: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Keplr wallet adapter for Cosmos chains\n */\nexport class KeplrAdapter implements WalletAdapter {\n  type = 'keplr' as const;\n\n  isAvailable(): boolean {\n    return typeof window !== 'undefined' && Boolean(window.keplr);\n  }\n\n  async connect(chainId?: string): Promise<{ address: string; chainId: string }> {\n    if (!this.isAvailable()) {\n      throw new Error('Keplr is not installed');\n    }\n\n    try {\n      const defaultChainId = chainId || 'cosmoshub-4';\n\n      // Enable the chain\n      await window.keplr.enable(defaultChainId);\n\n      // Get the offline signer\n      const offlineSigner = window.keplr.getOfflineSigner(defaultChainId) as {\n        getAccounts: () => Promise<Array<{ address: string }>>;\n      };\n      const accounts = await offlineSigner.getAccounts();\n\n      if (!accounts || accounts.length === 0) {\n        throw new Error('No accounts found');\n      }\n\n      return {\n        address: accounts[0].address,\n        chainId: defaultChainId\n      };\n    } catch (error) {\n      throw new Error(`Failed to connect Keplr: ${error.message}`);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    // Keplr doesn't have a disconnect method\n    console.log('Keplr disconnect requested');\n  }\n\n  async getBalance(_address: string): Promise<string> {\n    // This would require a Cosmos LCD client\n    throw new Error('Balance checking not implemented for Keplr');\n  }\n\n  async signAndBroadcast(transaction: TransactionResponse): Promise<string> {\n    if (!this.isAvailable()) {\n      throw new Error('Keplr is not available');\n    }\n\n    if (transaction.type !== 'cosmwasm') {\n      throw new Error('Keplr can only handle CosmWasm transactions');\n    }\n\n    try {\n      // This is a simplified implementation\n      // In reality, you'd need to use StargateClient or similar\n\n      // This would need proper Cosmos transaction building\n      throw new Error('CosmWasm transaction signing not fully implemented');\n    } catch (error) {\n      throw new Error(`Failed to send transaction: ${error.message}`);\n    }\n  }\n\n  async switchChain(chainId: string): Promise<void> {\n    if (!this.isAvailable()) {\n      throw new Error('Keplr is not available');\n    }\n\n    try {\n      await window.keplr.enable(chainId);\n    } catch (error) {\n      throw new Error(`Failed to switch to chain ${chainId}: ${error.message}`);\n    }\n  }\n\n  async addChain(config: EuclidChainConfig): Promise<void> {\n    if (!this.isAvailable()) {\n      throw new Error('Keplr is not available');\n    }\n\n    if (config.type !== 'Cosmwasm') {\n      throw new Error('Keplr only supports Cosmos chains');\n    }\n\n    try {\n      await window.keplr.experimentalSuggestChain({\n        chainId: config.chain_id,\n        chainName: config.display_name,\n        rpc: config.explorer_url, // This should be RPC URL\n        rest: config.explorer_url, // This should be REST URL\n        bip44: {\n          coinType: 118\n        },\n        bech32Config: {\n          bech32PrefixAccAddr: 'cosmos',\n          bech32PrefixAccPub: 'cosmospub',\n          bech32PrefixValAddr: 'cosmosvaloper',\n          bech32PrefixValPub: 'cosmosvaloperpub',\n          bech32PrefixConsAddr: 'cosmosvalcons',\n          bech32PrefixConsPub: 'cosmosvalconspub'\n        },\n        currencies: [{\n          coinDenom: 'ATOM',\n          coinMinimalDenom: 'uatom',\n          coinDecimals: 6\n        }],\n        feeCurrencies: [{\n          coinDenom: 'ATOM',\n          coinMinimalDenom: 'uatom',\n          coinDecimals: 6\n        }],\n        stakeCurrency: {\n          coinDenom: 'ATOM',\n          coinMinimalDenom: 'uatom',\n          coinDecimals: 6\n        }\n      });\n    } catch (error) {\n      throw new Error(`Failed to add chain: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Phantom wallet adapter for Solana chains\n */\nexport class PhantomAdapter implements WalletAdapter {\n  type = 'phantom' as const;\n\n  isAvailable(): boolean {\n    return typeof window !== 'undefined' && Boolean(window.solana?.isPhantom);\n  }\n\n  async connect(chainId?: string): Promise<{ address: string; chainId: string }> {\n    if (!this.isAvailable()) {\n      throw new Error('Phantom is not installed');\n    }\n\n    try {\n      const resp = await window.solana.connect();\n\n      return {\n        address: resp.publicKey.toString(),\n        chainId: chainId || 'mainnet-beta'\n      };\n    } catch (error) {\n      throw new Error(`Failed to connect Phantom: ${error.message}`);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.isAvailable()) {\n      await window.solana.disconnect();\n    }\n  }\n\n  async getBalance(_address: string): Promise<string> {\n    // This would require a Solana connection\n    throw new Error('Balance checking not implemented for Phantom');\n  }\n\n  async signAndBroadcast(_transaction: TransactionResponse): Promise<string> {\n    throw new Error('Solana transaction signing not implemented');\n  }\n\n  async switchChain(chainId: string): Promise<void> {\n    // Phantom doesn't support multiple chains\n    console.log(`Chain switching not supported by Phantom: ${chainId}`);\n  }\n\n  async addChain(_config: EuclidChainConfig): Promise<void> {\n    // Phantom doesn't support adding chains\n    throw new Error('Adding chains not supported by Phantom');\n  }\n}\n\n/**\n * Wallet adapter factory\n */\nexport class WalletAdapterFactory {\n  private adapters: Map<string, WalletAdapter> = new Map();\n\n  constructor() {\n    // Register available adapters\n    this.adapters.set('metamask', new MetaMaskAdapter());\n    this.adapters.set('keplr', new KeplrAdapter());\n    this.adapters.set('phantom', new PhantomAdapter());\n  }\n\n  getAdapter(type: 'metamask' | 'keplr' | 'phantom'): WalletAdapter {\n    const adapter = this.adapters.get(type);\n    if (!adapter) {\n      throw new Error(`Unsupported wallet type: ${type}`);\n    }\n    return adapter;\n  }\n\n  getAvailableAdapters(): WalletAdapter[] {\n    return Array.from(this.adapters.values()).filter(adapter => adapter.isAvailable());\n  }\n\n  getAvailableWalletTypes(): ('metamask' | 'keplr' | 'phantom')[] {\n    return this.getAvailableAdapters().map(adapter => adapter.type);\n  }\n}\n\n// Export default factory instance\nexport const walletAdapterFactory = new WalletAdapterFactory();\n"]}