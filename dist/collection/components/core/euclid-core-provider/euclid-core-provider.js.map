{"version":3,"file":"euclid-core-provider.js","sourceRoot":"","sources":["../../../../src/components/core/euclid-core-provider/euclid-core-provider.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, State, Listen } from '@stencil/core';\nimport { walletStore } from '../../../store/wallet.store';\nimport { appStore } from '../../../store/app.store';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\n\n@Component({\n  tag: 'euclid-core-provider',\n  styleUrl: 'euclid-core-provider.css',\n  shadow: true,\n})\nexport class EuclidCoreProvider {\n  @State() isInitialized = false;\n\n  async componentDidLoad() {\n    await this.initialize();\n  }\n\n  private async initialize() {\n    console.log('ðŸŒŒ Initializing Euclid Protocol Core Provider...');\n\n    // Initialize app store\n    appStore.initialize();\n\n    // Initialize wallet store\n    walletStore.initialize();\n\n    // Load initial market data\n    await this.loadInitialMarketData();\n\n    this.isInitialized = true;\n    console.log('âœ… Euclid Protocol Core Provider initialized successfully');\n  }\n\n  private async loadInitialMarketData() {\n    console.log('ðŸ“Š Delegating initial market data loading to Market Data Controller...');\n\n    // Delegate to market data controller via events\n    dispatchEuclidEvent(EUCLID_EVENTS.MARKET.LOAD_INITIAL);\n  }\n\n  @Listen(EUCLID_EVENTS.WALLET.CONNECT_SUCCESS, { target: 'window' })\n  handleWalletConnect(event: CustomEvent) {\n    console.log('ðŸ”— Wallet connection event received:', event.detail);\n    // Handle wallet connection logic here\n  }\n\n  @Listen(EUCLID_EVENTS.WALLET.DISCONNECT_SUCCESS, { target: 'window' })\n  handleWalletDisconnect(event: CustomEvent) {\n    console.log('ðŸ”Œ Wallet disconnection event received:', event.detail);\n    // Handle wallet disconnection logic here\n  }\n\n  render() {\n    return (\n      <Host>\n        {!this.isInitialized && (\n          <div class=\"euclid-loading\">\n            <div class=\"loading-spinner\"></div>\n            <p>Initializing Euclid Protocol...</p>\n          </div>\n        )}\n\n        {/* Core controllers - these manage data and state */}\n        <euclid-wallet-controller />\n        <euclid-market-data-controller />\n        <euclid-user-data-controller />\n\n        {/* Feature controllers - these handle business logic */}\n        <euclid-swap-controller />\n        <euclid-liquidity-controller />\n        <euclid-tx-tracker-controller />\n\n        {/* Global modal - controlled by appStore */}\n        <euclid-modal />\n\n        {/* Slot for application content */}\n        <div class=\"euclid-provider-content\">\n          <slot></slot>\n        </div>\n      </Host>\n    );\n  }\n\n  private handleWalletConnectFromModal = (event: CustomEvent) => {\n    const { provider, chainId } = event.detail;\n    console.log('ðŸ”— Wallet connection request from modal:', provider.type, chainId);\n\n    // Dispatch wallet connection request\n    dispatchEuclidEvent(EUCLID_EVENTS.WALLET.CONNECT_REQUEST, {\n      chainUID: chainId || 'ethereum',\n      walletType: provider.type\n    });\n\n    appStore.closeWalletModal();\n  };\n\n  private handleTokenSelectFromModal = (event: CustomEvent) => {\n    const { token } = event.detail;\n    console.log('ðŸª™ Token selection from modal:', token.symbol);\n\n    // Emit token selection for consuming components\n    dispatchEuclidEvent(EUCLID_EVENTS.UI.TOKEN_SELECTED, {\n      tokenId: token.id,\n      data: token\n    });\n\n    appStore.closeTokenModal();\n  };\n}\n"]}