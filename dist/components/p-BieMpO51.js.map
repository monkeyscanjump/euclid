{"file":"p-BieMpO51.js","mappings":"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","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/core/euclid-wallet-controller/euclid-wallet-controller.tsx"],"sourcesContent":["import { Component, h, State, Listen } from '@stencil/core';\nimport { walletStore } from '../../../store/wallet.store';\nimport { marketStore } from '../../../store/market.store';\nimport { WalletAdapterFactory } from '../../../utils/wallet-adapter';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\n\n@Component({\n  tag: 'euclid-wallet-controller',\n})\nexport class EuclidWalletController {\n  @State() isInitialized = false;\n\n  async componentDidLoad() {\n    await this.initialize();\n  }\n\n  private async initialize() {\n    console.log('🔗 Initializing Wallet Controller...');\n\n    // Check for available wallets on page load\n    await this.detectAvailableWallets();\n\n    // Set up wallet event listeners\n    this.setupWalletEventListeners();\n\n    this.isInitialized = true;\n    console.log('✅ Wallet Controller initialized');\n  }\n\n  private async detectAvailableWallets() {\n    const availableWallets = [];\n\n    // Check for Keplr (Cosmos wallets)\n    if (window.keplr) {\n      availableWallets.push('keplr');\n    }\n\n    // Check for MetaMask (EVM wallets)\n    if (window.ethereum?.isMetaMask) {\n      availableWallets.push('metamask');\n    }\n\n    // Check for Cosmostation\n    if (window.cosmostation) {\n      availableWallets.push('cosmostation');\n    }\n\n    console.log('🔍 Available wallets detected:', availableWallets);\n    return availableWallets;\n  }\n\n  private setupWalletEventListeners() {\n    // Listen for MetaMask account changes\n    if (window.ethereum) {\n      // MetaMask's ethereum object has event emitter methods not defined in our interface\n      const ethProvider = window.ethereum as typeof window.ethereum & {\n        on?: (event: string, callback: (...args: unknown[]) => void) => void;\n      };\n\n      if (ethProvider.on) {\n        ethProvider.on('accountsChanged', (accounts: string[]) => {\n          console.log('MetaMask accounts changed:', accounts);\n          this.handleEvmAccountChange(accounts);\n        });\n\n        ethProvider.on('chainChanged', (chainId: string) => {\n          console.log('MetaMask chain changed:', chainId);\n          this.handleEvmChainChange(chainId);\n        });\n      }\n    }\n\n    // Listen for Keplr events\n    window.addEventListener('keplr_keystorechange', () => {\n      console.log('Keplr keystore changed');\n      this.handleKeplrKeystoreChange();\n    });\n  }\n\n  private async handleEvmAccountChange(accounts: string[]) {\n    if (accounts.length === 0) {\n      // User disconnected\n      this.disconnectEvmWallets();\n    } else {\n      // Update connected EVM accounts\n      // TODO: Update all EVM chain wallets with new account\n    }\n  }\n\n  private handleEvmChainChange(chainId: string) {\n    // Handle EVM chain changes\n    console.log('Chain changed to:', chainId);\n    // TODO: Update wallet store with new chain info\n  }\n\n  private handleKeplrKeystoreChange() {\n    // Handle Keplr keystore changes (account switches, etc.)\n    // TODO: Update all Cosmos chain wallets\n  }\n\n  private disconnectEvmWallets() {\n    // Disconnect all EVM wallets\n    const evmChains = ['ethereum', 'bsc', 'polygon', 'arbitrum', 'base', 'manta', 'sepolia'];\n    evmChains.forEach(chainUID => {\n      walletStore.removeWallet(chainUID);\n    });\n  }\n\n  @Listen(EUCLID_EVENTS.WALLET.CONNECT_REQUEST, { target: 'window' })\n  async handleWalletConnectionRequest(event: CustomEvent<{ chainUID: string; walletType: string }>) {\n    const { chainUID, walletType } = event.detail;\n    console.log('🔗 Wallet connection requested:', { chainUID, walletType });\n\n    try {\n      await this.connectWallet(chainUID, walletType);\n    } catch (error) {\n      console.error('Failed to connect wallet:', error);\n      // Emit connection failure event\n      dispatchEuclidEvent(EUCLID_EVENTS.WALLET.CONNECT_FAILED, {\n        chainUID,\n        walletType,\n        error: error.message\n      });\n    }\n  }\n\n  @Listen(EUCLID_EVENTS.WALLET.DISCONNECT_REQUEST, { target: 'window' })\n  handleWalletDisconnectionRequest(event: CustomEvent<{ chainUID: string }>) {\n    const { chainUID } = event.detail;\n    console.log('🔌 Wallet disconnection requested:', chainUID);\n\n    walletStore.disconnectWallet(chainUID);\n\n    // Emit disconnection success event\n    dispatchEuclidEvent(EUCLID_EVENTS.WALLET.DISCONNECT_SUCCESS, { chainUID });\n  }\n\n  private async connectWallet(chainUID: string, walletType: string) {\n    // Get chain configuration\n    const chainConfig = marketStore.getChain(chainUID);\n    if (!chainConfig) {\n      throw new Error(`Chain configuration not found for ${chainUID}`);\n    }\n\n    // Validate wallet type\n    const validWalletTypes = ['keplr', 'metamask', 'cosmostation', 'walletconnect'];\n    if (!validWalletTypes.includes(walletType)) {\n      throw new Error(`Unsupported wallet type: ${walletType}`);\n    }\n\n    // Use the wallet adapter factory for proper separation of concerns\n    const result = await WalletAdapterFactory.connectWallet(walletType as 'keplr' | 'metamask' | 'cosmostation' | 'walletconnect', chainConfig);\n\n    if (result.success && result.address) {\n      // Add wallet to store\n      walletStore.addWallet(chainUID, {\n        address: result.address,\n        name: walletType,\n        walletType: walletType as 'keplr' | 'metamask' | 'phantom',\n        type: walletType as 'keplr' | 'metamask' | 'phantom', // legacy alias\n        isConnected: true,\n        balances: []\n      });\n\n      // Emit connection success event\n      dispatchEuclidEvent(EUCLID_EVENTS.WALLET.CONNECT_SUCCESS, {\n        chainUID,\n        walletType,\n        address: result.address\n      });\n    } else {\n      throw new Error(result.error || 'Failed to connect wallet');\n    }\n  }\n\n  render() {\n    // This is a headless controller - no visual output\n    return null;\n  }\n}\n"],"version":3}