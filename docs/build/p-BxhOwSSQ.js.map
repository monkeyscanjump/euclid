{"version":3,"file":"p-BxhOwSSQ.js","sources":["src/utils/wallet-adapters.ts","src/utils/storage/indexdb-storage.ts","src/store/wallet.store.ts","src/store/app.store.ts","src/store/swap.store.ts","src/store/liquidity.store.ts","src/utils/env.ts","src/utils/graphql-client.ts","src/utils/rest-client.ts","src/utils/api-client.ts","src/utils/constants.ts"],"sourcesContent":["/**\n * Wallet Adapters for Euclid Protocol\n * Unified interface for different wallet providers\n */\n\nimport type { WalletAdapter } from './types/euclid-api.types';\nimport type { EuclidChainConfig, TransactionResponse } from './types/api.types';\n\n/**\n * MetaMask wallet adapter for EVM chains\n */\nexport class MetaMaskAdapter implements WalletAdapter {\n  type = 'metamask' as const;\n\n  isAvailable(): boolean {\n    return typeof window !== 'undefined' && Boolean(window.ethereum?.isMetaMask);\n  }\n\n  async connect(chainId?: string): Promise<{ address: string; chainId: string }> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not installed');\n    }\n\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }) as string[];\n\n      if (!accounts || accounts.length === 0) {\n        throw new Error('No accounts found');\n      }\n\n      // Get current chain ID\n      const currentChainId = await window.ethereum.request({\n        method: 'eth_chainId'\n      }) as string;\n\n      // Switch to requested chain if provided\n      if (chainId && chainId !== currentChainId) {\n        await this.switchChain(chainId);\n      }\n\n      return {\n        address: accounts[0],\n        chainId: chainId || currentChainId\n      };\n    } catch (error) {\n      throw new Error(`Failed to connect MetaMask: ${error.message}`);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    // MetaMask doesn't have a disconnect method, this is handled by the wallet\n    console.log('MetaMask disconnect requested');\n  }\n\n  async getBalance(address: string): Promise<string> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not available');\n    }\n\n    try {\n      const balance = await window.ethereum.request({\n        method: 'eth_getBalance',\n        params: [address, 'latest']\n      }) as string;\n\n      return balance;\n    } catch (error) {\n      throw new Error(`Failed to get balance: ${error.message}`);\n    }\n  }\n\n  async signAndBroadcast(transaction: TransactionResponse): Promise<string> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not available');\n    }\n\n    if (transaction.type !== 'evm') {\n      throw new Error('MetaMask can only handle EVM transactions');\n    }\n\n    try {\n      const txHash = await window.ethereum.request({\n        method: 'eth_sendTransaction',\n        params: transaction.msgs.map(msg => ({\n          from: transaction.sender.address,\n          to: msg.to,\n          data: msg.data,\n          value: msg.value,\n          gasLimit: msg.gasLimit\n        }))\n      }) as string;\n\n      return txHash;\n    } catch (error) {\n      throw new Error(`Failed to send transaction: ${error.message}`);\n    }\n  }\n\n  async switchChain(chainId: string): Promise<void> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not available');\n    }\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId }]\n      });\n    } catch (error) {\n      // Chain not added to MetaMask\n      if (error.code === 4902) {\n        throw new Error('Chain not added to MetaMask. Please add the chain first.');\n      }\n      throw new Error(`Failed to switch chain: ${error.message}`);\n    }\n  }\n\n  async addChain(config: EuclidChainConfig): Promise<void> {\n    if (!this.isAvailable()) {\n      throw new Error('MetaMask is not available');\n    }\n\n    if (config.type !== 'EVM') {\n      throw new Error('MetaMask only supports EVM chains');\n    }\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_addEthereumChain',\n        params: [{\n          chainId: config.chain_id,\n          chainName: config.display_name,\n          nativeCurrency: {\n            name: 'ETH', // This should come from chain config\n            symbol: 'ETH',\n            decimals: 18\n          },\n          rpcUrls: [config.explorer_url], // This should be RPC URL\n          blockExplorerUrls: [config.explorer_url]\n        }]\n      });\n    } catch (error) {\n      throw new Error(`Failed to add chain: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Keplr wallet adapter for Cosmos chains\n */\nexport class KeplrAdapter implements WalletAdapter {\n  type = 'keplr' as const;\n\n  isAvailable(): boolean {\n    return typeof window !== 'undefined' && Boolean(window.keplr);\n  }\n\n  async connect(chainId?: string): Promise<{ address: string; chainId: string }> {\n    if (!this.isAvailable()) {\n      throw new Error('Keplr is not installed');\n    }\n\n    try {\n      const defaultChainId = chainId || 'cosmoshub-4';\n\n      // Enable the chain\n      await window.keplr.enable(defaultChainId);\n\n      // Get the offline signer\n      const offlineSigner = window.keplr.getOfflineSigner(defaultChainId) as {\n        getAccounts: () => Promise<Array<{ address: string }>>;\n      };\n      const accounts = await offlineSigner.getAccounts();\n\n      if (!accounts || accounts.length === 0) {\n        throw new Error('No accounts found');\n      }\n\n      return {\n        address: accounts[0].address,\n        chainId: defaultChainId\n      };\n    } catch (error) {\n      throw new Error(`Failed to connect Keplr: ${error.message}`);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    // Keplr doesn't have a disconnect method\n    console.log('Keplr disconnect requested');\n  }\n\n  async getBalance(_address: string): Promise<string> {\n    // This would require a Cosmos LCD client\n    throw new Error('Balance checking not implemented for Keplr');\n  }\n\n  async signAndBroadcast(transaction: TransactionResponse): Promise<string> {\n    if (!this.isAvailable()) {\n      throw new Error('Keplr is not available');\n    }\n\n    if (transaction.type !== 'cosmwasm') {\n      throw new Error('Keplr can only handle CosmWasm transactions');\n    }\n\n    try {\n      // This is a simplified implementation\n      // In reality, you'd need to use StargateClient or similar\n\n      // This would need proper Cosmos transaction building\n      throw new Error('CosmWasm transaction signing not fully implemented');\n    } catch (error) {\n      throw new Error(`Failed to send transaction: ${error.message}`);\n    }\n  }\n\n  async switchChain(chainId: string): Promise<void> {\n    if (!this.isAvailable()) {\n      throw new Error('Keplr is not available');\n    }\n\n    try {\n      await window.keplr.enable(chainId);\n    } catch (error) {\n      throw new Error(`Failed to switch to chain ${chainId}: ${error.message}`);\n    }\n  }\n\n  async addChain(config: EuclidChainConfig): Promise<void> {\n    if (!this.isAvailable()) {\n      throw new Error('Keplr is not available');\n    }\n\n    if (config.type !== 'Cosmwasm') {\n      throw new Error('Keplr only supports Cosmos chains');\n    }\n\n    try {\n      await window.keplr.experimentalSuggestChain({\n        chainId: config.chain_id,\n        chainName: config.display_name,\n        rpc: config.explorer_url, // This should be RPC URL\n        rest: config.explorer_url, // This should be REST URL\n        bip44: {\n          coinType: 118\n        },\n        bech32Config: {\n          bech32PrefixAccAddr: 'cosmos',\n          bech32PrefixAccPub: 'cosmospub',\n          bech32PrefixValAddr: 'cosmosvaloper',\n          bech32PrefixValPub: 'cosmosvaloperpub',\n          bech32PrefixConsAddr: 'cosmosvalcons',\n          bech32PrefixConsPub: 'cosmosvalconspub'\n        },\n        currencies: [{\n          coinDenom: 'ATOM',\n          coinMinimalDenom: 'uatom',\n          coinDecimals: 6\n        }],\n        feeCurrencies: [{\n          coinDenom: 'ATOM',\n          coinMinimalDenom: 'uatom',\n          coinDecimals: 6\n        }],\n        stakeCurrency: {\n          coinDenom: 'ATOM',\n          coinMinimalDenom: 'uatom',\n          coinDecimals: 6\n        }\n      });\n    } catch (error) {\n      throw new Error(`Failed to add chain: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Phantom wallet adapter for Solana chains\n */\nexport class PhantomAdapter implements WalletAdapter {\n  type = 'phantom' as const;\n\n  isAvailable(): boolean {\n    return typeof window !== 'undefined' && Boolean(window.solana?.isPhantom);\n  }\n\n  async connect(chainId?: string): Promise<{ address: string; chainId: string }> {\n    if (!this.isAvailable()) {\n      throw new Error('Phantom is not installed');\n    }\n\n    try {\n      const resp = await window.solana.connect();\n\n      return {\n        address: resp.publicKey.toString(),\n        chainId: chainId || 'mainnet-beta'\n      };\n    } catch (error) {\n      throw new Error(`Failed to connect Phantom: ${error.message}`);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.isAvailable()) {\n      await window.solana.disconnect();\n    }\n  }\n\n  async getBalance(_address: string): Promise<string> {\n    // This would require a Solana connection\n    throw new Error('Balance checking not implemented for Phantom');\n  }\n\n  async signAndBroadcast(_transaction: TransactionResponse): Promise<string> {\n    throw new Error('Solana transaction signing not implemented');\n  }\n\n  async switchChain(chainId: string): Promise<void> {\n    // Phantom doesn't support multiple chains\n    console.log(`Chain switching not supported by Phantom: ${chainId}`);\n  }\n\n  async addChain(_config: EuclidChainConfig): Promise<void> {\n    // Phantom doesn't support adding chains\n    throw new Error('Adding chains not supported by Phantom');\n  }\n}\n\n/**\n * Wallet adapter factory\n */\nexport class WalletAdapterFactory {\n  private adapters: Map<string, WalletAdapter> = new Map();\n\n  constructor() {\n    // Register available adapters\n    this.adapters.set('metamask', new MetaMaskAdapter());\n    this.adapters.set('keplr', new KeplrAdapter());\n    this.adapters.set('phantom', new PhantomAdapter());\n  }\n\n  getAdapter(type: 'metamask' | 'keplr' | 'phantom'): WalletAdapter {\n    const adapter = this.adapters.get(type);\n    if (!adapter) {\n      throw new Error(`Unsupported wallet type: ${type}`);\n    }\n    return adapter;\n  }\n\n  getAvailableAdapters(): WalletAdapter[] {\n    return Array.from(this.adapters.values()).filter(adapter => adapter.isAvailable());\n  }\n\n  getAvailableWalletTypes(): ('metamask' | 'keplr' | 'phantom')[] {\n    return this.getAvailableAdapters().map(adapter => adapter.type);\n  }\n}\n\n// Export default factory instance\nexport const walletAdapterFactory = new WalletAdapterFactory();\n","/**\n * Secure IndexedDB Storage Utility\n * Provides encrypted storage for sensitive wallet and user data\n */\n\nexport interface StorageOptions {\n  encrypt?: boolean;\n  version?: number;\n  onUpgrade?: (oldVersion: number, newVersion: number, db: IDBDatabase) => void;\n}\n\nexport interface StorageItem {\n  key: string;\n  value: unknown;\n  timestamp: number;\n  encrypted?: boolean;\n}\n\ninterface EncryptedValue {\n  data: number[];\n  iv: number[];\n}\n\nexport class IndexedDBStorage {\n  private dbName: string;\n  private version: number;\n  private db: IDBDatabase | null = null;\n  private cryptoKey: CryptoKey | null = null;\n  private initPromise: Promise<void> | null = null;\n\n  constructor(dbName: string = 'euclid-storage', options: StorageOptions = {}) {\n    this.dbName = dbName;\n    this.version = options.version || 1;\n  }\n\n  /**\n   * Initialize the database and encryption key\n   */\n  async init(): Promise<void> {\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n\n    this.initPromise = this._init();\n    return this.initPromise;\n  }\n\n  private async _init(): Promise<void> {\n    await Promise.all([\n      this.initDatabase(),\n      this.initCrypto()\n    ]);\n  }\n\n  private async initDatabase(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n\n      request.onerror = () => {\n        reject(new Error(`Failed to open database: ${request.error?.message}`));\n      };\n\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // Create object stores if they don't exist\n        const storeNames = ['wallet-data', 'user-preferences', 'app-state', 'cache'];\n\n        for (const storeName of storeNames) {\n          if (!db.objectStoreNames.contains(storeName)) {\n            const store = db.createObjectStore(storeName, { keyPath: 'key' });\n            store.createIndex('timestamp', 'timestamp', { unique: false });\n          }\n        }\n      };\n    });\n  }\n\n  private async initCrypto(): Promise<void> {\n    if (!window.crypto?.subtle) {\n      console.warn('Web Crypto API not available - storage will not be encrypted');\n      return;\n    }\n\n    try {\n      // Check if we have a stored key\n      const keyData = await this.getStoredCryptoKey();\n\n      if (!keyData) {\n        // Generate new key\n        this.cryptoKey = await window.crypto.subtle.generateKey(\n          {\n            name: 'AES-GCM',\n            length: 256,\n          },\n          true, // extractable\n          ['encrypt', 'decrypt']\n        );\n\n        // Store the key\n        await this.storeCryptoKey(this.cryptoKey);\n      } else {\n        // Import stored key\n        this.cryptoKey = await window.crypto.subtle.importKey(\n          'jwk',\n          keyData,\n          { name: 'AES-GCM' },\n          true,\n          ['encrypt', 'decrypt']\n        );\n      }\n    } catch (error) {\n      console.warn('Failed to initialize encryption:', error);\n    }\n  }\n\n  private async getStoredCryptoKey(): Promise<JsonWebKey | null> {\n    try {\n      const stored = localStorage.getItem('euclid-crypto-key');\n      return stored ? JSON.parse(stored) : null;\n    } catch {\n      return null;\n    }\n  }\n\n  private async storeCryptoKey(key: CryptoKey): Promise<void> {\n    try {\n      const keyData = await window.crypto.subtle.exportKey('jwk', key);\n      localStorage.setItem('euclid-crypto-key', JSON.stringify(keyData));\n    } catch (error) {\n      console.warn('Failed to store crypto key:', error);\n    }\n  }\n\n  private async encrypt(data: unknown): Promise<{ encrypted: ArrayBuffer; iv: Uint8Array }> {\n    if (!this.cryptoKey || !window.crypto?.subtle) {\n      throw new Error('Encryption not available');\n    }\n\n    const iv = window.crypto.getRandomValues(new Uint8Array(12));\n    const encodedData = new TextEncoder().encode(JSON.stringify(data));\n\n    const encrypted = await window.crypto.subtle.encrypt(\n      { name: 'AES-GCM', iv: iv.buffer as ArrayBuffer },\n      this.cryptoKey,\n      encodedData\n    );\n\n    return { encrypted, iv };\n  }\n\n  private async decrypt(encrypted: ArrayBuffer, iv: Uint8Array): Promise<unknown> {\n    if (!this.cryptoKey || !window.crypto?.subtle) {\n      throw new Error('Decryption not available');\n    }\n\n    const decrypted = await window.crypto.subtle.decrypt(\n      { name: 'AES-GCM', iv: iv.buffer as ArrayBuffer },\n      this.cryptoKey,\n      encrypted\n    );\n\n    const decodedData = new TextDecoder().decode(decrypted);\n    return JSON.parse(decodedData);\n  }\n\n  /**\n   * Store data securely\n   */\n  async setItem<T>(\n    store: 'wallet-data' | 'user-preferences' | 'app-state' | 'cache',\n    key: string,\n    value: T,\n    options: { encrypt?: boolean } = {}\n  ): Promise<void> {\n    await this.init();\n\n    if (!this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const shouldEncrypt = options.encrypt !== false && store === 'wallet-data';\n    let finalValue: unknown = value;\n    let encrypted = false;\n\n    if (shouldEncrypt && this.cryptoKey) {\n      try {\n        const { encrypted: encryptedData, iv } = await this.encrypt(value);\n        finalValue = {\n          data: Array.from(new Uint8Array(encryptedData)),\n          iv: Array.from(iv)\n        };\n        encrypted = true;\n      } catch (error) {\n        console.warn('Encryption failed, storing unencrypted:', error);\n      }\n    }\n\n    const item: StorageItem = {\n      key,\n      value: finalValue,\n      timestamp: Date.now(),\n      encrypted\n    };\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([store], 'readwrite');\n      const objectStore = transaction.objectStore(store);\n      const request = objectStore.put(item);\n\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(new Error(`Failed to store item: ${request.error?.message}`));\n    });\n  }\n\n  /**\n   * Retrieve data securely\n   */\n  async getItem<T>(\n    store: 'wallet-data' | 'user-preferences' | 'app-state' | 'cache',\n    key: string\n  ): Promise<T | null> {\n    await this.init();\n\n    if (!this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([store], 'readonly');\n      const objectStore = transaction.objectStore(store);\n      const request = objectStore.get(key);\n\n      request.onsuccess = async () => {\n        const item = request.result as StorageItem;\n        if (!item) {\n          resolve(null);\n          return;\n        }\n\n        if (item.encrypted && this.cryptoKey) {\n          try {\n            const encryptedValue = item.value as EncryptedValue;\n            const encryptedData = new Uint8Array(encryptedValue.data);\n            const iv = new Uint8Array(encryptedValue.iv);\n            const decryptedValue = await this.decrypt(encryptedData.buffer, iv);\n            resolve(decryptedValue as T);\n          } catch (error) {\n            console.error('Decryption failed:', error);\n            resolve(null);\n          }\n        } else {\n          resolve(item.value as T);\n        }\n      };\n\n      request.onerror = () => reject(new Error(`Failed to retrieve item: ${request.error?.message}`));\n    });\n  }\n\n  /**\n   * Remove an item\n   */\n  async removeItem(\n    store: 'wallet-data' | 'user-preferences' | 'app-state' | 'cache',\n    key: string\n  ): Promise<void> {\n    await this.init();\n\n    if (!this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([store], 'readwrite');\n      const objectStore = transaction.objectStore(store);\n      const request = objectStore.delete(key);\n\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(new Error(`Failed to remove item: ${request.error?.message}`));\n    });\n  }\n\n  /**\n   * Clear all data from a store\n   */\n  async clear(store: 'wallet-data' | 'user-preferences' | 'app-state' | 'cache'): Promise<void> {\n    await this.init();\n\n    if (!this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([store], 'readwrite');\n      const objectStore = transaction.objectStore(store);\n      const request = objectStore.clear();\n\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(new Error(`Failed to clear store: ${request.error?.message}`));\n    });\n  }\n\n  /**\n   * Get all keys from a store\n   */\n  async getAllKeys(store: 'wallet-data' | 'user-preferences' | 'app-state' | 'cache'): Promise<string[]> {\n    await this.init();\n\n    if (!this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([store], 'readonly');\n      const objectStore = transaction.objectStore(store);\n      const request = objectStore.getAllKeys();\n\n      request.onsuccess = () => resolve(request.result as string[]);\n      request.onerror = () => reject(new Error(`Failed to get keys: ${request.error?.message}`));\n    });\n  }\n\n  /**\n   * Clean up old cache entries\n   */\n  async cleanupCache(maxAge: number = 24 * 60 * 60 * 1000): Promise<void> {\n    await this.init();\n\n    if (!this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const cutoff = Date.now() - maxAge;\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['cache'], 'readwrite');\n      const objectStore = transaction.objectStore('cache');\n      const index = objectStore.index('timestamp');\n      const request = index.openCursor(IDBKeyRange.upperBound(cutoff));\n\n      request.onsuccess = (event) => {\n        const cursor = (event.target as IDBRequest).result;\n        if (cursor) {\n          cursor.delete();\n          cursor.continue();\n        } else {\n          resolve();\n        }\n      };\n\n      request.onerror = () => reject(new Error(`Failed to cleanup cache: ${request.error?.message}`));\n    });\n  }\n\n  /**\n   * Close database connection\n   */\n  close(): void {\n    if (this.db) {\n      this.db.close();\n      this.db = null;\n    }\n    this.initPromise = null;\n  }\n}\n\n// Global storage instance\nexport const secureStorage = new IndexedDBStorage();\n\nimport type { WalletInfo } from '../types/euclid-api.types';\n\n// Convenience functions for common operations\nexport const walletStorage = {\n  async setConnectedWallets(wallets: Map<string, WalletInfo>): Promise<void> {\n    const walletsObject = Object.fromEntries(wallets);\n    return secureStorage.setItem('wallet-data', 'connected-wallets', walletsObject, { encrypt: true });\n  },\n\n  async getConnectedWallets(): Promise<Map<string, WalletInfo>> {\n    const walletsObject = await secureStorage.getItem<Record<string, WalletInfo>>('wallet-data', 'connected-wallets');\n    return walletsObject ? new Map(Object.entries(walletsObject)) : new Map();\n  },\n\n  async setAddressBook(addresses: unknown[]): Promise<void> {\n    return secureStorage.setItem('wallet-data', 'address-book', addresses, { encrypt: true });\n  },\n\n  async getAddressBook(): Promise<unknown[]> {\n    return (await secureStorage.getItem<unknown[]>('wallet-data', 'address-book')) || [];\n  },\n\n  async clearWalletData(): Promise<void> {\n    return secureStorage.clear('wallet-data');\n  }\n};\n\n// Migrate from localStorage if exists\nexport async function migrateFromLocalStorage(): Promise<void> {\n  const keysToMigrate = [\n    { old: 'euclid-address-book', new: 'address-book', store: 'wallet-data' as const },\n    // Add more migration mappings as needed\n  ];\n\n  for (const migration of keysToMigrate) {\n    try {\n      const oldData = localStorage.getItem(migration.old);\n      if (oldData) {\n        const parsedData = JSON.parse(oldData);\n        await secureStorage.setItem(migration.store, migration.new, parsedData);\n        localStorage.removeItem(migration.old);\n        console.log(`Migrated ${migration.old} to IndexedDB`);\n      }\n    } catch (error) {\n      console.warn(`Failed to migrate ${migration.old}:`, error);\n    }\n  }\n}\n","import { createStore } from '@stencil/store';\nimport type { WalletState, WalletInfo } from '../utils/types/euclid-api.types';\nimport type { UserBalance } from '../utils/types/api.types';\nimport type { BaseStore } from './types';\nimport { walletAdapterFactory } from '../utils/wallet-adapters';\nimport { walletStorage, migrateFromLocalStorage } from '../utils/storage/indexdb-storage';\nimport { wrapStoreWithSmartUpdates } from '../utils/store-update-coordinator';\n\n// Extended wallet state to support multiple wallets\ninterface ExtendedWalletState extends WalletState, Record<string, unknown> {\n  connectedWallets: Map<string, WalletInfo>; // chainUID -> WalletInfo\n  wallets: Map<string, WalletInfo>; // alias for backward compatibility\n}\n\nconst initialState: ExtendedWalletState = {\n  isConnected: false,\n  address: null,\n  chainId: null,\n  chainUID: null,\n  walletType: null,\n  balances: [],\n  loading: false,\n  error: null,\n  connectedWallets: new Map(),\n  wallets: new Map(), // alias for backward compatibility\n};\n\nconst { state, onChange, reset, dispose } = createStore(initialState);\n\n// Wrap store with smart updates\nconst smartStore = wrapStoreWithSmartUpdates(\n  { state, onChange },\n  'wallet-store',\n  {\n    debounceMs: 100,\n    deepCompare: true,\n    skipFields: ['loading', 'error']\n  }\n);\n\n// Actions with IndexedDB persistence\nconst actions = {\n  setLoading(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setError(error: string | null) {\n    state.error = error;\n  },\n\n  async initialize() {\n    // Migrate from localStorage if needed\n    await migrateFromLocalStorage();\n\n    // Load persisted wallet connections\n    try {\n      const savedWallets = await walletStorage.getConnectedWallets();\n      if (savedWallets.size > 0) {\n        smartStore.smartUpdate({\n          connectedWallets: savedWallets,\n          wallets: savedWallets, // Keep alias synchronized\n        });\n\n        // Set primary wallet state from first connected wallet\n        const firstWallet = Array.from(savedWallets.values())[0];\n        if (firstWallet) {\n          smartStore.smartUpdate({\n            isConnected: true,\n            address: firstWallet.address,\n            chainUID: firstWallet.chainUID,\n            walletType: firstWallet.walletType,\n            balances: [...firstWallet.balances],\n          });\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to load persisted wallets:', error);\n    }\n\n    console.log('Wallet store initialized');\n  },\n\n  async connectWallet(walletType: 'metamask' | 'keplr' | 'phantom', chainId?: string) {\n    state.loading = true;\n    state.error = null;\n\n    try {\n      const adapter = walletAdapterFactory.getAdapter(walletType);\n\n      if (!adapter.isAvailable()) {\n        throw new Error(`${walletType} wallet is not installed`);\n      }\n\n      const connection = await adapter.connect(chainId);\n\n      state.isConnected = true;\n      state.address = connection.address;\n      state.chainId = connection.chainId;\n      state.chainUID = connection.chainId; // For now, using chainId as chainUID\n      state.walletType = walletType;\n      state.error = null;\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Failed to connect wallet';\n    } finally {\n      state.loading = false;\n    }\n  },\n\n  async disconnectWallet(chainUID?: string) {\n    if (chainUID) {\n      // Disconnect specific wallet\n      actions.removeWallet(chainUID);\n    } else {\n      // Disconnect all wallets\n      if (state.walletType) {\n        try {\n          const adapter = walletAdapterFactory.getAdapter(state.walletType);\n          await adapter.disconnect();\n        } catch (error) {\n          console.warn('Error disconnecting wallet:', error);\n        }\n      }\n\n      state.isConnected = false;\n      state.address = null;\n      state.chainId = null;\n      state.chainUID = null;\n      state.walletType = null;\n      state.balances = [];\n      state.connectedWallets.clear();\n      state.error = null;\n    }\n  },\n\n  setBalances(balances: UserBalance[]) {\n    state.balances = [...balances];\n  },\n\n  updateBalance(tokenId: string, balance: string) {\n    const existingIndex = state.balances.findIndex(b => b.token === tokenId);\n\n    const balanceObject: UserBalance = {\n      amount: balance,\n      token_id: tokenId,\n      // Legacy compatibility fields\n      token: tokenId,\n      balance: balance,\n      chain_uid: state.chainUID || '',\n      token_type: { native: { denom: tokenId } },\n    };\n\n    if (existingIndex >= 0) {\n      state.balances[existingIndex] = balanceObject;\n    } else {\n      state.balances.push(balanceObject);\n    }\n  },\n\n  async switchChain(chainId: string) {\n    if (!state.walletType) {\n      throw new Error('No wallet connected');\n    }\n\n    state.loading = true;\n    state.error = null;\n\n    try {\n      const adapter = walletAdapterFactory.getAdapter(state.walletType);\n      await adapter.switchChain(chainId);\n\n      state.chainId = chainId;\n      state.chainUID = chainId;\n      state.error = null;\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Failed to switch chain';\n    } finally {\n      state.loading = false;\n    }\n  },\n\n  clear() {\n    reset();\n  },\n\n  // Multi-wallet support methods\n  addWallet(chainUID: string, walletInfo: Omit<WalletInfo, 'chainUID'>) {\n    const fullWalletInfo: WalletInfo = {\n      ...walletInfo,\n      chainUID,\n      type: walletInfo.walletType, // Set legacy alias\n      name: walletInfo.walletType, // Set legacy name\n    };\n\n    const newConnectedWallets = new Map(state.connectedWallets);\n    newConnectedWallets.set(chainUID, fullWalletInfo);\n\n    smartStore.smartUpdate({\n      connectedWallets: newConnectedWallets,\n      wallets: newConnectedWallets, // Keep alias synchronized\n    });\n\n    // Update primary wallet state if this is the first connection\n    if (!state.isConnected) {\n      smartStore.smartUpdate({\n        isConnected: true,\n        address: walletInfo.address,\n        chainUID: chainUID,\n        walletType: walletInfo.walletType,\n        balances: [...walletInfo.balances],\n      });\n    }\n\n    // Persist to IndexedDB\n    walletStorage.setConnectedWallets(newConnectedWallets).catch(error => {\n      console.warn('Failed to persist wallet connections:', error);\n    });\n  },\n\n  removeWallet(chainUID: string) {\n    const newConnectedWallets = new Map(state.connectedWallets);\n    newConnectedWallets.delete(chainUID);\n\n    smartStore.smartUpdate({\n      connectedWallets: newConnectedWallets,\n      wallets: newConnectedWallets, // Keep alias synchronized\n    });\n\n    // Update primary wallet state if we removed the current primary\n    if (state.chainUID === chainUID) {\n      const remaining = Array.from(newConnectedWallets.values());\n      if (remaining.length > 0) {\n        const newPrimary = remaining[0];\n        smartStore.smartUpdate({\n          address: newPrimary.address,\n          chainUID: newPrimary.chainUID,\n          walletType: newPrimary.walletType,\n          balances: [...newPrimary.balances],\n        });\n      } else {\n        smartStore.smartUpdate({\n          isConnected: false,\n          address: null,\n          chainUID: null,\n          walletType: null,\n          balances: [],\n        });\n      }\n    }\n\n    // Persist to IndexedDB\n    walletStorage.setConnectedWallets(newConnectedWallets).catch(error => {\n      console.warn('Failed to persist wallet connections:', error);\n    });\n  },\n\n  updateWalletBalances(chainUID: string, balances: UserBalance[]) {\n    const wallet = state.connectedWallets.get(chainUID);\n    if (wallet) {\n      const updatedWallet = { ...wallet, balances: [...balances] };\n      const newConnectedWallets = new Map(state.connectedWallets);\n      newConnectedWallets.set(chainUID, updatedWallet);\n\n      smartStore.smartUpdate({\n        connectedWallets: newConnectedWallets,\n        wallets: newConnectedWallets, // Keep alias synchronized\n      });\n\n      // Update primary state if this is the current primary wallet\n      if (state.chainUID === chainUID) {\n        smartStore.smartUpdate({\n          balances: [...balances],\n        });\n      }\n\n      // Persist to IndexedDB\n      walletStorage.setConnectedWallets(newConnectedWallets).catch(error => {\n        console.warn('Failed to persist wallet connections:', error);\n      });\n    }\n  },\n};\n\n// Getters\nconst getters = {\n  getBalance: (tokenId: string) => {\n    return state.balances.find(balance => balance.token === tokenId);\n  },\n\n  getFormattedBalance: (tokenId: string, decimals: number = 18) => {\n    const balance = getters.getBalance(tokenId);\n    if (!balance) return '0';\n\n    try {\n      const value = BigInt(balance.balance);\n      const divisor = BigInt(10 ** decimals);\n      const beforeDecimal = value / divisor;\n      const afterDecimal = value % divisor;\n\n      return `${beforeDecimal.toString()}.${afterDecimal.toString().padStart(decimals, '0')}`;\n    } catch {\n      return '0';\n    }\n  },\n\n  hasSufficientBalance: (tokenIdOrChainUID: string, amountOrTokenId?: string, amountParam?: string) => {\n    // Support both signatures:\n    // hasSufficientBalance(tokenId, amount) - 2 params\n    // hasSufficientBalance(chainUID, tokenId, amount) - 3 params\n    if (typeof amountParam === 'string' && amountOrTokenId && amountParam) {\n      // 3-parameter version: chainUID, tokenId, amount\n      const chainUID = tokenIdOrChainUID;\n      const tokenId = amountOrTokenId;\n      const amount = amountParam;\n\n      const wallet = state.connectedWallets.get(chainUID);\n      if (!wallet) return false;\n\n      const balance = wallet.balances.find(b => b.token === tokenId);\n      if (!balance) return false;\n\n      try {\n        return BigInt(balance.balance) >= BigInt(amount);\n      } catch {\n        return false;\n      }\n    } else {\n      // 2-parameter version: tokenId, amount\n      const tokenId = tokenIdOrChainUID;\n      const amount = amountOrTokenId || '';\n\n      const balance = getters.getBalance(tokenId);\n      if (!balance) return false;\n\n      try {\n        return BigInt(balance.balance) >= BigInt(amount);\n      } catch {\n        return false;\n      }\n    }\n  },  isWalletAvailable: (walletType: 'metamask' | 'keplr' | 'phantom') => {\n    try {\n      const adapter = walletAdapterFactory.getAdapter(walletType);\n      return adapter.isAvailable();\n    } catch {\n      return false;\n    }\n  },\n\n  getAvailableWallets: () => {\n    return walletAdapterFactory.getAvailableWalletTypes();\n  },\n\n  // Multi-wallet getters\n  isWalletConnected: (chainUID: string) => {\n    const wallet = state.connectedWallets.get(chainUID);\n    return wallet ? wallet.isConnected : false;\n  },\n\n  getAllConnectedWallets: () => {\n    return Array.from(state.connectedWallets.values()).filter(wallet => wallet.isConnected);\n  },\n\n  getWalletBalance: (chainUID: string, tokenSymbol: string) => {\n    const wallet = state.connectedWallets.get(chainUID);\n    if (!wallet) return null;\n\n    return wallet.balances.find(balance =>\n      balance.token === tokenSymbol ||\n      balance.token.toLowerCase() === tokenSymbol.toLowerCase()\n    );\n  },\n\n  // Additional method for getting wallet by chain\n  getWallet: (chainUID: string) => {\n    return state.connectedWallets.get(chainUID) || null;\n  },\n\n  // Method for adding transaction records (placeholder)\n  addTransaction: (chainUID: string, transaction: { txHash: string; timestamp?: number; type?: string }) => {\n    // This would typically store transaction history\n    // For now, just log it\n    console.log(`Transaction added for ${chainUID}:`, transaction);\n  },\n\n  // Method for updating transaction status\n  updateTransactionStatus: (chainUID: string, txHash: string, status: 'pending' | 'confirmed' | 'failed') => {\n    // This would typically update stored transaction history\n    console.log(`Transaction ${txHash} on ${chainUID} updated to status: ${status}`);\n  },\n};\n\n// Proper store type definition extending BaseStore\nexport interface WalletStore extends BaseStore<ExtendedWalletState> {\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  connectWallet: (walletType: 'metamask' | 'keplr' | 'phantom', chainId?: string) => Promise<void>;\n  disconnectWallet: (chainUID?: string) => Promise<void>;\n  setBalances: (balances: UserBalance[]) => void;\n  updateBalance: (tokenId: string, balance: string) => void;\n  switchChain: (chainId: string) => Promise<void>;\n  clear: () => void;\n  initialize: () => void;\n  addWallet: (chainUID: string, walletInfo: Omit<WalletInfo, 'chainUID'>) => void;\n  removeWallet: (chainUID: string) => void;\n  updateWalletBalances: (chainUID: string, balances: UserBalance[]) => void;\n  getBalance: (tokenId: string) => UserBalance | undefined;\n  getFormattedBalance: (tokenId: string, decimals?: number) => string;\n  hasSufficientBalance: (tokenIdOrChainUID: string, amountOrTokenId?: string, amountParam?: string) => boolean;\n  isWalletAvailable: (walletType: 'metamask' | 'keplr' | 'phantom') => boolean;\n  getAvailableWallets: () => ('metamask' | 'keplr' | 'phantom')[];\n  isWalletConnected: (chainUID: string) => boolean;\n  getAllConnectedWallets: () => WalletInfo[];\n  getWalletBalance: (chainUID: string, tokenSymbol: string) => UserBalance | null;\n  getWallet: (chainUID: string) => WalletInfo | null;\n  addTransaction: (chainUID: string, transaction: { txHash: string; timestamp?: number; type?: string }) => void;\n  updateTransactionStatus: (chainUID: string, txHash: string, status: 'pending' | 'confirmed' | 'failed') => void;\n}\n\nexport const walletStore: WalletStore = {\n  state,\n  onChange,\n  reset,\n  dispose,\n  ...actions,\n  ...getters,\n};\n\nexport type { WalletState };\n","import { createStore } from '@stencil/store';\nimport type { BaseStore } from './types';\n\nexport interface AppState {\n  walletModalOpen: boolean;\n  walletModalFilter: string | null;\n  tokenModalOpen: boolean;\n  tokenSelectorType: 'input' | 'output' | null;\n  isInitialized: boolean;\n  theme: 'light' | 'dark' | 'auto';\n}\n\nconst initialState: AppState = {\n  walletModalOpen: false,\n  walletModalFilter: null,\n  tokenModalOpen: false,\n  tokenSelectorType: null,\n  isInitialized: false,\n  theme: 'auto',\n};\n\nconst { state, onChange, reset, dispose } = createStore(initialState);\n\n// Actions\nconst actions = {\n  initialize() {\n    state.isInitialized = true;\n  },\n\n  openWalletModal(chainFilter?: string) {\n    state.walletModalOpen = true;\n    state.walletModalFilter = chainFilter || null;\n  },\n\n  closeWalletModal() {\n    state.walletModalOpen = false;\n    state.walletModalFilter = null;\n  },\n\n  openTokenModal(selectorType: 'input' | 'output' = 'input') {\n    state.tokenModalOpen = true;\n    state.tokenSelectorType = selectorType;\n  },\n\n  closeTokenModal() {\n    state.tokenModalOpen = false;\n    state.tokenSelectorType = null;\n  },\n\n  setTheme(theme: AppState['theme']) {\n    state.theme = theme;\n  },\n\n  clear() {\n    reset();\n  },\n};\n\n// Proper store type definition extending BaseStore\nexport interface AppStore extends BaseStore<AppState> {\n  initialize: () => void;\n  openWalletModal: (chainFilter?: string) => void;\n  closeWalletModal: () => void;\n  openTokenModal: (selectorType?: 'input' | 'output') => void;\n  closeTokenModal: () => void;\n  setTheme: (theme: AppState['theme']) => void;\n  clear: () => void;\n}\n\nexport const appStore: AppStore = {\n  state,\n  onChange,\n  reset,\n  dispose,\n  ...actions,\n};\n","import { createStore } from '@stencil/store';\nimport type { SwapState } from '../utils/types/euclid-api.types';\nimport type { TokenMetadata, RoutePath } from '../utils/types/api.types';\nimport type { BaseStore } from './types';\n\nconst initialState: SwapState = {\n  tokenIn: null,\n  tokenOut: null,\n  fromToken: null, // alias for backward compatibility\n  toToken: null,   // alias for backward compatibility\n  amountIn: '',\n  amountOut: '',\n  fromAmount: '', // alias for backward compatibility\n  toAmount: '',   // alias for backward compatibility\n  routes: [],\n  selectedRoute: null,\n  slippage: 0.5, // 0.5% default\n  loading: false,\n  error: null,\n};\n\nconst { state, onChange, reset, dispose } = createStore(initialState);\n\n// Actions\nconst actions = {\n  setTokenIn(token: TokenMetadata | null) {\n    state.tokenIn = token;\n    state.fromToken = token; // Keep aliases synchronized\n    // Clear routes when changing tokens\n    state.routes = [];\n    state.selectedRoute = null;\n    state.amountOut = '';\n    state.toAmount = '';\n  },\n\n  setTokenOut(token: TokenMetadata | null) {\n    state.tokenOut = token;\n    state.toToken = token; // Keep aliases synchronized\n    // Clear routes when changing tokens\n    state.routes = [];\n    state.selectedRoute = null;\n    state.amountOut = '';\n    state.toAmount = '';\n  },\n\n  // Backward compatibility aliases\n  setFromToken(token: TokenMetadata | null) {\n    actions.setTokenIn(token);\n  },\n\n  setToToken(token: TokenMetadata | null) {\n    actions.setTokenOut(token);\n  },\n\n  setAmountIn(amount: string) {\n    state.amountIn = amount;\n    state.fromAmount = amount; // Keep aliases synchronized\n    // Clear output when changing input\n    if (!amount) {\n      state.amountOut = '';\n      state.toAmount = '';\n      state.routes = [];\n      state.selectedRoute = null;\n    }\n  },\n\n  setAmountOut(amount: string) {\n    state.amountOut = amount;\n    state.toAmount = amount; // Keep aliases synchronized\n  },\n\n  // Backward compatibility aliases\n  setFromAmount(amount: string) {\n    actions.setAmountIn(amount);\n  },\n\n  setToAmount(amount: string) {\n    actions.setAmountOut(amount);\n  },\n\n  setRoutes(routes: RoutePath[]) {\n    state.routes = [...routes];\n    state.loading = false;\n    state.error = null;\n\n    // Auto-select best route (first one, assumed to be optimal)\n    if (routes.length > 0) {\n      actions.setSelectedRoute(routes[0]);\n    }\n  },\n\n  setSelectedRoute(route: RoutePath | null) {\n    state.selectedRoute = route;\n\n    // Calculate expected output from route\n    if (route && route.path.length > 0) {\n      const lastHop = route.path[route.path.length - 1];\n      state.amountOut = lastHop.amount_out;\n    }\n  },\n\n  setLoading(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setError(error: string | null) {\n    state.error = error;\n  },\n\n  setSlippage(slippage: number) {\n    state.slippage = slippage;\n  },\n\n  // Additional methods that components expect\n  setLoadingRoutes(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setSwapping(swapping: boolean) {\n    state.loading = swapping; // Use loading flag for swapping state\n  },\n\n  swapTokens() {\n    const tokenIn = state.tokenIn;\n    const tokenOut = state.tokenOut;\n    const amountIn = state.amountIn;\n\n    state.tokenIn = tokenOut;\n    state.tokenOut = tokenIn;\n    state.fromToken = tokenOut; // Keep aliases synchronized\n    state.toToken = tokenIn;\n    state.amountIn = '';\n    state.amountOut = amountIn;\n    state.fromAmount = '';\n    state.toAmount = amountIn;\n    state.routes = [];\n    state.selectedRoute = null;\n    state.error = null;\n  },\n\n  clear() {\n    reset();\n  },\n};\n\n// Getters\nconst getters = {\n  canSwap: () => {\n    return !!(\n      state.tokenIn &&\n      state.tokenOut &&\n      state.amountIn &&\n      parseFloat(state.amountIn) > 0 &&\n      state.selectedRoute &&\n      !state.loading\n    );\n  },\n\n  getPriceImpact: () => {\n    return state.selectedRoute?.total_price_impact || '0';\n  },\n\n  getEstimatedGas: () => {\n    // This would be calculated based on the route complexity\n    if (!state.selectedRoute) return '0';\n\n    const hopCount = state.selectedRoute.path.length;\n    return (hopCount * 100000).toString(); // Rough estimate\n  },\n\n  isValidPair: () => {\n    return !!(\n      state.tokenIn &&\n      state.tokenOut &&\n      state.tokenIn.id !== state.tokenOut.id\n    );\n  },\n\n  getSlippageAmount: () => {\n    if (!state.amountOut || !state.slippage) return '0';\n\n    try {\n      const output = BigInt(state.amountOut);\n      const slippageBps = BigInt(Math.floor(state.slippage * 100)); // Convert to basis points\n      const slippageAmount = (output * slippageBps) / BigInt(10000);\n      const minimumReceive = output - slippageAmount;\n\n      return minimumReceive.toString();\n    } catch {\n      return '0';\n    }\n  },\n};\n\n// Proper store type definition extending BaseStore\nexport interface SwapStore extends BaseStore<SwapState> {\n  setTokenIn: (token: TokenMetadata | null) => void;\n  setTokenOut: (token: TokenMetadata | null) => void;\n  setFromToken: (token: TokenMetadata | null) => void; // alias\n  setToToken: (token: TokenMetadata | null) => void;   // alias\n  setAmountIn: (amount: string) => void;\n  setAmountOut: (amount: string) => void;\n  setFromAmount: (amount: string) => void; // alias\n  setToAmount: (amount: string) => void;   // alias\n  setRoutes: (routes: RoutePath[]) => void;\n  setSelectedRoute: (route: RoutePath | null) => void;\n  setLoading: (loading: boolean) => void;\n  setLoadingRoutes: (loading: boolean) => void; // alias\n  setSwapping: (swapping: boolean) => void; // alias\n  setError: (error: string | null) => void;\n  setSlippage: (slippage: number) => void;\n  swapTokens: () => void;\n  clear: () => void;\n  canSwap: () => boolean;\n  getPriceImpact: () => string;\n  getEstimatedGas: () => string;\n  isValidPair: () => boolean;\n  getSlippageAmount: () => string;\n}\n\nexport const swapStore: SwapStore = {\n  state,\n  onChange,\n  reset,\n  dispose,\n  ...actions,\n  ...getters,\n};\n\nexport type { SwapState };\n","import { createStore } from '@stencil/store';\nimport type { LiquidityState } from '../utils/types/euclid-api.types';\nimport type { TokenMetadata, PoolInfo, LiquidityPosition } from '../utils/types/api.types';\nimport type { BaseStore } from './types';\n\nconst initialState: LiquidityState = {\n  token1: null,\n  token2: null,\n  amount1: '',\n  amount2: '',\n  token1Amount: '', // legacy alias\n  token2Amount: '', // legacy alias\n  pool: null,\n  selectedPool: null, // legacy alias\n  userLpBalance: '0',\n  loading: false,\n  error: null,\n};\n\nconst { state, onChange, reset, dispose } = createStore(initialState);\n\n// Actions\nconst actions = {\n  setLoading(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setError(error: string | null) {\n    state.error = error;\n  },\n\n  setToken1(token: TokenMetadata | null) {\n    state.token1 = token;\n\n    // Clear pool if tokens don't match\n    if (state.pool && token &&\n        state.pool.token_1 !== token.id &&\n        state.pool.token_2 !== token.id) {\n      state.pool = null;\n    }\n  },\n\n  setToken2(token: TokenMetadata | null) {\n    state.token2 = token;\n\n    // Clear pool if tokens don't match\n    if (state.pool && token &&\n        state.pool.token_1 !== token.id &&\n        state.pool.token_2 !== token.id) {\n      state.pool = null;\n    }\n  },\n\n  setAmount1(amount: string) {\n    state.amount1 = amount;\n    state.token1Amount = amount; // Keep alias synchronized\n  },\n\n  setAmount2(amount: string) {\n    state.amount2 = amount;\n    state.token2Amount = amount; // Keep alias synchronized\n  },\n\n  // Backward compatibility aliases\n  setToken1Amount(amount: string) {\n    actions.setAmount1(amount);\n  },\n\n  setToken2Amount(amount: string) {\n    actions.setAmount2(amount);\n  },\n\n  setPool(pool: PoolInfo | null) {\n    state.pool = pool;\n    state.selectedPool = pool; // Keep alias synchronized\n  },\n\n  // Backward compatibility alias\n  setSelectedPool(pool: PoolInfo | null) {\n    actions.setPool(pool);\n  },\n\n  setUserLpBalance(balance: string) {\n    state.userLpBalance = balance;\n  },\n\n  swapTokens() {\n    const token1 = state.token1;\n    const token2 = state.token2;\n    const amount1 = state.amount1;\n    const amount2 = state.amount2;\n\n    state.token1 = token2;\n    state.token2 = token1;\n    state.amount1 = amount2;\n    state.amount2 = amount1;\n  },\n\n  clear() {\n    reset();\n  },\n\n  // Additional methods that components expect\n  setAddingLiquidity(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setRemovingLiquidity(loading: boolean) {\n    state.loading = loading;\n  },\n\n  getPosition(poolId: string): LiquidityPosition | null {\n    // This would typically fetch from API or cache\n    // For now, return null\n    console.warn(`getPosition(${poolId}) not implemented`);\n    return null;\n  },\n};\n\n// Getters\nconst getters = {\n  canAddLiquidity: () => {\n    return !!(\n      state.token1 &&\n      state.token2 &&\n      state.amount1 &&\n      state.amount2 &&\n      parseFloat(state.amount1) > 0 &&\n      parseFloat(state.amount2) > 0 &&\n      !state.loading\n    );\n  },\n\n  canRemoveLiquidity: () => {\n    return !!(\n      state.pool &&\n      state.userLpBalance &&\n      parseFloat(state.userLpBalance) > 0 &&\n      !state.loading\n    );\n  },\n\n  getPoolLiquidity: () => {\n    return state.pool?.total_liquidity || '0';\n  },\n\n  getPoolVolume24h: () => {\n    return state.pool?.volume_24h || '0';\n  },\n\n  getPoolFees24h: () => {\n    return state.pool?.fees_24h || '0';\n  },\n\n  getPoolAPR: () => {\n    return state.pool?.apr || '0';\n  },\n\n  isValidPair: () => {\n    return !!(\n      state.token1 &&\n      state.token2 &&\n      state.token1.id !== state.token2.id\n    );\n  },\n};\n\n// Store interface\nexport interface LiquidityStore extends BaseStore<LiquidityState> {\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  setToken1: (token: TokenMetadata | null) => void;\n  setToken2: (token: TokenMetadata | null) => void;\n  setAmount1: (amount: string) => void;\n  setAmount2: (amount: string) => void;\n  setToken1Amount: (amount: string) => void; // alias\n  setToken2Amount: (amount: string) => void; // alias\n  setPool: (pool: PoolInfo | null) => void;\n  setSelectedPool: (pool: PoolInfo | null) => void; // alias\n  setUserLpBalance: (balance: string) => void;\n  swapTokens: () => void;\n  clear: () => void;\n  setAddingLiquidity: (loading: boolean) => void;\n  setRemovingLiquidity: (loading: boolean) => void;\n  getPosition: (poolId: string) => LiquidityPosition | null;\n  canAddLiquidity: () => boolean;\n  canRemoveLiquidity: () => boolean;\n  getPoolLiquidity: () => string;\n  getPoolVolume24h: () => string;\n  getPoolFees24h: () => string;\n  getPoolAPR: () => string;\n  isValidPair: () => boolean;\n}\n\nexport const liquidityStore: LiquidityStore = {\n  state,\n  onChange,\n  reset,\n  dispose,\n  ...actions,\n  ...getters,\n};\n\nexport type { LiquidityState };\n","/**\n * Default Configuration for Euclid Components\n * These are fallback defaults that can be overridden by component props\n */\n\nexport interface EuclidConfig {\n  // API Configuration\n  graphqlEndpoint: string;\n  restEndpoint: string;\n  apiTimeout: number;\n  environment: 'mainnet' | 'testnet' | 'devnet';\n\n  // Performance Settings\n  refreshIntervals: {\n    marketData: number;\n    balances: number;\n    routes: number;\n  };\n\n  // Performance Configuration\n  performance: {\n    cache: {\n      marketData: number;\n      chains: number;\n      routes: number;\n      balances: number;\n      tokens: number;\n    };\n    polling: {\n      active: {\n        marketData: number;\n        chains: number;\n        balances: number;\n        routes: number;\n      };\n      background: {\n        marketData: number;\n        chains: number;\n        balances: number;\n        routes: number;\n      };\n    };\n    requestDeduplication: boolean;\n    pauseOnHidden: boolean;\n  };\n\n  // UI Configuration\n  ui: {\n    defaultSlippage: number;\n    animationDuration: number;\n    zIndex: {\n      modal: number;\n      tooltip: number;\n      dropdown: number;\n    };\n  };\n\n  // Feature Flags\n  features: {\n    darkMode: boolean;\n    transactionHistory: boolean;\n    advancedRouting: boolean;\n  };\n\n  // Wallet Configuration\n  defaultWallet: string;\n  supportedWallets: string[];\n\n  // Chain Configuration\n  defaultChain: string;\n  supportedChains: string[];\n}\n\n// Default configuration (testnet endpoints as fallback)\nexport const DEFAULT_CONFIG: EuclidConfig = {\n  // API Configuration\n  graphqlEndpoint: 'https://testnet.api.euclidprotocol.com/graphql',\n  restEndpoint: 'https://testnet.api.euclidprotocol.com/api/v1',\n  apiTimeout: 10000,\n  environment: 'testnet',\n\n  // Performance Settings\n  refreshIntervals: {\n    marketData: 30000,  // 30 seconds\n    balances: 60000,    // 1 minute\n    routes: 300000,     // 5 minutes\n  },\n\n  // Performance Configuration\n  performance: {\n    // CACHE: How long to reuse API data before making fresh requests\n    // If cache TTL hasn't expired, polling is ignored and cached data is used\n    cache: {\n      marketData: 5000,       // 5 seconds - cache dynamic market data (tokens)\n      chains: 300000,         // 5 minutes - cache static chain metadata\n      routes: 30000,          // 30 seconds - cache route data\n      balances: 60000,        // 1 minute - cache balance data\n      tokens: 5000,          // 5 seconds - cache dynamic token data\n    },\n    // POLLING: How often the timer fires to CHECK if we should fetch new data\n    // Timer frequency - actual API calls depend on cache TTL above\n    polling: {\n      active: {\n        marketData: 5000,      // Check every 5 seconds when tab is active (tokens)\n        chains: 300000,        // Check every 5 minutes when tab is active (static data)\n        balances: 60000,       // Check every 1 minute when tab is active\n        routes: 10000,         // Check every 10 seconds when tab is active\n      },\n      background: {\n        marketData: 300000,    // Check every 5 minutes when tab is hidden\n        chains: 1800000,       // Check every 30 minutes when tab is hidden (very static)\n        balances: 600000,      // Check every 10 minutes when tab is hidden\n        routes: 60000,         // Check every 1 minute when tab is hidden\n      },\n    },\n    requestDeduplication: true,\n    pauseOnHidden: true,\n  },\n\n  // UI Configuration\n  ui: {\n    defaultSlippage: 0.5,\n    animationDuration: 250,\n    zIndex: {\n      modal: 1000,\n      tooltip: 1070,\n      dropdown: 1000,\n    },\n  },\n\n  // Feature Flags\n  features: {\n    darkMode: true,\n    transactionHistory: true,\n    advancedRouting: true,\n  },\n\n  // Wallet Configuration\n  defaultWallet: 'keplr',\n  supportedWallets: ['keplr', 'metamask', 'walletconnect', 'coinbase'],\n\n  // Chain Configuration\n  defaultChain: 'osmosis-1',\n  supportedChains: ['cosmoshub-4', 'osmosis-1', 'juno-1', 'stargaze-1', 'ethereum', 'polygon', 'arbitrum', 'optimism'],\n};\n\n// Environment presets for quick configuration\nexport const ENVIRONMENT_PRESETS: Record<string, Partial<EuclidConfig>> = {\n  mainnet: {\n    graphqlEndpoint: 'https://api.euclidprotocol.com/graphql',\n    restEndpoint: 'https://api.euclidprotocol.com/api/v1',\n    environment: 'mainnet',\n  },\n  testnet: {\n    graphqlEndpoint: 'https://testnet.api.euclidprotocol.com/graphql',\n    restEndpoint: 'https://testnet.api.euclidprotocol.com/api/v1',\n    environment: 'testnet',\n  },\n  devnet: {\n    graphqlEndpoint: 'https://devnet.api.euclidprotocol.com/graphql',\n    restEndpoint: 'https://devnet.api.euclidprotocol.com/api/v1',\n    environment: 'devnet',\n  },\n};\n\n// Utility function to merge config with overrides\nexport const mergeConfig = (base: EuclidConfig, overrides: Partial<EuclidConfig>): EuclidConfig => {\n  return {\n    ...base,\n    ...overrides,\n    refreshIntervals: {\n      ...base.refreshIntervals,\n      ...overrides.refreshIntervals,\n    },\n    ui: {\n      ...base.ui,\n      ...overrides.ui,\n      zIndex: {\n        ...base.ui.zIndex,\n        ...overrides.ui?.zIndex,\n      },\n    },\n    features: {\n      ...base.features,\n      ...overrides.features,\n    },\n  };\n};\n","import type {\n  EuclidChainConfig,\n  TokenMetadata,\n  PoolInfo,\n  UserBalance,\n  CrossChainUser,\n  ChainsQueryResponse,\n  TokenMetadataQueryResponse,\n  UserBalanceQueryResponse,\n  ApiResponse\n} from './types/api.types';\nimport type { EuclidConfig } from './env';\nimport { DEFAULT_CONFIG } from './env';\n\n/**\n * GraphQL client for Euclid Protocol\n * Handles all GraphQL queries to the Euclid API\n */\nexport class EuclidGraphQLClient {\n  private endpoint: string;\n  private timeout: number;\n\n  constructor(config?: Partial<EuclidConfig>) {\n    const finalConfig = { ...DEFAULT_CONFIG, ...config };\n    this.endpoint = finalConfig.graphqlEndpoint;\n    this.timeout = finalConfig.apiTimeout;\n  }\n\n  /**\n   * Execute a GraphQL query\n   */\n  private async query<T>(query: string, variables?: Record<string, unknown>): Promise<ApiResponse<T>> {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n    try {\n      const response = await fetch(this.endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },\n        body: JSON.stringify({\n          query,\n          variables: variables || {},\n        }),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n\n      if (result.errors) {\n        throw new Error(`GraphQL error: ${result.errors.map((e: { message: string }) => e.message).join(', ')}`);\n      }\n\n      return {\n        success: true,\n        data: result.data,\n      };\n    } catch (error) {\n      clearTimeout(timeoutId);\n      console.error('GraphQL query failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Get all supported chains\n   */\n  async getChains(variables?: { showAllChains?: boolean; type?: string }): Promise<EuclidChainConfig[]> {\n    const query = `\n      query Chains($showAllChains: Boolean, $type: String) {\n        chains {\n          all_chains(show_all_chains: $showAllChains, type: $type) {\n            chain_id\n            chain_uid\n            display_name\n            factory_address\n            token_factory_address\n            explorer_url\n            logo\n            type\n          }\n        }\n      }\n    `;\n\n    const result = await this.query<ChainsQueryResponse>(query, variables);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to fetch chains');\n    }\n\n    return result.data.chains.all_chains;\n  }\n\n  /**\n   * Get token metadata\n   */\n  async getTokenMetadata(variables?: {\n    limit?: number;\n    offset?: number;\n    verified?: boolean;\n    dex?: string[];\n    chainUids?: string[];\n    showVolume?: boolean;\n    search?: string;\n  }): Promise<TokenMetadata[]> {\n    const query = `\n      query Token(\n        $limit: Int,\n        $offset: Int,\n        $verified: Boolean,\n        $dex: [String!],\n        $chainUids: [String!],\n        $showVolume: Boolean,\n        $search: String\n      ) {\n        token {\n          token_metadatas(\n            limit: $limit,\n            offset: $offset,\n            verified: $verified,\n            dex: $dex,\n            chain_uids: $chainUids,\n            show_volume: $showVolume,\n            search: $search\n          ) {\n            coinDecimal\n            displayName\n            tokenId\n            description\n            image\n            price\n            price_change_24h\n            price_change_7d\n            dex\n            chain_uids\n            total_volume\n            total_volume_24h\n            tags\n            min_swap_value\n            social\n            is_verified\n          }\n        }\n      }\n    `;\n\n    const result = await this.query<TokenMetadataQueryResponse>(query, variables);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to fetch token metadata');\n    }\n\n    return result.data.token.token_metadatas;\n  }\n\n  /**\n   * Get all liquidity pools with proper TVL and APR data\n   * @param chainUid - Optional chain filter (unused for now)\n   * @param onlyVerified - Whether to show only verified pools (default: true)\n   */\n  async getAllPools(_chainUid?: string, onlyVerified: boolean = true): Promise<PoolInfo[]> {\n    try {\n      const query = `\n        query Token_pair_with_liquidity($limit: Int, $onlyShowVerified: Boolean) {\n          pool {\n            token_pair_with_liquidity(limit: $limit, only_show_verified: $onlyShowVerified) {\n              results {\n                pair {\n                  token_1\n                  token_2\n                }\n                vlp\n                total_liquidity\n                apr\n                tags\n                created_at\n              }\n              pagination {\n                total_count\n                limit\n                offset\n              }\n            }\n          }\n        }\n      `;\n\n      const result = await this.query<{\n        pool: {\n          token_pair_with_liquidity: {\n            results: Array<{\n              pair: { token_1: string; token_2: string };\n              vlp: string;\n              total_liquidity: string;\n              apr: string;\n              tags: string[] | null;\n              created_at: string;\n            }>;\n            pagination: {\n              total_count: number;\n              limit: number;\n              offset: number;\n            };\n          };\n        };\n      }>(query, {\n        limit: 1000,\n        onlyShowVerified: onlyVerified\n      });\n\n      if (!result.success || !result.data?.pool?.token_pair_with_liquidity?.results) {\n        throw new Error(result.error || 'Failed to fetch pools with liquidity data');\n      }\n\n      // Transform the API response to our PoolInfo interface\n      const pools = result.data.pool.token_pair_with_liquidity.results.map((pool) => {\n        return {\n          pool_id: `${pool.pair.token_1}-${pool.pair.token_2}`,\n          token_1: pool.pair.token_1,\n          token_2: pool.pair.token_2,\n          total_liquidity: pool.total_liquidity,\n          volume_24h: '0', // This API doesn't provide volume data\n          fees_24h: '0', // This API doesn't provide fees data\n          apr: pool.apr,\n        } satisfies PoolInfo;\n      });\n\n      console.log(`✅ Loaded ${pools.length} pools with real liquidity and APR data from official API`);\n      return pools;\n\n    } catch (error) {\n      console.error('Failed to fetch pools with liquidity data:', error);\n      return [];\n    }\n  }  /**\n   * Get user balances across all chains\n   */\n  async getUserBalances(user: CrossChainUser): Promise<UserBalance[]> {\n    const query = `\n      query Vcoin($user: CrossChainUserInput) {\n        vcoin {\n          user_balance(user: $user) {\n            balances {\n              amount\n              token_id\n            }\n          }\n        }\n      }\n    `;\n\n    const variables = {\n      user: {\n        address: user.address,\n        chain_uid: user.chain_uid,\n      },\n    };\n\n    const result = await this.query<UserBalanceQueryResponse>(query, variables);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to fetch user balances');\n    }\n\n    return result.data.vcoin.user_balance.balances;\n  }\n\n  /**\n   * Get pool information for a specific pair\n   */\n  async getPoolInfo(token1: string, token2: string): Promise<PoolInfo | null> {\n    const pools = await this.getAllPools();\n    return pools.find(pool =>\n      (pool.token_1 === token1 && pool.token_2 === token2) ||\n      (pool.token_1 === token2 && pool.token_2 === token1)\n    ) || null;\n  }\n\n  /**\n   * Search tokens by symbol or name\n   */\n    async searchTokens(searchTerm: string, chainUID?: string): Promise<TokenMetadata[]> {\n    const options: Parameters<typeof this.getTokenMetadata>[0] = { search: searchTerm };\n    if (chainUID) {\n      options.chainUids = [chainUID];\n    }\n    const tokens = await this.getTokenMetadata(options);\n\n    const lowerSearchTerm = searchTerm.toLowerCase();\n    return tokens.filter(token =>\n      token.displayName?.toLowerCase().includes(lowerSearchTerm) ||\n      token.tokenId?.toLowerCase().includes(lowerSearchTerm) ||\n      token.description?.toLowerCase().includes(lowerSearchTerm) ||\n      // Legacy field fallbacks\n      token.symbol?.toLowerCase().includes(lowerSearchTerm) ||\n      token.name?.toLowerCase().includes(lowerSearchTerm)\n    );\n  }\n\n  /**\n   * Get token by symbol and chain\n   */\n  async getTokenBySymbol(symbol: string, chainUID: string): Promise<TokenMetadata | null> {\n    const tokens = await this.getTokenMetadata({ chainUids: [chainUID] });\n    // Use displayName (symbol equivalent) for comparison, with fallback to legacy fields\n    return tokens.find(token =>\n      token.displayName?.toLowerCase() === symbol.toLowerCase() ||\n      token.symbol?.toLowerCase() === symbol.toLowerCase()\n    ) || null;\n  }\n}\n\n// Export a default instance with default config\nexport const euclidGraphQLClient = new EuclidGraphQLClient();\n\n// Export factory function for creating configured clients\nexport const createGraphQLClient = (config?: Partial<EuclidConfig>) => {\n  return new EuclidGraphQLClient(config);\n};\n","import type {\n  GetRoutesRequest,\n  GetRoutesResponse,\n  RoutePath,\n  SwapRequest,\n  AddLiquidityRequest,\n  RemoveLiquidityRequest,\n  TransactionResponse,\n  ApiResponse\n} from './types/api.types';\nimport type { EuclidConfig } from './env';\nimport { DEFAULT_CONFIG } from './env';\n\n/**\n * REST client for Euclid Protocol\n * Handles all REST API calls for transactions, routing, and operations\n */\nexport class EuclidRESTClient {\n  private endpoint: string;\n  private timeout: number;\n\n  constructor(config?: Partial<EuclidConfig>) {\n    const finalConfig = { ...DEFAULT_CONFIG, ...config };\n    this.endpoint = finalConfig.restEndpoint;\n    this.timeout = finalConfig.apiTimeout;\n  }\n\n  /**\n   * Execute a REST API request\n   */\n  private async request<T>(\n    path: string,\n    options: {\n      method?: 'GET' | 'POST' | 'PUT' | 'DELETE';\n      body?: unknown;\n      headers?: Record<string, string>;\n    } = {}\n  ): Promise<ApiResponse<T>> {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n    try {\n      const { method = 'GET', body, headers = {} } = options;\n\n      const response = await fetch(`${this.endpoint}${path}`, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          ...headers,\n        },\n        body: body ? JSON.stringify(body) : undefined,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      const result = await response.json();\n\n      return {\n        success: true,\n        data: result,\n      };\n    } catch (error) {\n      clearTimeout(timeoutId);\n      console.error(`REST API request failed (${path}):`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Get routing paths for a swap\n   */\n  async getRoutes(request: GetRoutesRequest): Promise<RoutePath[]> {\n    const queryParams = new URLSearchParams({\n      amount_in: request.amount_in,\n      token_in: request.token_in,\n      token_out: request.token_out,\n    });\n\n    if (request.external !== undefined) {\n      queryParams.append('external', request.external.toString());\n    }\n\n    if (request.chain_uids && request.chain_uids.length > 0) {\n      request.chain_uids.forEach(chainUID => {\n        queryParams.append('chain_uids', chainUID);\n      });\n    }\n\n    const result = await this.request<GetRoutesResponse>(`/routes?${queryParams}`);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to fetch routes');\n    }\n\n    return result.data.paths;\n  }\n\n  /**\n   * Build a swap transaction\n   */\n  async buildSwapTransaction(request: SwapRequest): Promise<TransactionResponse> {\n    const result = await this.request<TransactionResponse>('/swap', {\n      method: 'POST',\n      body: request,\n    });\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to build swap transaction');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Build an add liquidity transaction\n   */\n  async buildAddLiquidityTransaction(request: AddLiquidityRequest): Promise<TransactionResponse> {\n    const result = await this.request<TransactionResponse>('/add_liquidity', {\n      method: 'POST',\n      body: request,\n    });\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to build add liquidity transaction');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Build a remove liquidity transaction\n   */\n  async buildRemoveLiquidityTransaction(request: RemoveLiquidityRequest): Promise<TransactionResponse> {\n    const result = await this.request<TransactionResponse>('/remove_liquidity', {\n      method: 'POST',\n      body: request,\n    });\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to build remove liquidity transaction');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Simulate a swap to get expected output\n   */\n  async simulateSwap(request: {\n    amount_in: string;\n    token_in: string;\n    token_out: string;\n    chain_uid?: string;\n  }): Promise<{ amount_out: string; price_impact: string }> {\n    const queryParams = new URLSearchParams({\n      amount_in: request.amount_in,\n      token_in: request.token_in,\n      token_out: request.token_out,\n    });\n\n    if (request.chain_uid) {\n      queryParams.append('chain_uid', request.chain_uid);\n    }\n\n    const result = await this.request<{ amount_out: string; price_impact: string }>(`/simulate_swap?${queryParams}`);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to simulate swap');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Get optimal route for a swap with the best price\n   */\n  async getBestRoute(request: GetRoutesRequest): Promise<RoutePath | null> {\n    const routes = await this.getRoutes(request);\n\n    if (routes.length === 0) {\n      return null;\n    }\n\n    // Sort by total price impact (lower is better)\n    return routes.sort((a, b) =>\n      parseFloat(a.total_price_impact) - parseFloat(b.total_price_impact)\n    )[0];\n  }\n\n  /**\n   * Get transaction status\n   */\n  async getTransactionStatus(txHash: string, chainUID: string): Promise<{\n    status: 'pending' | 'success' | 'failed';\n    blockHeight?: number;\n    gasUsed?: string;\n    fee?: string;\n  }> {\n    const result = await this.request<{\n      status: 'pending' | 'success' | 'failed';\n      blockHeight?: number;\n      gasUsed?: string;\n      fee?: string;\n    }>(`/transaction/${txHash}?chain_uid=${chainUID}`);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to get transaction status');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Get gas estimate for a transaction\n   */\n  async estimateGas(transaction: TransactionResponse): Promise<{ gasLimit: string; gasPrice: string }> {\n    const result = await this.request<{ gasLimit: string; gasPrice: string }>('/estimate_gas', {\n      method: 'POST',\n      body: transaction,\n    });\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to estimate gas');\n    }\n\n    return result.data;\n  }\n}\n\n// Export a default instance with default config\nexport const euclidRESTClient = new EuclidRESTClient();\n\n// Export factory function for creating configured clients\nexport const createRESTClient = (config?: Partial<EuclidConfig>) => {\n  return new EuclidRESTClient(config);\n};\n","/**\n * Unified API Client for Euclid Protocol\n * Combines GraphQL and REST clients for a single interface\n */\n\nimport { EuclidGraphQLClient, createGraphQLClient } from './graphql-client';\nimport { EuclidRESTClient, createRESTClient } from './rest-client';\nimport type { EuclidConfig } from './env';\nimport type {\n  EuclidChainConfig,\n  TokenMetadata,\n  PoolInfo,\n  UserBalance,\n  RoutePath,\n  SwapRequest,\n  AddLiquidityRequest,\n  RemoveLiquidityRequest,\n  TransactionResponse,\n  CrossChainUser,\n  GetRoutesRequest\n} from './types/api.types';\n\n/**\n * Main API client that provides a unified interface to Euclid Protocol\n * Uses dedicated GraphQL and REST clients under the hood\n */\nexport class EuclidAPIClient {\n  private graphql: EuclidGraphQLClient;\n  private rest: EuclidRESTClient;\n\n  constructor(config?: Partial<EuclidConfig>) {\n    this.graphql = createGraphQLClient(config);\n    this.rest = createRESTClient(config);\n  }\n\n  // ============================================================================\n  // CHAIN & TOKEN METADATA (GraphQL)\n  // ============================================================================\n\n  /**\n   * Get all supported blockchain networks\n   */\n  async getChains(options?: { showAllChains?: boolean; type?: string }): Promise<EuclidChainConfig[]> {\n    return this.graphql.getChains(options);\n  }\n\n  /**\n   * Get token metadata information\n   */\n  async getTokenMetadata(options?: {\n    limit?: number;\n    offset?: number;\n    verified?: boolean;\n    dex?: string[];\n    chainUids?: string[];\n    showVolume?: boolean;\n    search?: string;\n  }): Promise<TokenMetadata[]> {\n    return this.graphql.getTokenMetadata(options);\n  }\n\n  /**\n   * Search for tokens by symbol or name\n   */\n  async searchTokens(searchTerm: string, chainUID?: string): Promise<TokenMetadata[]> {\n    return this.graphql.searchTokens(searchTerm, chainUID);\n  }\n\n  /**\n   * Get a specific token by symbol and chain\n   */\n  async getTokenBySymbol(symbol: string, chainUID: string): Promise<TokenMetadata | null> {\n    return this.graphql.getTokenBySymbol(symbol, chainUID);\n  }\n\n  // ============================================================================\n  // LIQUIDITY POOLS (GraphQL)\n  // ============================================================================\n\n  /**\n   * Get all liquidity pools\n   * @param onlyVerified - Whether to show only verified pools (default: true)\n   */\n  async getAllPools(onlyVerified: boolean = true): Promise<{ success: boolean; data?: PoolInfo[]; error?: string }> {\n    try {\n      const data = await this.graphql.getAllPools(undefined, onlyVerified);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get pools' };\n    }\n  }\n\n  /**\n   * Get pool information for a specific token pair\n   */\n  async getPoolInfo(token1: string, token2: string): Promise<PoolInfo | null> {\n    return this.graphql.getPoolInfo(token1, token2);\n  }\n\n  // ============================================================================\n  // LEGACY METHOD ALIASES FOR BACKWARD COMPATIBILITY\n  // ============================================================================\n\n  /**\n   * @deprecated Use getChains() instead\n   */\n  async getAllChains(showAllChains?: boolean): Promise<{ success: boolean; data?: EuclidChainConfig[]; error?: string }> {\n    try {\n      const data = await this.getChains({ showAllChains });\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get chains' };\n    }\n  }\n\n  /**\n   * @deprecated Use getTokenMetadata() instead\n   */\n  async getAllTokens(): Promise<{ success: boolean; data?: TokenMetadata[]; error?: string }> {\n    try {\n      const data = await this.getTokenMetadata();\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get tokens' };\n    }\n  }\n\n  /**\n   * Get token denominations for a token ID (placeholder - not implemented in Euclid API)\n   */\n  async getTokenDenoms(tokenId: string): Promise<{ success: boolean; data?: { router: { token_denoms: { denoms: string[] } } }; error?: string }> {\n    // This method doesn't exist in the real Euclid API\n    console.warn(`getTokenDenoms(${tokenId}) is not implemented in Euclid API`);\n    return { success: true, data: { router: { token_denoms: { denoms: [] } } } };\n  }\n\n  /**\n   * Get escrow information for a token (placeholder - not implemented in Euclid API)\n   */\n  async getEscrows(tokenId: string): Promise<{ success: boolean; data?: { router: { escrows: unknown[] } }; error?: string }> {\n    // This method doesn't exist in the real Euclid API\n    console.warn(`getEscrows(${tokenId}) is not implemented in Euclid API`);\n    return { success: true, data: { router: { escrows: [] } } };\n  }\n\n  /**\n   * Get balance for a specific address and chain (legacy compatibility)\n   */\n  async getBalance(address: string, chainUID: string): Promise<{ success: boolean; data?: { balance?: { all?: Array<{ denom: string; amount: string }> } }; error?: string }> {\n    try {\n      const balances = await this.getUserBalances({ address, chain_uid: chainUID });\n      const data = {\n        balance: {\n          all: balances.map(b => ({\n            denom: b.token,\n            amount: b.balance\n          }))\n        }\n      };\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get balance' };\n    }\n  }\n\n  // ============================================================================\n  // USER DATA (GraphQL)\n  // ============================================================================\n\n  /**\n   * Get user token balances across all chains\n   */\n  async getUserBalances(user: CrossChainUser): Promise<UserBalance[]> {\n    return this.graphql.getUserBalances(user);\n  }\n\n  // ============================================================================\n  // ROUTING & SWAPS (REST)\n  // ============================================================================\n\n  /**\n   * Get routing paths for a swap\n   */\n  async getRoutes(request: GetRoutesRequest): Promise<RoutePath[]> {\n    return this.rest.getRoutes(request);\n  }\n\n  /**\n   * Legacy method that returns wrapped response format (used by swap controller)\n   */\n  async getRoutesWrapped(request: GetRoutesRequest): Promise<{ success: boolean; data?: { paths: RoutePath[] }; error?: string }> {\n    try {\n      const paths = await this.getRoutes(request);\n      return { success: true, data: { paths } };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get routes' };\n    }\n  }\n\n  /**\n   * Override getRoutes to return wrapped format by default for backward compatibility\n   */\n  async getRoutesLegacy(request: GetRoutesRequest): Promise<{ success: boolean; data?: { paths: RoutePath[] }; error?: string }> {\n    return this.getRoutesWrapped(request);\n  }\n\n  /**\n   * Get the optimal route for a swap\n   */\n  async getBestRoute(request: GetRoutesRequest): Promise<RoutePath | null> {\n    return this.rest.getBestRoute(request);\n  }\n\n  /**\n   * Simulate a swap to get expected output\n   */\n  async simulateSwap(request: {\n    amount_in: string;\n    token_in: string;\n    token_out: string;\n    chain_uid?: string;\n  }): Promise<{ amount_out: string; price_impact: string }> {\n    return this.rest.simulateSwap(request);\n  }\n\n  // ============================================================================\n  // TRANSACTION BUILDING (REST)\n  // ============================================================================\n\n  /**\n   * Create a swap transaction\n   */\n  async createSwapTransaction(request: SwapRequest): Promise<TransactionResponse> {\n    return this.rest.buildSwapTransaction(request);\n  }\n\n  /**\n   * Create a swap transaction with wrapped response\n   */\n  async createSwapTransactionWrapped(request: SwapRequest): Promise<{ success: boolean; data?: TransactionResponse; error?: string }> {\n    try {\n      const data = await this.createSwapTransaction(request);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to create swap transaction' };\n    }\n  }\n\n  /**\n   * Create a swap transaction (legacy method name)\n   */\n  async buildSwapTransaction(request: SwapRequest): Promise<TransactionResponse> {\n    return this.createSwapTransaction(request);\n  }\n\n  /**\n   * Create add liquidity transaction (legacy method name)\n   */\n  async createAddLiquidityTransaction(request: AddLiquidityRequest): Promise<TransactionResponse> {\n    return this.rest.buildAddLiquidityTransaction(request);\n  }\n\n  /**\n   * Create add liquidity transaction with wrapped response\n   */\n  async createAddLiquidityTransactionWrapped(request: AddLiquidityRequest): Promise<{ success: boolean; data?: TransactionResponse; error?: string }> {\n    try {\n      const data = await this.createAddLiquidityTransaction(request);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to create add liquidity transaction' };\n    }\n  }\n\n  /**\n   * Create remove liquidity transaction (legacy method name)\n   */\n  async createRemoveLiquidityTransaction(request: RemoveLiquidityRequest): Promise<TransactionResponse> {\n    return this.rest.buildRemoveLiquidityTransaction(request);\n  }\n\n  /**\n   * Create remove liquidity transaction with wrapped response\n   */\n  async createRemoveLiquidityTransactionWrapped(request: RemoveLiquidityRequest): Promise<{ success: boolean; data?: TransactionResponse; error?: string }> {\n    try {\n      const data = await this.createRemoveLiquidityTransaction(request);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to create remove liquidity transaction' };\n    }\n  }\n\n  /**\n   * Track transaction status (placeholder - not implemented in Euclid API)\n   */\n  async trackTransaction(txHash: string, chainUID: string): Promise<{ status: 'pending' | 'confirmed' | 'failed' }> {\n    // This would typically query blockchain for transaction status\n    console.warn(`trackTransaction(${txHash}, ${chainUID}) not implemented`);\n    return { status: 'pending' };\n  }\n\n  /**\n   * Track transaction status with wrapped response\n   */\n  async trackTransactionWrapped(txHash: string, chainUID: string): Promise<{ success: boolean; data?: { status: 'pending' | 'confirmed' | 'failed' }; error?: string }> {\n    try {\n      const data = await this.trackTransaction(txHash, chainUID);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to track transaction' };\n    }\n  }\n\n  /**\n   * Build an add liquidity transaction\n   */\n  async buildAddLiquidityTransaction(request: AddLiquidityRequest): Promise<TransactionResponse> {\n    return this.rest.buildAddLiquidityTransaction(request);\n  }\n\n  /**\n   * Build a remove liquidity transaction\n   */\n  async buildRemoveLiquidityTransaction(request: RemoveLiquidityRequest): Promise<TransactionResponse> {\n    return this.rest.buildRemoveLiquidityTransaction(request);\n  }\n\n  // ============================================================================\n  // TRANSACTION STATUS & GAS ESTIMATION (REST)\n  // ============================================================================\n\n  /**\n   * Get transaction status\n   */\n  async getTransactionStatus(txHash: string, chainUID: string): Promise<{\n    status: 'pending' | 'success' | 'failed';\n    blockHeight?: number;\n    gasUsed?: string;\n    fee?: string;\n  }> {\n    return this.rest.getTransactionStatus(txHash, chainUID);\n  }\n\n  /**\n   * Estimate gas for a transaction\n   */\n  async estimateGas(transaction: TransactionResponse): Promise<{ gasLimit: string; gasPrice: string }> {\n    return this.rest.estimateGas(transaction);\n  }\n\n  // ============================================================================\n  // CONVENIENCE METHODS\n  // ============================================================================\n\n  /**\n   * Get comprehensive market data\n   */\n  async getMarketData(): Promise<{\n    chains: EuclidChainConfig[];\n    tokens: TokenMetadata[];\n    pools: PoolInfo[];\n  }> {\n    const [chains, tokens, poolsResult] = await Promise.all([\n      this.getChains(),\n      this.getTokenMetadata(),\n      this.getAllPools(),\n    ]);\n\n    const pools = poolsResult.success ? (poolsResult.data || []) : [];\n\n    return { chains, tokens, pools };\n  }\n\n  /**\n   * Get user's complete portfolio\n   */\n  async getUserPortfolio(user: CrossChainUser): Promise<{\n    balances: UserBalance[];\n    chains: EuclidChainConfig[];\n    tokens: TokenMetadata[];\n  }> {\n    const [balances, chains, tokens] = await Promise.all([\n      this.getUserBalances(user),\n      this.getChains(),\n      this.getTokenMetadata(),\n    ]);\n\n    return { balances, chains, tokens };\n  }\n\n  /**\n   * Get quote for a swap with the best route\n   */\n  async getSwapQuote(\n    tokenIn: string,\n    tokenOut: string,\n    amountIn: string,\n    chainUIDs?: string[]\n  ): Promise<{\n    route: RoutePath | null;\n    expectedOutput: string;\n    priceImpact: string;\n  }> {\n    const routeRequest: GetRoutesRequest = {\n      amount_in: amountIn,\n      token_in: tokenIn,\n      token_out: tokenOut,\n      chain_uids: chainUIDs,\n    };\n\n    const [route, simulation] = await Promise.all([\n      this.getBestRoute(routeRequest),\n      this.simulateSwap({\n        amount_in: amountIn,\n        token_in: tokenIn,\n        token_out: tokenOut,\n      }).catch(() => ({ amount_out: '0', price_impact: '0' })),\n    ]);\n\n    return {\n      route,\n      expectedOutput: simulation.amount_out,\n      priceImpact: simulation.price_impact,\n    };\n  }\n}\n\n// Export the default instance\n// Export default instance with default configuration\nexport const apiClient = new EuclidAPIClient();\n\n// Export factory function for creating configured clients\nexport const createAPIClient = (config?: Partial<EuclidConfig>) => {\n  return new EuclidAPIClient(config);\n};\n\n// Re-export types for convenience\nexport type {\n  EuclidChainConfig,\n  TokenMetadata,\n  PoolInfo,\n  UserBalance,\n  RoutePath,\n  SwapRequest,\n  AddLiquidityRequest,\n  RemoveLiquidityRequest,\n  TransactionResponse,\n  CrossChainUser,\n  GetRoutesRequest\n} from './types/api.types';\n","// Chain identifiers\nexport const CHAIN_UIDS = {\n  ETHEREUM: 'ethereum',\n  POLYGON: 'polygon',\n  ARBITRUM: 'arbitrum',\n  OPTIMISM: 'optimism',\n  COSMOS_HUB: 'cosmoshub-4',\n  OSMOSIS: 'osmosis-1',\n  JUNO: 'juno-1',\n  STARGAZE: 'stargaze-1',\n} as const;\n\n// Wallet types\nexport const WALLET_TYPES = {\n  METAMASK: 'metamask',\n  KEPLR: 'keplr',\n  WALLET_CONNECT: 'walletconnect',\n  COINBASE: 'coinbase',\n  OTHER: 'other',\n} as const;\n\n// Transaction types\nexport const TRANSACTION_TYPES = {\n  SWAP: 'swap',\n  ADD_LIQUIDITY: 'add_liquidity',\n  REMOVE_LIQUIDITY: 'remove_liquidity',\n  TRANSFER: 'transfer',\n} as const;\n\n// Transaction statuses\nexport const TRANSACTION_STATUS = {\n  PENDING: 'pending',\n  SUCCESS: 'success',\n  FAILED: 'failed',\n} as const;\n\n// API endpoints\nexport const API_ENDPOINTS = {\n  CHAINS: '/api/chains',\n  TOKENS: '/api/tokens',\n  POOLS: '/api/pools',\n  ROUTES: '/api/routes',\n  BALANCES: '/api/balances',\n  TRANSACTIONS: '/api/transactions',\n  GRAPHQL: '/graphql',\n} as const;\n\n// Local storage keys\nexport const STORAGE_KEYS = {\n  WALLET_PREFERENCES: 'euclid_wallet_preferences',\n  THEME: 'euclid_theme',\n  SLIPPAGE: 'euclid_slippage',\n  TRANSACTION_HISTORY: 'euclid_transaction_history',\n} as const;\n\nimport { DEFAULT_CONFIG } from './env';\n\n// Default configuration values (now sourced from environment)\nexport const DEFAULTS = {\n  SLIPPAGE: DEFAULT_CONFIG.ui.defaultSlippage,\n  ROUTE_REFRESH_INTERVAL: DEFAULT_CONFIG.refreshIntervals.routes,\n  MARKET_DATA_REFRESH_INTERVAL: DEFAULT_CONFIG.refreshIntervals.marketData,\n  BALANCE_REFRESH_INTERVAL: DEFAULT_CONFIG.refreshIntervals.balances,\n  TRANSACTION_TIMEOUT: 300000, // 5 minutes\n} as const;\n\n// UI constants (now sourced from environment)\nexport const UI = {\n  MODAL_Z_INDEX: DEFAULT_CONFIG.ui.zIndex.modal,\n  TOOLTIP_Z_INDEX: DEFAULT_CONFIG.ui.zIndex.tooltip,\n  DROPDOWN_Z_INDEX: DEFAULT_CONFIG.ui.zIndex.dropdown,\n  ANIMATION_DURATION: DEFAULT_CONFIG.ui.animationDuration,\n} as const;\n\n// Validation regex patterns\nexport const PATTERNS = {\n  ETH_ADDRESS: /^0x[a-fA-F0-9]{40}$/,\n  COSMOS_ADDRESS: /^[a-z0-9]{39,59}$/,\n  DECIMAL_NUMBER: /^\\d*\\.?\\d*$/,\n  POSITIVE_NUMBER: /^[+]?([0-9]*[.])?[0-9]+$/,\n} as const;\n\n// Error messages\nexport const ERROR_MESSAGES = {\n  WALLET_NOT_CONNECTED: 'Wallet not connected',\n  INSUFFICIENT_BALANCE: 'Insufficient balance',\n  INVALID_AMOUNT: 'Invalid amount',\n  NO_ROUTE_FOUND: 'No route found for this swap',\n  TRANSACTION_FAILED: 'Transaction failed',\n  NETWORK_ERROR: 'Network error occurred',\n  TIMEOUT: 'Request timeout',\n} as const;\n\n// Success messages\nexport const SUCCESS_MESSAGES = {\n  WALLET_CONNECTED: 'Wallet connected successfully',\n  TRANSACTION_SUBMITTED: 'Transaction submitted',\n  TRANSACTION_CONFIRMED: 'Transaction confirmed',\n  LIQUIDITY_ADDED: 'Liquidity added successfully',\n  LIQUIDITY_REMOVED: 'Liquidity removed successfully',\n} as const;\n\n// Feature flags (now sourced from environment)\nexport const FEATURES = {\n  DARK_MODE: DEFAULT_CONFIG.features.darkMode,\n  ADVANCED_ROUTING: DEFAULT_CONFIG.features.advancedRouting,\n  TRANSACTION_HISTORY: DEFAULT_CONFIG.features.transactionHistory,\n} as const;\n"],"names":["initialState","state","onChange","reset","dispose","actions","getters"],"mappings":"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"}