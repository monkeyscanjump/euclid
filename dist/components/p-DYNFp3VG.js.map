{"file":"p-DYNFp3VG.js","mappings":"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","names":[],"sources":["src/store/market.store.ts"],"sourcesContent":["import { createStore } from '@stencil/store';\nimport type { EuclidChainConfig, TokenMetadata, PoolInfo } from '../utils/types/api.types';\nimport type { MarketState } from '../utils/types/euclid-api.types';\nimport type { BaseStore } from './types';\n\nconst initialState: MarketState = {\n  chains: [],\n  tokens: [],\n  pools: [],\n  prices: {},\n  loading: false,\n  error: null,\n  lastUpdated: 0,\n};\n\nconst { state, onChange, reset, dispose } = createStore(initialState);\n\n// Actions\nconst actions = {\n  setLoading(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setError(error: string | null) {\n    state.error = error;\n  },\n\n  setChains(chains: EuclidChainConfig[]) {\n    state.chains = [...chains];\n    state.lastUpdated = Date.now();\n  },\n\n  setTokens(tokens: TokenMetadata[]) {\n    state.tokens = [...tokens];\n    state.lastUpdated = Date.now();\n  },\n\n  setPools(pools: PoolInfo[]) {\n    state.pools = [...pools];\n    state.lastUpdated = Date.now();\n  },\n\n  setPrices(prices: Record<string, number>) {\n    state.prices = { ...prices };\n    state.lastUpdated = Date.now();\n  },\n\n  addToken(token: TokenMetadata) {\n    state.tokens = [...state.tokens, token];\n  },\n\n  updateToken(tokenId: string, updates: Partial<TokenMetadata>) {\n    state.tokens = state.tokens.map(token =>\n      token.id === tokenId ? { ...token, ...updates } : token\n    );\n  },\n\n  clear() {\n    reset();\n  },\n};\n\n// Getters\nconst getters = {\n  getChain: (chainUID: string) =>\n    state.chains.find(chain => chain.chain_uid === chainUID),\n\n  getToken: (tokenId: string) =>\n    state.tokens.find(token => token.id === tokenId),\n\n  getTokensByChain: (chainUID: string) =>\n    state.tokens.filter(token => token.chain_uid === chainUID),\n\n  getPool: (poolId: string) =>\n    state.pools.find(pool => pool.pool_id === poolId),\n\n  getPoolsForTokenPair: (token1: string, token2: string) =>\n    state.pools.filter(pool =>\n      (pool.token_1 === token1 && pool.token_2 === token2) ||\n      (pool.token_1 === token2 && pool.token_2 === token1)\n    ),\n\n  getPrice: (tokenId: string) =>\n    state.prices[tokenId] || 0,\n\n  isDataStale: (maxAge: number = 5 * 60 * 1000) => { // 5 minutes default\n    if (!state.lastUpdated) return true;\n    return Date.now() - state.lastUpdated > maxAge;\n  },\n};\n\n// Proper store type definition extending BaseStore\nexport interface MarketStore extends BaseStore<MarketState> {\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  setChains: (chains: EuclidChainConfig[]) => void;\n  setTokens: (tokens: TokenMetadata[]) => void;\n  setPools: (pools: PoolInfo[]) => void;\n  setPrices: (prices: Record<string, number>) => void;\n  addToken: (token: TokenMetadata) => void;\n  updateToken: (tokenId: string, updates: Partial<TokenMetadata>) => void;\n  clear: () => void;\n  getChain: (chainUID: string) => EuclidChainConfig | undefined;\n  getToken: (tokenId: string) => TokenMetadata | undefined;\n  getTokensByChain: (chainUID: string) => TokenMetadata[];\n  getPool: (poolId: string) => PoolInfo | undefined;\n  getPoolsForTokenPair: (token1: string, token2: string) => PoolInfo[];\n  getPrice: (tokenId: string) => number;\n  isDataStale: (maxAge?: number) => boolean;\n}\n\nexport const marketStore: MarketStore = {\n  state,\n  onChange,\n  reset,\n  dispose,\n  ...actions,\n  ...getters,\n};\n\n// Expose store globally for debugging and testing\nif (typeof window !== 'undefined') {\n  (window as unknown as { marketStore: MarketStore }).marketStore = marketStore;\n}\n\nexport type { MarketState, EuclidChainConfig, TokenMetadata, PoolInfo };\n"],"version":3}