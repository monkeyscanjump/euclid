{"version":3,"file":"euclid-liquidity-controller.euclid-swap-controller.euclid-tx-tracker-controller.euclid-user-data-controller.euclid-wallet-controller.entry.esm.js","sources":["src/components/core/euclid-liquidity-controller/euclid-liquidity-controller.tsx","src/utils/wallet-adapter.ts","src/components/core/euclid-swap-controller/euclid-swap-controller.tsx","src/components/core/euclid-tx-tracker-controller/euclid-tx-tracker-controller.tsx","src/components/core/euclid-user-data-controller/euclid-user-data-controller.tsx","src/components/core/euclid-wallet-controller/euclid-wallet-controller.tsx"],"sourcesContent":["import { Component, Listen, State, Watch } from '@stencil/core';\nimport { liquidityStore } from '../../../store/liquidity.store';\nimport { marketStore } from '../../../store/market.store';\nimport { walletStore } from '../../../store/wallet.store';\nimport { apiClient } from '../../../utils/api-client';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\n\ninterface TransactionResponse {\n  txHash?: string;\n  transactionHash?: string;\n}\n\n@Component({\n  tag: 'euclid-liquidity-controller',\n})\nexport class EuclidLiquidityController {\n  @State() isInitialized = false;\n\n  async componentDidLoad() {\n    await this.initialize();\n  }\n\n  private async initialize() {\n    console.log('üíß Initializing Liquidity Controller...');\n\n    // Subscribe to liquidity store changes\n    liquidityStore.onChange('selectedPool', () => this.handlePoolChange());\n\n    this.isInitialized = true;\n    console.log('‚úÖ Liquidity Controller initialized');\n  }\n\n  private handlePoolChange() {\n    const { selectedPool } = liquidityStore.state;\n    if (selectedPool) {\n      console.log('üèä Pool selected for liquidity operations:', selectedPool.id);\n    }\n  }\n\n  // Execute add liquidity transaction\n  async executeAddLiquidity(): Promise<{ success: boolean; txHash?: string; error?: string }> {\n    try {\n      const { selectedPool, token1, token2, token1Amount, token2Amount } = liquidityStore.state;\n\n      if (!selectedPool || !token1 || !token2 || !token1Amount || !token2Amount) {\n        return { success: false, error: 'Missing required liquidity parameters' };\n      }\n\n      // Check if wallets are connected for both tokens\n      const token1Wallet = walletStore.getWallet(token1.chainUID);\n      const token2Wallet = walletStore.getWallet(token2.chainUID);\n\n      if (!token1Wallet?.isConnected) {\n        return { success: false, error: `Wallet not connected for ${token1.symbol}` };\n      }\n\n      if (!token2Wallet?.isConnected) {\n        return { success: false, error: `Wallet not connected for ${token2.symbol}` };\n      }\n\n      // Check sufficient balances\n      if (!walletStore.hasSufficientBalance(token1.chainUID, token1.id, token1Amount)) {\n        return { success: false, error: `Insufficient ${token1.symbol} balance` };\n      }\n\n      if (!walletStore.hasSufficientBalance(token2.chainUID, token2.id, token2Amount)) {\n        return { success: false, error: `Insufficient ${token2.symbol} balance` };\n      }\n\n      liquidityStore.setAddingLiquidity(true);\n\n      console.log('üíß Executing add liquidity...', {\n        pool: selectedPool.id,\n        token1: token1.symbol,\n        token2: token2.symbol,\n        amount1: token1Amount,\n        amount2: token2Amount,\n      });\n\n      // Execute add liquidity via API\n      const result = await apiClient.createAddLiquidityTransactionWrapped({\n        slippage_tolerance_bps: 50, // 0.5% = 50 basis points\n        timeout: (Math.floor(Date.now() / 1000) + 1200).toString(), // 20 minutes\n        pair_info: {\n          token_1: {\n            token: token1.id,\n            amount: token1Amount,\n            token_type: token1.token_type || { native: { denom: token1.id } }\n          },\n          token_2: {\n            token: token2.id,\n            amount: token2Amount,\n            token_type: token2.token_type || { native: { denom: token2.id } }\n          }\n        },\n        sender: {\n          address: token1Wallet.address,\n          chain_uid: token1.chainUID\n        }\n      });\n\n      if (result.success && result.data) {\n        const transactionData = result.data as TransactionResponse;\n        const { txHash } = transactionData;\n\n                // Get wallet info and track the transaction\n        const connectedWallets = walletStore.getAllConnectedWallets();\n        const walletInfo = connectedWallets[0]; // Use primary wallet\n        const primaryChain = walletInfo.chainUID;\n\n        walletStore.addTransaction(primaryChain, {\n          txHash: txHash || (result.data as TransactionResponse)?.transactionHash || 'pending',\n          timestamp: Date.now(),\n          type: 'add_liquidity'\n        });\n\n        // Emit global event for transaction tracking\n        dispatchEuclidEvent(EUCLID_EVENTS.TRANSACTION.SUBMITTED, {\n          txHash,\n          chainUID: primaryChain,\n          type: 'add_liquidity',\n        });\n\n        console.log('‚úÖ Add liquidity transaction submitted:', txHash);\n        return { success: true, txHash };\n      } else {\n        return { success: false, error: result.error || 'Add liquidity execution failed' };\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      console.error('‚ùå Add liquidity execution error:', errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      liquidityStore.setAddingLiquidity(false);\n    }\n  }\n\n  // Execute remove liquidity transaction\n  async executeRemoveLiquidity(\n    poolId: string,\n    lpTokenAmount: string\n  ): Promise<{ success: boolean; txHash?: string; error?: string }> {\n    try {\n      const position = liquidityStore.getPosition(poolId);\n      if (!position) {\n        return { success: false, error: 'Liquidity position not found' };\n      }\n\n      // Get the pool info from market store\n      const allPools = marketStore.state.pools;\n      const pool = allPools.find(p => p.id === poolId);\n\n      if (!pool) {\n        return { success: false, error: 'Pool not found' };\n      }\n\n      // Get token metadata to find chain info\n      const tokens = marketStore.state.tokens;\n      const token1 = tokens.find(t => t.address === pool.token_1);\n      if (!token1) {\n        return { success: false, error: 'Token metadata not found' };\n      }\n\n      const primaryWallet = walletStore.getWallet(token1.chain_uid);\n\n      if (!primaryWallet?.isConnected) {\n        return { success: false, error: `Wallet not connected for ${token1.chain_uid}` };\n      }\n\n      // Check sufficient LP token balance\n      const lpBalance = walletStore.getWalletBalance(token1.chain_uid, `lp-${poolId}`);\n      if (!lpBalance || BigInt(lpBalance.amount) < BigInt(lpTokenAmount)) {\n        return { success: false, error: 'Insufficient LP token balance' };\n      }\n\n      liquidityStore.setRemovingLiquidity(true);\n\n      console.log('üíß Executing remove liquidity...', {\n        poolId,\n        lpAmount: lpTokenAmount,\n      });\n\n      // Execute remove liquidity via API\n      const result = await apiClient.createRemoveLiquidityTransactionWrapped({\n        slippage_tolerance_bps: 50, // 0.5% = 50 basis points\n        timeout: (Math.floor(Date.now() / 1000) + 1200).toString(), // 20 minutes\n        lp_token_amount: lpTokenAmount,\n        sender: {\n          address: primaryWallet.address,\n          chain_uid: token1.chain_uid\n        }\n      });\n\n      if (result.success && result.data) {\n        const transactionData = result.data as TransactionResponse;\n        const { txHash } = transactionData;\n\n        // Add transaction to wallet store\n        walletStore.addTransaction(token1.chain_uid, {\n          txHash,\n          timestamp: Date.now(),\n          type: 'remove_liquidity'\n        });\n\n        // Emit global event for transaction tracking\n        dispatchEuclidEvent(EUCLID_EVENTS.TRANSACTION.SUBMITTED, {\n          txHash,\n          chainUID: token1.chain_uid,\n          type: 'remove_liquidity',\n        });\n\n        console.log('‚úÖ Remove liquidity transaction submitted:', txHash);\n        return { success: true, txHash };\n      } else {\n        return { success: false, error: result.error || 'Remove liquidity execution failed' };\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      console.error('‚ùå Remove liquidity execution error:', errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      liquidityStore.setRemovingLiquidity(false);\n    }\n  }\n\n  // Event listeners\n  @Listen(EUCLID_EVENTS.LIQUIDITY.ADD_REQUEST, { target: 'window' })\n  async handleAddLiquidityExecution() {\n    console.log('üíß Add liquidity execution requested via event');\n    const result = await this.executeAddLiquidity();\n\n    // Emit result event\n    if (result.success) {\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.ADD_SUCCESS, {\n        txHash: result.txHash,\n      });\n    } else {\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.ADD_FAILED, {\n        error: result.error,\n      });\n    }\n  }\n\n  @Listen(EUCLID_EVENTS.LIQUIDITY.REMOVE_REQUEST, { target: 'window' })\n  async handleRemoveLiquidityExecution(event: CustomEvent<{ poolId: string; lpTokenAmount: string }>) {\n    console.log('üíß Remove liquidity execution requested via event');\n    const { poolId, lpTokenAmount } = event.detail;\n    const result = await this.executeRemoveLiquidity(poolId, lpTokenAmount);\n\n    // Emit result event\n    if (result.success) {\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.REMOVE_SUCCESS, {\n        txHash: result.txHash,\n      });\n    } else {\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.REMOVE_FAILED, {\n        error: result.error,\n      });\n    }\n  }\n\n  @Watch('isInitialized')\n  onInitializedChange(newValue: boolean) {\n    if (newValue) {\n      console.log('üíß Liquidity Controller ready for operations');\n    }\n  }\n\n  render() {\n    // This is a headless controller - no visual output\n    return null;\n  }\n}\n","/**\n * Wallet Adapter Utility\n *\n * Abstracts the actual connection logic for different wallet types.\n * Used by euclid-wallet-controller to maintain separation of concerns.\n */\n\nimport type { EuclidChainConfig } from './types/api.types';\n\nexport type WalletType = 'keplr' | 'metamask' | 'phantom' | 'cosmostation' | 'walletconnect' | 'other';\n\n// Declare global window extensions for wallets\ndeclare global {\n  interface Window {\n    keplr?: {\n      enable: (chainId: string) => Promise<void>;\n      experimentalSuggestChain: (chainInfo: unknown) => Promise<void>;\n      getOfflineSigner: (chainId: string) => {\n        getAccounts: () => Promise<Array<{ address: string }>>;\n      };\n      getKey: (chainId: string) => Promise<{ bech32Address: string }>;\n    };\n    ethereum?: {\n      isMetaMask?: boolean;\n      request: (args: { method: string; params?: unknown[] }) => Promise<unknown>;\n    };\n    cosmostation?: {\n      cosmos: {\n        request: (args: { method: string; params: unknown }) => Promise<unknown>;\n      };\n    };\n    solana?: {\n      isPhantom?: boolean;\n      connect: () => Promise<{ publicKey: { toString: () => string } }>;\n      disconnect: () => Promise<void>;\n    };\n  }\n}export interface WalletConnectionResult {\n  success: boolean;\n  address?: string;\n  chainId?: string;\n  error?: string;\n}\n\nexport interface WalletAdapter {\n  isInstalled(): boolean;\n  connect(chainConfig: EuclidChainConfig): Promise<WalletConnectionResult>;\n  disconnect(chainUID: string): Promise<void>;\n  getAddress(chainUID: string): Promise<string | null>;\n  switchChain(chainConfig: EuclidChainConfig): Promise<boolean>;\n}\n\n// Keplr Wallet Adapter\nexport class KeplrAdapter implements WalletAdapter {\n  private get keplr() {\n    return window.keplr;\n  }\n\n  isInstalled(): boolean {\n    return !!window.keplr;\n  }\n\n  async connect(chainConfig: EuclidChainConfig): Promise<WalletConnectionResult> {\n    try {\n      if (!this.isInstalled()) {\n        return { success: false, error: 'Keplr wallet not installed' };\n      }\n\n      // Suggest chain if not already added\n      if (chainConfig.type === 'Cosmwasm') {\n        try {\n          await this.keplr.experimentalSuggestChain({\n            chainId: chainConfig.chain_id,\n            chainName: chainConfig.display_name,\n            rpc: 'https://rpc.cosmos.network', // Default RPC\n            rest: 'https://api.cosmos.network', // Default REST\n            bip44: { coinType: 118 },\n            bech32Config: {\n              bech32PrefixAccAddr: this.getAddressPrefix(chainConfig.chain_id),\n              bech32PrefixAccPub: this.getAddressPrefix(chainConfig.chain_id) + 'pub',\n              bech32PrefixValAddr: this.getAddressPrefix(chainConfig.chain_id) + 'valoper',\n              bech32PrefixValPub: this.getAddressPrefix(chainConfig.chain_id) + 'valoperpub',\n              bech32PrefixConsAddr: this.getAddressPrefix(chainConfig.chain_id) + 'valcons',\n              bech32PrefixConsPub: this.getAddressPrefix(chainConfig.chain_id) + 'valconspub'\n            },\n            currencies: [{\n              coinDenom: 'ATOM', // Default\n              coinMinimalDenom: 'uatom',\n              coinDecimals: 6,\n            }],\n            feeCurrencies: [{\n              coinDenom: 'ATOM', // Default\n              coinMinimalDenom: 'uatom',\n              coinDecimals: 6,\n            }],\n            stakeCurrency: {\n              coinDenom: 'ATOM', // Default\n              coinMinimalDenom: 'uatom',\n              coinDecimals: 6,\n            }\n          });\n        } catch (suggestError) {\n          console.warn('Failed to suggest chain to Keplr:', suggestError);\n        }\n      }\n\n      // Enable the chain\n      await this.keplr.enable(chainConfig.chain_id);\n\n      // Get the offline signer and accounts\n      const offlineSigner = this.keplr.getOfflineSigner(chainConfig.chain_id);\n      const accounts = await (offlineSigner as { getAccounts: () => Promise<Array<{ address: string }>> }).getAccounts();\n\n      if (accounts.length === 0) {\n        return { success: false, error: 'No accounts found' };\n      }\n\n      return {\n        success: true,\n        address: accounts[0].address,\n        chainId: chainConfig.chain_id,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to connect to Keplr',\n      };\n    }\n  }\n\n  async disconnect(chainUID: string): Promise<void> {\n    // Keplr doesn't have a programmatic disconnect method\n    // The user needs to disconnect from the Keplr extension directly\n    console.log('Keplr disconnect requested for:', chainUID);\n  }\n\n  async getAddress(chainUID: string): Promise<string | null> {\n    try {\n      if (!this.isInstalled()) return null;\n\n      // Use Keplr's getKey method to get the address\n      const key = await (this.keplr as unknown as { getKey: (chainId: string) => Promise<{ bech32Address: string }> }).getKey(chainUID);\n      return key.bech32Address;\n    } catch {\n      return null;\n    }\n  }\n\n  async switchChain(chainConfig: EuclidChainConfig): Promise<boolean> {\n    try {\n      await this.keplr.enable(chainConfig.chain_id);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  private getAddressPrefix(chainId: string): string {\n    // Common Cosmos chain prefixes\n    const prefixes: Record<string, string> = {\n      'cosmoshub-4': 'cosmos',\n      'osmosis-1': 'osmo',\n      'juno-1': 'juno',\n      'stargaze-1': 'stars',\n    };\n    return prefixes[chainId] || 'cosmos';\n  }\n}\n\n// MetaMask Wallet Adapter\nexport class MetaMaskAdapter implements WalletAdapter {\n  private get ethereum() {\n    return window.ethereum;\n  }\n\n  isInstalled(): boolean {\n    return !!window.ethereum && window.ethereum.isMetaMask;\n  }\n\n  async connect(chainConfig: EuclidChainConfig): Promise<WalletConnectionResult> {\n    try {\n      if (!this.isInstalled()) {\n        return { success: false, error: 'MetaMask not installed' };\n      }\n\n      if (chainConfig.type !== 'EVM') {\n        return { success: false, error: 'MetaMask only supports EVM chains' };\n      }\n\n      // Request account access\n      const accounts = await this.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n\n      if (!Array.isArray(accounts) || accounts.length === 0) {\n        return { success: false, error: 'No accounts found' };\n      }\n\n      // Switch to or add the correct network\n      const switched = await this.switchChain(chainConfig);\n      if (!switched) {\n        return { success: false, error: 'Failed to switch network' };\n      }\n\n      return {\n        success: true,\n        address: accounts[0],\n        chainId: chainConfig.chain_id,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to connect to MetaMask',\n      };\n    }\n  }\n\n  async disconnect(_chainUID: string): Promise<void> {\n    // MetaMask doesn't have a programmatic disconnect method\n    // The connection persists until the user disconnects from MetaMask directly\n    // Parameter kept for interface consistency but not used in MetaMask\n  }\n\n  async getAddress(_chainUID: string): Promise<string | null> {\n    try {\n      if (!this.isInstalled()) return null;\n\n      const accounts = await this.ethereum.request({\n        method: 'eth_accounts'\n      });\n      return Array.isArray(accounts) && accounts.length > 0 ? accounts[0] : null;\n    } catch {\n      return null;\n    }\n  }\n\n  async switchChain(chainConfig: EuclidChainConfig): Promise<boolean> {\n    try {\n      const chainIdHex = `0x${parseInt(chainConfig.chain_id).toString(16)}`;\n\n      // Try to switch to the chain\n      try {\n        await this.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: chainIdHex }],\n        });\n        return true;\n      } catch (switchError: unknown) {\n        // Chain not added to MetaMask, try to add it\n        if ((switchError as { code?: number }).code === 4902) {\n          await this.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: chainIdHex,\n              chainName: chainConfig.display_name,\n              rpcUrls: ['https://rpc.example.com'], // Default RPC\n              nativeCurrency: {\n                name: 'ETH',\n                symbol: 'ETH',\n                decimals: 18,\n              },\n              blockExplorerUrls: chainConfig.explorer_url ? [chainConfig.explorer_url] : [],\n            }],\n          });\n          return true;\n        }\n        throw switchError;\n      }\n    } catch {\n      return false;\n    }\n  }\n}\n\n// Cosmostation Adapter (similar to Keplr but for Cosmostation wallet)\nexport class CosmostationAdapter implements WalletAdapter {\n  private get cosmostation() {\n    return window.cosmostation;\n  }\n\n  isInstalled(): boolean {\n    return !!window.cosmostation;\n  }\n\n  async connect(chainConfig: EuclidChainConfig): Promise<WalletConnectionResult> {\n    try {\n      if (!this.isInstalled()) {\n        return { success: false, error: 'Cosmostation wallet not installed' };\n      }\n\n      if (chainConfig.type !== 'Cosmwasm') {\n        return { success: false, error: 'Cosmostation only supports Cosmos chains' };\n      }\n\n      const account = await this.cosmostation.cosmos.request({\n        method: 'cos_requestAccount',\n        params: { chainName: chainConfig.chain_id },\n      });\n\n      return {\n        success: true,\n        address: (account as {address: string}).address,\n        chainId: chainConfig.chain_id,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to connect to Cosmostation',\n      };\n    }\n  }\n\n  async disconnect(chainUID: string): Promise<void> {\n    console.log('Cosmostation disconnect requested for:', chainUID);\n  }\n\n  async getAddress(chainUID: string): Promise<string | null> {\n    try {\n      if (!this.isInstalled()) return null;\n\n      const account = await this.cosmostation.cosmos.request({\n        method: 'cos_account',\n        params: { chainName: chainUID },\n      });\n      return (account as {address?: string})?.address || null;\n    } catch {\n      return null;\n    }\n  }\n\n  async switchChain(_chainConfig: EuclidChainConfig): Promise<boolean> {\n    // Cosmostation handles chain switching automatically\n    return true;\n  }\n}\n\n// Phantom Wallet Adapter\nexport class PhantomAdapter implements WalletAdapter {\n  private get phantom() {\n    return (window as { phantom?: { ethereum?: { request: (args: { method: string; params?: unknown[] }) => Promise<unknown> } } }).phantom?.ethereum;\n  }\n\n  isInstalled(): boolean {\n    return !!this.phantom;\n  }\n\n  async connect(chainConfig: EuclidChainConfig): Promise<WalletConnectionResult> {\n    try {\n      if (!this.isInstalled()) {\n        return { success: false, error: 'Phantom wallet not installed' };\n      }\n\n      if (chainConfig.type !== 'EVM') {\n        return { success: false, error: 'Phantom only supports EVM chains' };\n      }\n\n      // Request account access\n      const accounts = await this.phantom.request({\n        method: 'eth_requestAccounts'\n      });\n\n      if (!Array.isArray(accounts) || accounts.length === 0) {\n        return { success: false, error: 'No accounts found' };\n      }\n\n      return {\n        success: true,\n        address: accounts[0],\n        chainId: chainConfig.chain_id,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to connect to Phantom',\n      };\n    }\n  }\n\n  async disconnect(_chainUID: string): Promise<void> {\n    // Phantom doesn't have a programmatic disconnect method\n  }\n\n  async getAddress(_chainUID: string): Promise<string | null> {\n    try {\n      if (!this.isInstalled()) return null;\n\n      const accounts = await this.phantom.request({\n        method: 'eth_accounts'\n      });\n      return Array.isArray(accounts) && accounts.length > 0 ? accounts[0] : null;\n    } catch {\n      return null;\n    }\n  }\n\n  async switchChain(chainConfig: EuclidChainConfig): Promise<boolean> {\n    try {\n      const chainIdHex = `0x${parseInt(chainConfig.chain_id).toString(16)}`;\n\n      await this.phantom.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: chainIdHex }],\n      });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\n// Wallet Adapter Factory\nexport class WalletAdapterFactory {\n  private static adapters: Map<WalletType, WalletAdapter> = new Map();\n\n  static {\n    this.adapters.set('keplr', new KeplrAdapter());\n    this.adapters.set('metamask', new MetaMaskAdapter());\n    this.adapters.set('phantom', new PhantomAdapter());\n    this.adapters.set('cosmostation', new CosmostationAdapter());\n  }\n\n  static getAdapter(walletType: WalletType): WalletAdapter | null {\n    return this.adapters.get(walletType) || null;\n  }\n\n  static getAvailableWallets(): Array<{ type: WalletType; installed: boolean }> {\n    return Array.from(this.adapters.entries()).map(([type, adapter]) => ({\n      type,\n      installed: adapter.isInstalled(),\n    }));\n  }\n\n  static async connectWallet(\n    walletType: WalletType,\n    chainConfig: EuclidChainConfig\n  ): Promise<WalletConnectionResult> {\n    const adapter = this.getAdapter(walletType);\n    if (!adapter) {\n      return { success: false, error: `Adapter not found for ${walletType}` };\n    }\n\n    return adapter.connect(chainConfig);\n  }\n\n  static async disconnectWallet(walletType: WalletType, chainUID: string): Promise<void> {\n    const adapter = this.getAdapter(walletType);\n    if (adapter) {\n      await adapter.disconnect(chainUID);\n    }\n  }\n}\n","import { Component, Listen, State, Watch } from '@stencil/core';\nimport { swapStore } from '../../../store/swap.store';\nimport { walletStore } from '../../../store/wallet.store';\nimport { apiClient } from '../../../utils/api-client';\nimport { WalletAdapterFactory } from '../../../utils/wallet-adapter';\nimport { DEFAULTS } from '../../../utils/constants';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\n\n@Component({\n  tag: 'euclid-swap-controller',\n})\nexport class EuclidSwapController {\n  @State() isInitialized = false;\n  private routePollingInterval: number;\n  private routePollingActive = false;\n\n  async componentDidLoad() {\n    await this.initialize();\n  }\n\n  disconnectedCallback() {\n    this.stopRoutePolling();\n  }\n\n  private async initialize() {\n    console.log('üîÑ Initializing Swap Controller...');\n\n    // Subscribe to swap store changes for smart polling\n    swapStore.onChange('fromToken', () => this.handleTokenChange());\n    swapStore.onChange('toToken', () => this.handleTokenChange());\n    swapStore.onChange('fromAmount', () => this.handleAmountChange());\n\n    this.isInitialized = true;\n    console.log('‚úÖ Swap Controller initialized');\n  }\n\n  private handleTokenChange() {\n    // Clear existing routes when tokens change\n    swapStore.setRoutes([]);\n    swapStore.setSelectedRoute(undefined);\n    this.stopRoutePolling();\n\n    // Start polling if we have both tokens and an amount\n    if (swapStore.state.fromToken && swapStore.state.toToken && swapStore.state.fromAmount) {\n      this.startRoutePolling();\n    }\n  }\n\n  private handleAmountChange() {\n    const { fromToken, toToken, fromAmount } = swapStore.state;\n\n    if (fromToken && toToken && fromAmount && parseFloat(fromAmount) > 0) {\n      // Debounce the route fetching\n      this.debounceRouteFetch();\n    } else {\n      this.stopRoutePolling();\n      swapStore.setRoutes([]);\n    }\n  }\n\n  private debounceTimeout: number;\n\n  private debounceRouteFetch() {\n    if (this.debounceTimeout) {\n      clearTimeout(this.debounceTimeout);\n    }\n\n    this.debounceTimeout = window.setTimeout(() => {\n      this.startRoutePolling();\n    }, 500); // 500ms debounce\n  }\n\n  private startRoutePolling() {\n    if (this.routePollingActive) return;\n\n    console.log('üîÑ Starting route polling...');\n    this.routePollingActive = true;\n\n    // Fetch routes immediately\n    this.fetchRoutes();\n\n    // Set up periodic polling\n    this.routePollingInterval = window.setInterval(() => {\n      this.fetchRoutes();\n    }, DEFAULTS.ROUTE_REFRESH_INTERVAL);\n  }\n\n  private stopRoutePolling() {\n    if (!this.routePollingActive) return;\n\n    console.log('‚èπÔ∏è Stopping route polling...');\n    this.routePollingActive = false;\n\n    if (this.routePollingInterval) {\n      clearInterval(this.routePollingInterval);\n    }\n  }\n\n  private async fetchRoutes() {\n    const { fromToken, toToken, fromAmount } = swapStore.state;\n\n    if (!fromToken || !toToken || !fromAmount || parseFloat(fromAmount) <= 0) {\n      return;\n    }\n\n    try {\n      swapStore.setLoadingRoutes(true);\n\n      console.log('üõ£Ô∏è Fetching swap routes:', {\n        from: fromToken.symbol,\n        to: toToken.symbol,\n        amount: fromAmount,\n      });\n\n      // Call the routes API\n      const response = await apiClient.getRoutesWrapped({\n        amount_in: fromAmount,\n        token_in: fromToken.id,\n        token_out: toToken.id,\n        external: true,\n      });\n\n      if (response.success && response.data) {\n        const routePaths = response.data.paths || [];\n\n        // Store the RoutePath[] directly\n        swapStore.setRoutes(routePaths);\n\n        // Auto-select the best route (first one, typically best by default)\n        if (routePaths.length > 0 && !swapStore.state.selectedRoute) {\n          swapStore.setSelectedRoute(routePaths[0]);\n        }\n\n        console.log(`‚úÖ Found ${routePaths.length} swap routes`);\n      } else {\n        console.warn('‚ö†Ô∏è Failed to fetch routes:', response.error);\n        swapStore.setRoutes([]);\n      }\n    } catch (error) {\n      console.error('‚ùå Error fetching routes:', error);\n      swapStore.setRoutes([]);\n    } finally {\n      swapStore.setLoadingRoutes(false);\n    }\n  }\n\n  private getUserAddressForChain(chainUID: string): string | undefined {\n    const wallet = walletStore.getWallet(chainUID);\n    return wallet?.address;\n  }\n\n  // Execute swap transaction\n  async executeSwap(): Promise<{ success: boolean; txHash?: string; error?: string }> {\n    try {\n      const { fromToken, toToken, fromAmount, selectedRoute, slippage } = swapStore.state;\n\n      if (!fromToken || !toToken || !fromAmount || !selectedRoute) {\n        return { success: false, error: 'Missing required swap parameters' };\n      }\n\n      // Check if wallet is connected for the required chain\n      const wallet = walletStore.getWallet(fromToken.chainUID);\n      if (!wallet?.isConnected) {\n        return { success: false, error: `Wallet not connected for ${fromToken.chainUID}` };\n      }\n\n      // Check sufficient balance\n      if (!walletStore.hasSufficientBalance(fromToken.chainUID, fromToken.id, fromAmount)) {\n        return { success: false, error: 'Insufficient balance' };\n      }\n\n      swapStore.setSwapping(true);\n\n      console.log('üîÑ Executing swap...', {\n        from: fromToken.symbol,\n        to: toToken.symbol,\n        amount: fromAmount,\n        route: selectedRoute.id,\n      });\n\n      // Get the wallet adapter for signing\n      const walletAdapter = WalletAdapterFactory.getAdapter(wallet.type);\n      if (!walletAdapter) {\n        return { success: false, error: `Wallet adapter not found for ${wallet.type}` };\n      }\n\n      // Execute the swap via API - create a basic SwapRequest structure\n      const swapResult = await apiClient.createSwapTransactionWrapped({\n        amount_in: fromAmount,\n        asset_in: {\n          token: fromToken.id,\n          token_type: { native: { denom: fromToken.id } }\n        },\n        slippage: slippage.toString(),\n        minimum_receive: this.calculateMinimumReceived(selectedRoute.outputAmount, slippage),\n        sender: {\n          address: wallet.address,\n          chain_uid: fromToken.chain_uid || fromToken.chainUID\n        },\n        swap_path: {\n          path: selectedRoute.path || []\n        },\n        timeout: (Math.floor(Date.now() / 1000) + 1200).toString() // 20 minutes from now\n      });\n\n      if (swapResult.success && swapResult.data) {\n        const txHash = `swap_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n        // Add transaction to wallet store\n        walletStore.addTransaction(fromToken.chainUID, {\n          txHash,\n          timestamp: Date.now(),\n          type: 'swap'\n        });\n\n        // Emit global event for transaction tracking\n        dispatchEuclidEvent(EUCLID_EVENTS.TRANSACTION.SUBMITTED, {\n          txHash,\n          chainUID: fromToken.chainUID,\n          type: 'swap',\n        });\n\n        console.log('‚úÖ Swap transaction submitted:', txHash);\n        return { success: true, txHash };\n      } else {\n        return { success: false, error: swapResult.error || 'Swap execution failed' };\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      console.error('‚ùå Swap execution error:', errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      swapStore.setSwapping(false);\n    }\n  }\n\n  private calculateMinimumReceived(outputAmount: string, slippage: number): string {\n    try {\n      const amount = BigInt(outputAmount);\n      const slippageMultiplier = BigInt(Math.floor((100 - slippage) * 100)); // Convert to basis points\n      const minimumReceived = (amount * slippageMultiplier) / BigInt(10000);\n      return minimumReceived.toString();\n    } catch {\n      return outputAmount; // Fallback to original amount\n    }\n  }\n\n  // Event listeners\n  @Listen(EUCLID_EVENTS.SWAP.EXECUTE_REQUEST, { target: 'window' })\n  async handleSwapExecution() {\n    console.log('üîÑ Swap execution requested via event');\n    const result = await this.executeSwap();\n\n    // Emit result event\n    if (result.success) {\n      dispatchEuclidEvent(EUCLID_EVENTS.SWAP.EXECUTE_SUCCESS, {\n        txHash: result.txHash,\n      });\n    } else {\n      dispatchEuclidEvent(EUCLID_EVENTS.SWAP.EXECUTE_FAILED, {\n        error: result.error,\n      });\n    }\n  }\n\n  @Listen(EUCLID_EVENTS.SWAP.ROUTES_REFRESH, { target: 'window' })\n  handleRouteRefresh() {\n    console.log('üîÑ Manual route refresh requested');\n    this.fetchRoutes();\n  }\n\n  @Listen(EUCLID_EVENTS.SWAP.ROUTES_STOP_POLLING, { target: 'window' })\n  handleStopPolling() {\n    this.stopRoutePolling();\n  }\n\n  @Listen(EUCLID_EVENTS.SWAP.ROUTES_START_POLLING, { target: 'window' })\n  handleStartPolling() {\n    this.startRoutePolling();\n  }\n\n  @Watch('isInitialized')\n  onInitializedChange(newValue: boolean) {\n    if (newValue) {\n      console.log('üìä Swap Controller ready for route polling');\n    }\n  }\n\n  render() {\n    // This is a headless controller - no visual output\n    return null;\n  }\n}\n","import { Component, Listen, State, Watch } from '@stencil/core';\nimport { walletStore } from '../../../store/wallet.store';\nimport { apiClient } from '../../../utils/api-client';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\n\n@Component({\n  tag: 'euclid-tx-tracker-controller',\n})\nexport class EuclidTxTrackerController {\n  @State() isInitialized = false;\n  private trackingTransactions: Map<string, { chainUID: string; type: string; pollCount: number }> = new Map();\n  private trackingInterval: number;\n\n  async componentDidLoad() {\n    await this.initialize();\n  }\n\n  disconnectedCallback() {\n    this.stopTracking();\n  }\n\n  private async initialize() {\n    console.log('üîç Initializing Transaction Tracker Controller...');\n\n    // Start periodic tracking\n    this.startTracking();\n\n    this.isInitialized = true;\n    console.log('‚úÖ Transaction Tracker Controller initialized');\n  }\n\n  private startTracking() {\n    // Check transactions every 10 seconds\n    this.trackingInterval = window.setInterval(() => {\n      this.checkPendingTransactions();\n    }, 10000);\n  }\n\n  private stopTracking() {\n    if (this.trackingInterval) {\n      clearInterval(this.trackingInterval);\n    }\n  }\n\n  // Track a specific transaction\n  async trackTransaction(\n    txHash: string,\n    chainUID: string,\n    type: 'swap' | 'add_liquidity' | 'remove_liquidity' | 'transfer'\n  ): Promise<void> {\n    console.log('üîç Starting to track transaction:', { txHash, chainUID, type });\n\n    this.trackingTransactions.set(txHash, { chainUID, type, pollCount: 0 });\n\n    // Check immediately\n    await this.checkTransactionStatus(txHash, chainUID, type);\n  }\n\n  private async checkPendingTransactions() {\n    const promises = Array.from(this.trackingTransactions.entries()).map(\n      ([txHash, { chainUID, type, pollCount }]) =>\n        this.checkTransactionStatus(txHash, chainUID, type, pollCount)\n    );\n\n    await Promise.allSettled(promises);\n  }\n\n  private async checkTransactionStatus(\n    txHash: string,\n    chainUID: string,\n    type: string,\n    currentPollCount = 0\n  ): Promise<void> {\n    try {\n      console.log(`üîç Checking transaction status: ${txHash}`);\n\n      const response = await apiClient.trackTransactionWrapped(txHash, chainUID);\n\n      if (response.success && response.data) {\n        const { status } = response.data;\n\n        // Update transaction status in wallet store\n        walletStore.updateTransactionStatus(chainUID, txHash, status as 'pending' | 'confirmed' | 'failed');\n\n        if (status === 'confirmed' || status === 'failed') {\n          // Transaction is final, stop tracking\n          this.trackingTransactions.delete(txHash);\n\n          // Emit global event with final status\n          dispatchEuclidEvent(EUCLID_EVENTS.TRANSACTION.FINALIZED, {\n            txHash,\n            chainUID,\n            type,\n            status,\n          });\n\n          console.log(`‚úÖ Transaction finalized: ${txHash} - Status: ${status}`);\n\n          // If successful, refresh user data to update balances/positions\n          if (status === 'confirmed') {\n            this.refreshUserDataAfterSuccess(chainUID, type);\n          }\n        } else {\n          // Still pending, continue tracking with incremented poll count\n          const newPollCount = currentPollCount + 1;\n\n          // Stop tracking after 120 polls (20 minutes with 10s intervals)\n          if (newPollCount >= 120) {\n            console.warn(`‚ö†Ô∏è Transaction tracking timeout: ${txHash}`);\n            this.trackingTransactions.delete(txHash);\n\n            // Mark as failed due to timeout\n            walletStore.updateTransactionStatus(chainUID, txHash, 'failed');\n\n            dispatchEuclidEvent(EUCLID_EVENTS.TRANSACTION.TIMEOUT, {\n              txHash,\n              chainUID,\n              type\n            });\n          } else {\n            this.trackingTransactions.set(txHash, { chainUID, type, pollCount: newPollCount });\n          }\n        }\n      } else {\n        console.warn(`‚ö†Ô∏è Failed to check transaction status: ${txHash}`, response.error);\n      }\n    } catch (error) {\n      console.error(`‚ùå Error checking transaction status: ${txHash}`, error);\n    }\n  }\n\n  private refreshUserDataAfterSuccess(chainUID: string, type: string) {\n    // Emit events to refresh relevant data after successful transactions\n    dispatchEuclidEvent(EUCLID_EVENTS.USER.REFRESH_DATA);\n\n    if (type === 'add_liquidity' || type === 'remove_liquidity') {\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.POSITIONS_REFRESH);\n    }\n\n    // Refresh balances for the affected chain\n    dispatchEuclidEvent(EUCLID_EVENTS.USER.BALANCES_REFRESH, { chainUID });\n  }\n\n  // Get tracking statistics\n  getTrackingStats(): {\n    totalTracking: number;\n    byType: Record<string, number>;\n    byChain: Record<string, number>;\n  } {\n    const stats = {\n      totalTracking: this.trackingTransactions.size,\n      byType: {} as Record<string, number>,\n      byChain: {} as Record<string, number>,\n    };\n\n    this.trackingTransactions.forEach(({ chainUID, type }) => {\n      stats.byType[type] = (stats.byType[type] || 0) + 1;\n      stats.byChain[chainUID] = (stats.byChain[chainUID] || 0) + 1;\n    });\n\n    return stats;\n  }\n\n  // Manual transaction status check\n  async checkTransactionManually(txHash: string, chainUID: string): Promise<{\n    success: boolean;\n    status?: string;\n    error?: string;\n  }> {\n    try {\n      const response = await apiClient.trackTransactionWrapped(txHash, chainUID);\n\n      if (response.success && response.data) {\n        return {\n          success: true,\n          status: response.data.status,\n        };\n      } else {\n        return {\n          success: false,\n          error: response.error || 'Failed to check transaction status',\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  // Event listeners\n  @Listen(EUCLID_EVENTS.TRANSACTION.SUBMITTED, { target: 'window' })\n  async handleTransactionSubmitted(event: CustomEvent<{\n    txHash: string;\n    chainUID: string;\n    type: 'swap' | 'add_liquidity' | 'remove_liquidity' | 'transfer';\n  }>) {\n    const { txHash, chainUID, type } = event.detail;\n    console.log('üîç Transaction submitted, starting tracking:', event.detail);\n    await this.trackTransaction(txHash, chainUID, type);\n  }\n\n  @Listen(EUCLID_EVENTS.TRANSACTION.TRACK_REQUEST, { target: 'window' })\n  async handleTrackTransactionRequest(event: CustomEvent<{\n    txHash: string;\n    chainUID: string;\n    type: 'swap' | 'add_liquidity' | 'remove_liquidity' | 'transfer';\n  }>) {\n    const { txHash, chainUID, type } = event.detail;\n    console.log('üîç Manual transaction tracking requested:', event.detail);\n    await this.trackTransaction(txHash, chainUID, type);\n  }\n\n  @Listen(EUCLID_EVENTS.TRANSACTION.STOP_TRACKING, { target: 'window' })\n  handleStopTrackingTransaction(event: CustomEvent<{ txHash: string }>) {\n    const { txHash } = event.detail;\n    console.log('‚èπÔ∏è Stopping transaction tracking:', txHash);\n    this.trackingTransactions.delete(txHash);\n  }\n\n  @Listen(EUCLID_EVENTS.TRANSACTION.GET_STATS, { target: 'window' })\n  handleGetTrackingStats() {\n    const stats = this.getTrackingStats();\n    dispatchEuclidEvent(EUCLID_EVENTS.TRANSACTION.STATS_RESPONSE, stats);\n  }\n\n  @Watch('isInitialized')\n  onInitializedChange(newValue: boolean) {\n    if (newValue) {\n      console.log('üîç Transaction Tracker Controller ready');\n    }\n  }\n\n  render() {\n    // This is a headless controller - no visual output\n    return null;\n  }\n}\n","import { Component, h, State, Listen, Watch } from '@stencil/core';\nimport { walletStore } from '../../../store/wallet.store';\nimport { apiClient } from '../../../utils/api-client';\nimport { DEFAULTS } from '../../../utils/constants';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\nimport type { UserBalance, WalletInfo } from '../../../utils/types';\n\ninterface BalanceItem {\n  denom: string;\n  amount: string;\n}\n\ninterface BalanceData {\n  balance?: {\n    all?: BalanceItem[];\n  };\n}\n\n@Component({\n  tag: 'euclid-user-data-controller',\n})\nexport class EuclidUserDataController {\n  @State() isInitialized = false;\n  @State() isLoading = false;\n  @State() error: string | null = null;\n\n  private refreshTimer: number;\n  private retryCount = 0;\n  private maxRetries = 3;\n\n  async componentDidLoad() {\n    await this.initialize();\n  }\n\n  disconnectedCallback() {\n    this.clearPeriodicRefresh();\n    walletStore.dispose?.();\n  }\n\n  private async initialize() {\n    console.log('üë§ Initializing User Data Controller...');\n\n    // Listen for wallet connection changes\n    walletStore.onChange('wallets', async (wallets: Map<string, WalletInfo>) => {\n      const connectedWallets = Array.from(wallets.values()).filter(wallet => wallet.isConnected);\n      if (connectedWallets.length > 0) {\n        await this.handleWalletConnection(connectedWallets);\n      } else {\n        this.handleWalletDisconnection();\n      }\n    });\n\n    // Initial check for already connected wallets\n    const connectedWallets = walletStore.getAllConnectedWallets();\n    if (connectedWallets.length > 0) {\n      await this.handleWalletConnection(connectedWallets);\n    }\n\n    this.isInitialized = true;\n    console.log('‚úÖ User Data Controller initialized');\n  }\n\n  private async handleWalletConnection(_wallets: WalletInfo[]) {\n    try {\n      this.isLoading = true;\n      this.error = null;\n\n      console.log('üîó Wallets connected, loading user data...');\n\n      // Load user data for each connected wallet\n      await Promise.all([\n        this.loadUserBalances(),\n        this.loadLiquidityPositions(),\n        this.loadUserTransactions()\n      ]);\n\n      // Start periodic refresh\n      this.setupPeriodicRefresh();\n\n      // Reset retry count on success\n      this.retryCount = 0;\n\n    } catch (error) {\n      console.error('‚ùå Failed to load user data:', error);\n      await this.handleLoadError(error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private handleWalletDisconnection() {\n    console.log('üîå Wallets disconnected, clearing user data...');\n\n    this.clearPeriodicRefresh();\n    this.retryCount = 0;\n\n    // Clear all wallet data\n    walletStore.clear();\n  }\n\n  private async loadUserBalances() {\n    const connectedWallets = walletStore.getAllConnectedWallets();\n\n    for (const wallet of connectedWallets) {\n      try {\n        console.log(`üí∞ Loading balances for ${wallet.chainUID}:${wallet.address.slice(0, 8)}...`);\n\n        const balanceResponse = await apiClient.getBalance(wallet.address, wallet.chainUID);\n\n        if (balanceResponse.success && balanceResponse.data) {\n          const balanceData = balanceResponse.data as BalanceData;\n          if (balanceData.balance?.all) {\n            const chainBalances: UserBalance[] = balanceData.balance.all.map(item => ({\n              amount: item.amount,\n              token_id: item.denom,\n              // Legacy compatibility fields\n              token: item.denom,\n              balance: item.amount,\n              chain_uid: wallet.chainUID,\n              token_type: { native: { denom: item.denom } }\n            }));\n\n            // Update wallet store with balances for this chain\n            walletStore.updateWalletBalances(wallet.chainUID, chainBalances);\n          }\n        }\n      } catch (error) {\n        console.warn(`‚ö†Ô∏è Failed to load balance for ${wallet.chainUID}:`, error.message);\n        // Continue loading other addresses even if one fails\n      }\n    }\n\n    console.log(`‚úÖ Updated balances for connected wallets`);\n  }\n\n  private async loadLiquidityPositions() {\n    const connectedWallets = walletStore.getAllConnectedWallets();\n\n    for (const wallet of connectedWallets) {\n      try {\n        console.log(`üèä Loading liquidity positions for ${wallet.chainUID}:${wallet.address.slice(0, 8)}...`);\n\n        // Stub implementation - to be completed later\n        console.log('Liquidity positions loading - implementation pending');\n\n        // TODO: Implement proper liquidity position loading\n        // const poolsResponse = await apiClient.getUserPools(wallet.address);\n        // Process and update walletStore.updateWalletPositions(wallet.chainUID, positions);\n\n      } catch (error) {\n        console.warn(`‚ö†Ô∏è Failed to load liquidity positions for ${wallet.chainUID}:`, error.message);\n      }\n    }\n  }\n\n  private async loadUserTransactions() {\n    const connectedWallets = walletStore.getAllConnectedWallets();\n\n    for (const wallet of connectedWallets) {\n      try {\n        console.log(`üìä Loading transactions for ${wallet.chainUID}:${wallet.address.slice(0, 8)}...`);\n\n        // Stub implementation - to be completed later\n        console.log('Transactions loading - implementation pending');\n\n        // TODO: Implement proper transaction loading\n        // const txResponse = await apiClient.getUserTransactions(wallet.address, wallet.chainUID);\n        // Process and update walletStore.updateWalletTransactions(wallet.chainUID, transactions);\n\n      } catch (error) {\n        console.warn(`‚ö†Ô∏è Failed to load transactions for ${wallet.chainUID}:`, error.message);\n      }\n    }\n  }\n\n  private calculatePoolShare(lpTokenBalance: string, poolInfo: Record<string, unknown>): number {\n    try {\n      const lpBalance = parseFloat(lpTokenBalance);\n      const totalSupply = parseFloat(String(poolInfo.totalSupply || poolInfo.liquidity || '0'));\n\n      if (totalSupply === 0) return 0;\n      return (lpBalance / totalSupply) * 100;\n    } catch {\n      return 0;\n    }\n  }\n\n  private calculateTokenAmount(sharePercentage: number, tokenInfo: Record<string, unknown>): string {\n    try {\n      const reserve = parseFloat(String(tokenInfo.reserve || tokenInfo.balance || '0'));\n      const amount = (reserve * sharePercentage) / 100;\n      return amount.toString();\n    } catch {\n      return '0';\n    }\n  }\n\n  private calculatePositionValue(sharePercentage: number, poolInfo: Record<string, unknown>): string {\n    try {\n      const tvl = parseFloat(String(poolInfo.tvl || poolInfo.liquidity || '0'));\n      const value = (tvl * sharePercentage) / 100;\n      return value.toString();\n    } catch {\n      return '0';\n    }\n  }\n\n  private setupPeriodicRefresh() {\n    this.clearPeriodicRefresh();\n\n    this.refreshTimer = window.setInterval(async () => {\n      // Check if we have connected wallets\n      const connectedWallets = walletStore.getAllConnectedWallets();\n      if (connectedWallets.length > 0) {\n        console.log('üîÑ Refreshing wallet data...');\n        await this.refreshUserData();\n      }\n    }, DEFAULTS.BALANCE_REFRESH_INTERVAL);\n  }\n\n  private clearPeriodicRefresh() {\n    if (this.refreshTimer) {\n      clearInterval(this.refreshTimer);\n      this.refreshTimer = null;\n    }\n  }\n\n  private async refreshUserData() {\n    const connectedWallets = walletStore.getAllConnectedWallets();\n    if (connectedWallets.length === 0) return;\n\n    try {\n      this.isLoading = true;\n\n      await Promise.all([\n        this.loadUserBalances(),\n        this.loadLiquidityPositions()\n      ]);\n\n      // Portfolio value calculation to be implemented later\n      console.log('Portfolio value calculation - implementation pending');\n\n      this.retryCount = 0;\n\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to refresh user data:', error);\n      await this.handleLoadError(error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private async handleLoadError(error: Error) {\n    this.retryCount++;\n\n    if (this.retryCount < this.maxRetries) {\n      console.log(`üîÑ Retrying user data load (${this.retryCount}/${this.maxRetries})...`);\n\n      // Exponential backoff\n      const delay = Math.pow(2, this.retryCount) * 1000;\n      setTimeout(() => {\n        this.refreshUserData();\n      }, delay);\n\n    } else {\n      console.error('‚ùå Max retries reached for user data loading');\n      this.error = error.message || 'Failed to load user data';\n    }\n  }\n\n  @Listen(EUCLID_EVENTS.USER.REFRESH_DATA, { target: 'window' })\n  async handleRefreshRequest() {\n    console.log('üîÑ Manual user data refresh requested');\n    await this.refreshUserData();\n  }\n\n  @Listen(EUCLID_EVENTS.USER.CLEAR_DATA, { target: 'window' })\n  handleClearRequest() {\n    console.log('üóëÔ∏è User data clear requested');\n    walletStore.clear();\n    this.clearPeriodicRefresh();\n  }\n\n  @Watch('isInitialized')\n  onInitializedChange(newValue: boolean) {\n    if (newValue) {\n      // Emit initialization complete event\n      dispatchEuclidEvent(EUCLID_EVENTS.USER.CONTROLLER_READY, {\n        timestamp: Date.now()\n      });\n    }\n  }\n\n  render() {\n    // This is a headless controller - no visual output\n    return null;\n  }\n}\n","import { Component, h, State, Listen } from '@stencil/core';\nimport { walletStore } from '../../../store/wallet.store';\nimport { marketStore } from '../../../store/market.store';\nimport { WalletAdapterFactory } from '../../../utils/wallet-adapter';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\n\n@Component({\n  tag: 'euclid-wallet-controller',\n})\nexport class EuclidWalletController {\n  @State() isInitialized = false;\n\n  async componentDidLoad() {\n    await this.initialize();\n  }\n\n  private async initialize() {\n    console.log('üîó Initializing Wallet Controller...');\n\n    // Check for available wallets on page load\n    await this.detectAvailableWallets();\n\n    // Set up wallet event listeners\n    this.setupWalletEventListeners();\n\n    this.isInitialized = true;\n    console.log('‚úÖ Wallet Controller initialized');\n  }\n\n  private async detectAvailableWallets() {\n    const availableWallets = [];\n\n    // Check for Keplr (Cosmos wallets)\n    if (window.keplr) {\n      availableWallets.push('keplr');\n    }\n\n    // Check for MetaMask (EVM wallets)\n    if (window.ethereum?.isMetaMask) {\n      availableWallets.push('metamask');\n    }\n\n    // Check for Cosmostation\n    if (window.cosmostation) {\n      availableWallets.push('cosmostation');\n    }\n\n    console.log('üîç Available wallets detected:', availableWallets);\n    return availableWallets;\n  }\n\n  private setupWalletEventListeners() {\n    // Listen for MetaMask account changes\n    if (window.ethereum) {\n      // MetaMask's ethereum object has event emitter methods not defined in our interface\n      const ethProvider = window.ethereum as typeof window.ethereum & {\n        on?: (event: string, callback: (...args: unknown[]) => void) => void;\n      };\n\n      if (ethProvider.on) {\n        ethProvider.on('accountsChanged', (accounts: string[]) => {\n          console.log('MetaMask accounts changed:', accounts);\n          this.handleEvmAccountChange(accounts);\n        });\n\n        ethProvider.on('chainChanged', (chainId: string) => {\n          console.log('MetaMask chain changed:', chainId);\n          this.handleEvmChainChange(chainId);\n        });\n      }\n    }\n\n    // Listen for Keplr events\n    window.addEventListener('keplr_keystorechange', () => {\n      console.log('Keplr keystore changed');\n      this.handleKeplrKeystoreChange();\n    });\n  }\n\n  private async handleEvmAccountChange(accounts: string[]) {\n    if (accounts.length === 0) {\n      // User disconnected\n      this.disconnectEvmWallets();\n    } else {\n      // Update connected EVM accounts\n      // TODO: Update all EVM chain wallets with new account\n    }\n  }\n\n  private handleEvmChainChange(chainId: string) {\n    // Handle EVM chain changes\n    console.log('Chain changed to:', chainId);\n    // TODO: Update wallet store with new chain info\n  }\n\n  private handleKeplrKeystoreChange() {\n    // Handle Keplr keystore changes (account switches, etc.)\n    // TODO: Update all Cosmos chain wallets\n  }\n\n  private disconnectEvmWallets() {\n    // Disconnect all EVM wallets\n    const evmChains = ['ethereum', 'bsc', 'polygon', 'arbitrum', 'base', 'manta', 'sepolia'];\n    evmChains.forEach(chainUID => {\n      walletStore.removeWallet(chainUID);\n    });\n  }\n\n  @Listen(EUCLID_EVENTS.WALLET.CONNECT_REQUEST, { target: 'window' })\n  async handleWalletConnectionRequest(event: CustomEvent<{ chainUID: string; walletType: string }>) {\n    const { chainUID, walletType } = event.detail;\n    console.log('üîó Wallet connection requested:', { chainUID, walletType });\n\n    try {\n      await this.connectWallet(chainUID, walletType);\n    } catch (error) {\n      console.error('Failed to connect wallet:', error);\n      // Emit connection failure event\n      dispatchEuclidEvent(EUCLID_EVENTS.WALLET.CONNECT_FAILED, {\n        chainUID,\n        walletType,\n        error: error.message\n      });\n    }\n  }\n\n  @Listen(EUCLID_EVENTS.WALLET.DISCONNECT_REQUEST, { target: 'window' })\n  handleWalletDisconnectionRequest(event: CustomEvent<{ chainUID: string }>) {\n    const { chainUID } = event.detail;\n    console.log('üîå Wallet disconnection requested:', chainUID);\n\n    walletStore.disconnectWallet(chainUID);\n\n    // Emit disconnection success event\n    dispatchEuclidEvent(EUCLID_EVENTS.WALLET.DISCONNECT_SUCCESS, { chainUID });\n  }\n\n  private async connectWallet(chainUID: string, walletType: string) {\n    // Get chain configuration\n    const chainConfig = marketStore.getChain(chainUID);\n    if (!chainConfig) {\n      throw new Error(`Chain configuration not found for ${chainUID}`);\n    }\n\n    // Validate wallet type\n    const validWalletTypes = ['keplr', 'metamask', 'cosmostation', 'walletconnect'];\n    if (!validWalletTypes.includes(walletType)) {\n      throw new Error(`Unsupported wallet type: ${walletType}`);\n    }\n\n    // Use the wallet adapter factory for proper separation of concerns\n    const result = await WalletAdapterFactory.connectWallet(walletType as 'keplr' | 'metamask' | 'cosmostation' | 'walletconnect', chainConfig);\n\n    if (result.success && result.address) {\n      // Add wallet to store\n      walletStore.addWallet(chainUID, {\n        address: result.address,\n        name: walletType,\n        walletType: walletType as 'keplr' | 'metamask' | 'phantom',\n        type: walletType as 'keplr' | 'metamask' | 'phantom', // legacy alias\n        isConnected: true,\n        balances: []\n      });\n\n      // Emit connection success event\n      dispatchEuclidEvent(EUCLID_EVENTS.WALLET.CONNECT_SUCCESS, {\n        chainUID,\n        walletType,\n        address: result.address\n      });\n    } else {\n      throw new Error(result.error || 'Failed to connect wallet');\n    }\n  }\n\n  render() {\n    // This is a headless controller - no visual output\n    return null;\n  }\n}\n"],"names":[],"mappings":"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"}