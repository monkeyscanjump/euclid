{"version":3,"file":"euclid-tx-tracker-controller.js","sourceRoot":"","sources":["../../../../src/components/core/euclid-tx-tracker-controller/euclid-tx-tracker-controller.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Listen, State, Watch } from '@stencil/core';\nimport { walletStore } from '../../../store/wallet.store';\nimport { apiClient } from '../../../utils/api-client';\nimport { EUCLID_EVENTS, dispatchEuclidEvent } from '../../../utils/events';\n\n@Component({\n  tag: 'euclid-tx-tracker-controller',\n})\nexport class EuclidTxTrackerController {\n  @State() isInitialized = false;\n  private trackingTransactions: Map<string, { chainUID: string; type: string; pollCount: number }> = new Map();\n  private trackingInterval: number;\n\n  async componentDidLoad() {\n    await this.initialize();\n  }\n\n  disconnectedCallback() {\n    this.stopTracking();\n  }\n\n  private async initialize() {\n    console.log('üîç Initializing Transaction Tracker Controller...');\n\n    // Start periodic tracking\n    this.startTracking();\n\n    this.isInitialized = true;\n    console.log('‚úÖ Transaction Tracker Controller initialized');\n  }\n\n  private startTracking() {\n    // Check transactions every 10 seconds\n    this.trackingInterval = window.setInterval(() => {\n      this.checkPendingTransactions();\n    }, 10000);\n  }\n\n  private stopTracking() {\n    if (this.trackingInterval) {\n      clearInterval(this.trackingInterval);\n    }\n  }\n\n  // Track a specific transaction\n  async trackTransaction(\n    txHash: string,\n    chainUID: string,\n    type: 'swap' | 'add_liquidity' | 'remove_liquidity' | 'transfer'\n  ): Promise<void> {\n    console.log('üîç Starting to track transaction:', { txHash, chainUID, type });\n\n    this.trackingTransactions.set(txHash, { chainUID, type, pollCount: 0 });\n\n    // Check immediately\n    await this.checkTransactionStatus(txHash, chainUID, type);\n  }\n\n  private async checkPendingTransactions() {\n    const promises = Array.from(this.trackingTransactions.entries()).map(\n      ([txHash, { chainUID, type, pollCount }]) =>\n        this.checkTransactionStatus(txHash, chainUID, type, pollCount)\n    );\n\n    await Promise.allSettled(promises);\n  }\n\n  private async checkTransactionStatus(\n    txHash: string,\n    chainUID: string,\n    type: string,\n    currentPollCount = 0\n  ): Promise<void> {\n    try {\n      console.log(`üîç Checking transaction status: ${txHash}`);\n\n      const response = await apiClient.trackTransactionWrapped(txHash, chainUID);\n\n      if (response.success && response.data) {\n        const { status } = response.data;\n\n        // Update transaction status in wallet store\n        walletStore.updateTransactionStatus(chainUID, txHash, status as 'pending' | 'confirmed' | 'failed');\n\n        if (status === 'confirmed' || status === 'failed') {\n          // Transaction is final, stop tracking\n          this.trackingTransactions.delete(txHash);\n\n          // Emit global event with final status\n          dispatchEuclidEvent(EUCLID_EVENTS.TRANSACTION.FINALIZED, {\n            txHash,\n            chainUID,\n            type,\n            status,\n          });\n\n          console.log(`‚úÖ Transaction finalized: ${txHash} - Status: ${status}`);\n\n          // If successful, refresh user data to update balances/positions\n          if (status === 'confirmed') {\n            this.refreshUserDataAfterSuccess(chainUID, type);\n          }\n        } else {\n          // Still pending, continue tracking with incremented poll count\n          const newPollCount = currentPollCount + 1;\n\n          // Stop tracking after 120 polls (20 minutes with 10s intervals)\n          if (newPollCount >= 120) {\n            console.warn(`‚ö†Ô∏è Transaction tracking timeout: ${txHash}`);\n            this.trackingTransactions.delete(txHash);\n\n            // Mark as failed due to timeout\n            walletStore.updateTransactionStatus(chainUID, txHash, 'failed');\n\n            dispatchEuclidEvent(EUCLID_EVENTS.TRANSACTION.TIMEOUT, {\n              txHash,\n              chainUID,\n              type\n            });\n          } else {\n            this.trackingTransactions.set(txHash, { chainUID, type, pollCount: newPollCount });\n          }\n        }\n      } else {\n        console.warn(`‚ö†Ô∏è Failed to check transaction status: ${txHash}`, response.error);\n      }\n    } catch (error) {\n      console.error(`‚ùå Error checking transaction status: ${txHash}`, error);\n    }\n  }\n\n  private refreshUserDataAfterSuccess(chainUID: string, type: string) {\n    // Emit events to refresh relevant data after successful transactions\n    dispatchEuclidEvent(EUCLID_EVENTS.USER.REFRESH_DATA);\n\n    if (type === 'add_liquidity' || type === 'remove_liquidity') {\n      dispatchEuclidEvent(EUCLID_EVENTS.LIQUIDITY.POSITIONS_REFRESH);\n    }\n\n    // Refresh balances for the affected chain\n    dispatchEuclidEvent(EUCLID_EVENTS.USER.BALANCES_REFRESH, { chainUID });\n  }\n\n  // Get tracking statistics\n  getTrackingStats(): {\n    totalTracking: number;\n    byType: Record<string, number>;\n    byChain: Record<string, number>;\n  } {\n    const stats = {\n      totalTracking: this.trackingTransactions.size,\n      byType: {} as Record<string, number>,\n      byChain: {} as Record<string, number>,\n    };\n\n    this.trackingTransactions.forEach(({ chainUID, type }) => {\n      stats.byType[type] = (stats.byType[type] || 0) + 1;\n      stats.byChain[chainUID] = (stats.byChain[chainUID] || 0) + 1;\n    });\n\n    return stats;\n  }\n\n  // Manual transaction status check\n  async checkTransactionManually(txHash: string, chainUID: string): Promise<{\n    success: boolean;\n    status?: string;\n    error?: string;\n  }> {\n    try {\n      const response = await apiClient.trackTransactionWrapped(txHash, chainUID);\n\n      if (response.success && response.data) {\n        return {\n          success: true,\n          status: response.data.status,\n        };\n      } else {\n        return {\n          success: false,\n          error: response.error || 'Failed to check transaction status',\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  // Event listeners\n  @Listen(EUCLID_EVENTS.TRANSACTION.SUBMITTED, { target: 'window' })\n  async handleTransactionSubmitted(event: CustomEvent<{\n    txHash: string;\n    chainUID: string;\n    type: 'swap' | 'add_liquidity' | 'remove_liquidity' | 'transfer';\n  }>) {\n    const { txHash, chainUID, type } = event.detail;\n    console.log('üîç Transaction submitted, starting tracking:', event.detail);\n    await this.trackTransaction(txHash, chainUID, type);\n  }\n\n  @Listen(EUCLID_EVENTS.TRANSACTION.TRACK_REQUEST, { target: 'window' })\n  async handleTrackTransactionRequest(event: CustomEvent<{\n    txHash: string;\n    chainUID: string;\n    type: 'swap' | 'add_liquidity' | 'remove_liquidity' | 'transfer';\n  }>) {\n    const { txHash, chainUID, type } = event.detail;\n    console.log('üîç Manual transaction tracking requested:', event.detail);\n    await this.trackTransaction(txHash, chainUID, type);\n  }\n\n  @Listen(EUCLID_EVENTS.TRANSACTION.STOP_TRACKING, { target: 'window' })\n  handleStopTrackingTransaction(event: CustomEvent<{ txHash: string }>) {\n    const { txHash } = event.detail;\n    console.log('‚èπÔ∏è Stopping transaction tracking:', txHash);\n    this.trackingTransactions.delete(txHash);\n  }\n\n  @Listen(EUCLID_EVENTS.TRANSACTION.GET_STATS, { target: 'window' })\n  handleGetTrackingStats() {\n    const stats = this.getTrackingStats();\n    dispatchEuclidEvent(EUCLID_EVENTS.TRANSACTION.STATS_RESPONSE, stats);\n  }\n\n  @Watch('isInitialized')\n  onInitializedChange(newValue: boolean) {\n    if (newValue) {\n      console.log('üîç Transaction Tracker Controller ready');\n    }\n  }\n\n  render() {\n    // This is a headless controller - no visual output\n    return null;\n  }\n}\n"]}