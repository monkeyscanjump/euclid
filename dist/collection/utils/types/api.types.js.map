{"version":3,"file":"api.types.js","sourceRoot":"","sources":["../../../src/utils/types/api.types.ts"],"names":[],"mappings":"AAAA,4BAA4B;AAC5B,6CAA6C","sourcesContent":["// Euclid Protocol API Types\n// Based on official Euclid API documentation\n\n// ============================================================================\n// CORE EUCLID TYPES\n// ============================================================================\n\nexport interface CrossChainUser {\n  address: string | null;\n  chain_uid: string | null;\n}\n\nexport interface CrossChainUserInput {\n  address?: string | null;\n  chain_uid?: string | null;\n}\n\nexport interface CrossChainUserWithLimit {\n  limit?: Limit | null;\n  user: CrossChainUser;\n}\n\nexport type Limit =\n  | { less_than_or_equal: string }\n  | { equal: string }\n  | { greater_than_or_equal: string };\n\nexport type TokenType =\n  | { native: { denom: string } }\n  | { smart: { contract_address: string } }\n  | { voucher: Record<string, never> };\n\nexport interface TokenWithDenom {\n  token: string;\n  token_type: TokenType;\n}\n\nexport interface TokenWithDenomAndAmount {\n  token: string;\n  amount: string;\n  token_type: TokenType;\n}\n\nexport interface PairWithDenomAndAmount {\n  token_1: TokenWithDenomAndAmount;\n  token_2: TokenWithDenomAndAmount;\n}\n\n// ============================================================================\n// CHAIN TYPES\n// ============================================================================\n\nexport interface EuclidChainConfig {\n  chain_id: string;\n  chain_uid: string;\n  display_name: string;\n  factory_address: string;\n  token_factory_address: string;\n  explorer_url: string;\n  logo: string;\n  type: 'EVM' | 'Cosmwasm';\n}\n\n// ============================================================================\n// ROUTING & SWAP TYPES\n// ============================================================================\n\nexport interface GetRoutesRequest {\n  amount_in: string;\n  token_in: string;\n  token_out: string;\n  external?: boolean;\n  chain_uids?: string[];\n}\n\nexport interface RouteStep {\n  route: string[];\n  dex: string;\n  amount_in: string;\n  amount_out: string;\n  chain_uid: string;\n  amount_out_for_hops: string[];\n}\n\nexport interface RoutePath {\n  path: RouteStep[];\n  total_price_impact: string;\n  id?: string; // legacy compatibility - could be a hash of the path\n  outputAmount?: string; // legacy compatibility - final amount from last step\n}\n\nexport interface GetRoutesResponse {\n  paths: RoutePath[];\n}\n\nexport interface SwapPath {\n  path: Array<{\n    route: string[];\n    dex: string;\n    chain_uid?: string;\n    amount_in?: string;\n    amount_out?: string;\n  }>;\n}\n\nexport interface PartnerFee {\n  partner_fee_bps: number;\n  recipient: string;\n}\n\nexport interface SwapRequest {\n  amount_in: string;\n  asset_in: TokenWithDenom;\n  slippage: string;\n  minimum_receive?: string;\n  cross_chain_addresses?: CrossChainUserWithLimit[];\n  partnerFee?: PartnerFee;\n  sender: CrossChainUser;\n  swap_path: SwapPath;\n  timeout?: string;\n}\n\n// ============================================================================\n// LIQUIDITY TYPES\n// ============================================================================\n\nexport interface AddLiquidityRequest {\n  slippage_tolerance_bps: number;\n  timeout?: string;\n  pair_info: PairWithDenomAndAmount;\n  sender: CrossChainUser;\n}\n\nexport interface RemoveLiquidityRequest {\n  slippage_tolerance_bps: number;\n  timeout?: string;\n  lp_token_amount: string;\n  sender: CrossChainUser;\n}\n\n// ============================================================================\n// TRANSACTION TYPES\n// ============================================================================\n\n// ============================================================================\n// TRANSACTION TYPES\n// ============================================================================\n\nexport interface CosmWasmMessage {\n  contractAddress: string;\n  msg: Record<string, unknown>;\n  funds?: Array<{ denom: string; amount: string }>;\n}\n\nexport interface EVMMessage {\n  chainId: string;\n  to: string;\n  data: string;\n  value: string;\n  gasLimit?: string;\n}\n\n// Euclid transaction response for CosmWasm chains\nexport interface CosmWasmTransactionResponse {\n  type: 'cosmwasm';\n  sender: CrossChainUser;\n  contract: string;\n  chain_id: string;\n  rpc_url: string;\n  rest_url: string;\n  msgs: CosmWasmMessage[];\n  meta?: string;\n}\n\n// Euclid transaction response for EVM chains\nexport interface EVMTransactionResponse {\n  type: 'evm';\n  sender: CrossChainUser;\n  contract: string;\n  chain_id: string;\n  rpc_url: string;\n  rest_url: string;\n  msgs: EVMMessage[];\n  meta?: string;\n}\n\nexport type TransactionResponse = CosmWasmTransactionResponse | EVMTransactionResponse;\n\n// ============================================================================\n// GRAPHQL QUERY TYPES\n// ============================================================================\n\nexport interface ChainsQueryVariables {\n  showAllChains?: boolean;\n  type?: string;\n}\n\nexport interface ChainsQueryResponse {\n  chains: {\n    all_chains: EuclidChainConfig[];\n  };\n}\n\nexport interface TokenMetadataQueryVariables {\n  token?: string;\n  chain_uid?: string;\n}\n\nexport interface TokenMetadata {\n  // Core Euclid API fields (from token.token_metadatas query)\n  coinDecimal: number;\n  displayName: string;\n  tokenId: string;\n  description?: string;\n  image?: string;\n  price?: string;\n  price_change_24h?: number;\n  price_change_7d?: number;\n  dex?: string[];\n  chain_uids?: string[];\n  total_volume?: number;\n  total_volume_24h?: number;\n  tags?: string[];\n  min_swap_value?: number;\n  social?: Record<string, unknown>;\n  is_verified?: boolean;\n\n  // Legacy compatibility aliases for backward compatibility with existing components\n  id?: string; // alias for tokenId\n  symbol?: string; // alias for displayName\n  name?: string; // alias for displayName\n  decimals?: number; // alias for coinDecimal\n  logo?: string; // alias for image\n  chain_uid?: string; // single chain for backward compatibility\n  chainUID?: string; // legacy alias\n  address?: string; // alias for tokenId\n  token_type?: TokenType; // for transaction building\n  coingecko_id?: string;\n}\n\nexport interface TokenMetadataQueryResponse {\n  token: {\n    token_metadatas: TokenMetadata[];\n  };\n}\n\nexport interface PoolInfo {\n  pool_id: string;\n  id?: string; // legacy compatibility alias for pool_id\n  token_1: string;\n  token_2: string;\n  token1?: string; // legacy compatibility alias for token_1\n  token2?: string; // legacy compatibility alias for token_2\n  total_liquidity: string;\n  volume_24h?: string;\n  fees_24h?: string;\n  apr?: string;\n}\n\n// Legacy aliases for backward compatibility\nexport type TokenInfo = TokenMetadata;\nexport type ChainConfig = EuclidChainConfig;\nexport type SwapRoute = RoutePath;\nexport type TokenBalance = UserBalance;\n\n// Additional missing types for components\nexport interface LiquidityPosition {\n  poolId: string;\n  lpTokenAmount: string;\n  token1Amount: string;\n  token2Amount: string;\n  userShare: string;\n}\n\nexport interface Transaction {\n  hash: string;\n  status: 'pending' | 'success' | 'failed';\n  timestamp: number;\n  type: 'swap' | 'add_liquidity' | 'remove_liquidity';\n  chainUID: string;\n}\n\nexport interface AllPoolsQueryResponse {\n  factory: {\n    all_pools: PoolInfo[];\n  };\n}\n\n// ============================================================================\n// USER BALANCE TYPES\n// ============================================================================\n\nexport interface UserBalanceQueryVariables {\n  user: CrossChainUserInput;\n}\n\nexport interface UserBalance {\n  // Core Euclid API fields (from vcoin.user_balance query)\n  amount: string;\n  token_id: string;\n\n  // Legacy compatibility aliases for backward compatibility with existing components\n  token?: string; // alias for token_id\n  balance?: string; // alias for amount\n  chain_uid?: string; // for grouping/filtering\n  token_type?: TokenType; // for transaction building\n}\n\nexport interface UserBalanceQueryResponse {\n  vcoin: {\n    user_balance: {\n      balances: UserBalance[];\n    };\n  };\n}\n\n// ============================================================================\n// GENERIC API RESPONSE WRAPPER\n// ============================================================================\n\nexport interface ApiResponse<T = unknown> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n}\n\nexport interface PaginatedResponse<T> {\n  items: T[];\n  total: number;\n  page: number;\n  limit: number;\n  hasMore: boolean;\n}\n"]}