{"version":3,"file":"p-CDg7SVxJ.js","sources":["src/store/liquidity.store.ts","src/utils/graphql-client.ts","src/utils/rest-client.ts","src/utils/api-client.ts","src/utils/env.ts","src/utils/constants.ts"],"sourcesContent":["import { createStore } from '@stencil/store';\nimport type { LiquidityState } from '../utils/types/euclid-api.types';\nimport type { TokenMetadata, PoolInfo, LiquidityPosition } from '../utils/types/api.types';\nimport type { BaseStore } from './types';\n\nconst initialState: LiquidityState = {\n  token1: null,\n  token2: null,\n  amount1: '',\n  amount2: '',\n  token1Amount: '', // legacy alias\n  token2Amount: '', // legacy alias\n  pool: null,\n  selectedPool: null, // legacy alias\n  userLpBalance: '0',\n  loading: false,\n  error: null,\n};\n\nconst { state, onChange, reset, dispose } = createStore(initialState);\n\n// Actions\nconst actions = {\n  setLoading(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setError(error: string | null) {\n    state.error = error;\n  },\n\n  setToken1(token: TokenMetadata | null) {\n    state.token1 = token;\n\n    // Clear pool if tokens don't match\n    if (state.pool && token &&\n        state.pool.token_1 !== token.id &&\n        state.pool.token_2 !== token.id) {\n      state.pool = null;\n    }\n  },\n\n  setToken2(token: TokenMetadata | null) {\n    state.token2 = token;\n\n    // Clear pool if tokens don't match\n    if (state.pool && token &&\n        state.pool.token_1 !== token.id &&\n        state.pool.token_2 !== token.id) {\n      state.pool = null;\n    }\n  },\n\n  setAmount1(amount: string) {\n    state.amount1 = amount;\n    state.token1Amount = amount; // Keep alias synchronized\n  },\n\n  setAmount2(amount: string) {\n    state.amount2 = amount;\n    state.token2Amount = amount; // Keep alias synchronized\n  },\n\n  // Backward compatibility aliases\n  setToken1Amount(amount: string) {\n    actions.setAmount1(amount);\n  },\n\n  setToken2Amount(amount: string) {\n    actions.setAmount2(amount);\n  },\n\n  setPool(pool: PoolInfo | null) {\n    state.pool = pool;\n    state.selectedPool = pool; // Keep alias synchronized\n  },\n\n  // Backward compatibility alias\n  setSelectedPool(pool: PoolInfo | null) {\n    actions.setPool(pool);\n  },\n\n  setUserLpBalance(balance: string) {\n    state.userLpBalance = balance;\n  },\n\n  swapTokens() {\n    const token1 = state.token1;\n    const token2 = state.token2;\n    const amount1 = state.amount1;\n    const amount2 = state.amount2;\n\n    state.token1 = token2;\n    state.token2 = token1;\n    state.amount1 = amount2;\n    state.amount2 = amount1;\n  },\n\n  clear() {\n    reset();\n  },\n\n  // Additional methods that components expect\n  setAddingLiquidity(loading: boolean) {\n    state.loading = loading;\n  },\n\n  setRemovingLiquidity(loading: boolean) {\n    state.loading = loading;\n  },\n\n  getPosition(poolId: string): LiquidityPosition | null {\n    // This would typically fetch from API or cache\n    // For now, return null\n    console.warn(`getPosition(${poolId}) not implemented`);\n    return null;\n  },\n};\n\n// Getters\nconst getters = {\n  canAddLiquidity: () => {\n    return !!(\n      state.token1 &&\n      state.token2 &&\n      state.amount1 &&\n      state.amount2 &&\n      parseFloat(state.amount1) > 0 &&\n      parseFloat(state.amount2) > 0 &&\n      !state.loading\n    );\n  },\n\n  canRemoveLiquidity: () => {\n    return !!(\n      state.pool &&\n      state.userLpBalance &&\n      parseFloat(state.userLpBalance) > 0 &&\n      !state.loading\n    );\n  },\n\n  getPoolLiquidity: () => {\n    return state.pool?.total_liquidity || '0';\n  },\n\n  getPoolVolume24h: () => {\n    return state.pool?.volume_24h || '0';\n  },\n\n  getPoolFees24h: () => {\n    return state.pool?.fees_24h || '0';\n  },\n\n  getPoolAPR: () => {\n    return state.pool?.apr || '0';\n  },\n\n  isValidPair: () => {\n    return !!(\n      state.token1 &&\n      state.token2 &&\n      state.token1.id !== state.token2.id\n    );\n  },\n};\n\n// Store interface\nexport interface LiquidityStore extends BaseStore<LiquidityState> {\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  setToken1: (token: TokenMetadata | null) => void;\n  setToken2: (token: TokenMetadata | null) => void;\n  setAmount1: (amount: string) => void;\n  setAmount2: (amount: string) => void;\n  setToken1Amount: (amount: string) => void; // alias\n  setToken2Amount: (amount: string) => void; // alias\n  setPool: (pool: PoolInfo | null) => void;\n  setSelectedPool: (pool: PoolInfo | null) => void; // alias\n  setUserLpBalance: (balance: string) => void;\n  swapTokens: () => void;\n  clear: () => void;\n  setAddingLiquidity: (loading: boolean) => void;\n  setRemovingLiquidity: (loading: boolean) => void;\n  getPosition: (poolId: string) => LiquidityPosition | null;\n  canAddLiquidity: () => boolean;\n  canRemoveLiquidity: () => boolean;\n  getPoolLiquidity: () => string;\n  getPoolVolume24h: () => string;\n  getPoolFees24h: () => string;\n  getPoolAPR: () => string;\n  isValidPair: () => boolean;\n}\n\nexport const liquidityStore: LiquidityStore = {\n  state,\n  onChange,\n  reset,\n  dispose,\n  ...actions,\n  ...getters,\n};\n\nexport type { LiquidityState };\n","import type {\n  EuclidChainConfig,\n  TokenMetadata,\n  PoolInfo,\n  UserBalance,\n  CrossChainUser,\n  ChainsQueryResponse,\n  TokenMetadataQueryResponse,\n  UserBalanceQueryResponse,\n  ApiResponse\n} from './types/api.types';\n\n// GraphQL endpoint for Euclid testnet\nconst EUCLID_GRAPHQL_ENDPOINT = 'https://testnet.api.euclidprotocol.com/graphql';\n\n/**\n * GraphQL client for Euclid Protocol\n * Handles all GraphQL queries to the Euclid API\n */\nexport class EuclidGraphQLClient {\n  private endpoint: string;\n\n  constructor(endpoint: string = EUCLID_GRAPHQL_ENDPOINT) {\n    this.endpoint = endpoint;\n  }\n\n  /**\n   * Execute a GraphQL query\n   */\n  private async query<T>(query: string, variables?: Record<string, unknown>): Promise<ApiResponse<T>> {\n    try {\n      const response = await fetch(this.endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },\n        body: JSON.stringify({\n          query,\n          variables: variables || {},\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n\n      if (result.errors) {\n        throw new Error(`GraphQL error: ${result.errors.map((e: { message: string }) => e.message).join(', ')}`);\n      }\n\n      return {\n        success: true,\n        data: result.data,\n      };\n    } catch (error) {\n      console.error('GraphQL query failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Get all supported chains\n   */\n  async getChains(variables?: { showAllChains?: boolean; type?: string }): Promise<EuclidChainConfig[]> {\n    const query = `\n      query Chains($showAllChains: Boolean, $type: String) {\n        chains {\n          all_chains(show_all_chains: $showAllChains, type: $type) {\n            chain_id\n            chain_uid\n            display_name\n            factory_address\n            token_factory_address\n            explorer_url\n            logo\n            type\n          }\n        }\n      }\n    `;\n\n    const result = await this.query<ChainsQueryResponse>(query, variables);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to fetch chains');\n    }\n\n    return result.data.chains.all_chains;\n  }\n\n  /**\n   * Get token metadata\n   */\n  async getTokenMetadata(variables?: {\n    limit?: number;\n    offset?: number;\n    verified?: boolean;\n    dex?: string[];\n    chainUids?: string[];\n    showVolume?: boolean;\n    search?: string;\n  }): Promise<TokenMetadata[]> {\n    const query = `\n      query Token(\n        $limit: Int,\n        $offset: Int,\n        $verified: Boolean,\n        $dex: [String!],\n        $chainUids: [String!],\n        $showVolume: Boolean,\n        $search: String\n      ) {\n        token {\n          token_metadatas(\n            limit: $limit,\n            offset: $offset,\n            verified: $verified,\n            dex: $dex,\n            chain_uids: $chainUids,\n            show_volume: $showVolume,\n            search: $search\n          ) {\n            coinDecimal\n            displayName\n            tokenId\n            description\n            image\n            price\n            price_change_24h\n            price_change_7d\n            dex\n            chain_uids\n            total_volume\n            total_volume_24h\n            tags\n            min_swap_value\n            social\n            is_verified\n          }\n        }\n      }\n    `;\n\n    const result = await this.query<TokenMetadataQueryResponse>(query, variables);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to fetch token metadata');\n    }\n\n    return result.data.token.token_metadatas;\n  }\n\n  /**\n   * Get all liquidity pools with proper TVL and APR data\n   * @param chainUid - Optional chain filter (unused for now)\n   * @param onlyVerified - Whether to show only verified pools (default: true)\n   */\n  async getAllPools(_chainUid?: string, onlyVerified: boolean = true): Promise<PoolInfo[]> {\n    try {\n      const query = `\n        query Token_pair_with_liquidity($limit: Int, $onlyShowVerified: Boolean) {\n          pool {\n            token_pair_with_liquidity(limit: $limit, only_show_verified: $onlyShowVerified) {\n              results {\n                pair {\n                  token_1\n                  token_2\n                }\n                vlp\n                total_liquidity\n                apr\n                tags\n                created_at\n              }\n              pagination {\n                total_count\n                limit\n                offset\n              }\n            }\n          }\n        }\n      `;\n\n      const result = await this.query<{\n        pool: {\n          token_pair_with_liquidity: {\n            results: Array<{\n              pair: { token_1: string; token_2: string };\n              vlp: string;\n              total_liquidity: string;\n              apr: string;\n              tags: string[] | null;\n              created_at: string;\n            }>;\n            pagination: {\n              total_count: number;\n              limit: number;\n              offset: number;\n            };\n          };\n        };\n      }>(query, {\n        limit: 1000,\n        onlyShowVerified: onlyVerified\n      });\n\n      if (!result.success || !result.data?.pool?.token_pair_with_liquidity?.results) {\n        throw new Error(result.error || 'Failed to fetch pools with liquidity data');\n      }\n\n      // Transform the API response to our PoolInfo interface\n      const pools = result.data.pool.token_pair_with_liquidity.results.map((pool) => {\n        return {\n          pool_id: `${pool.pair.token_1}-${pool.pair.token_2}`,\n          token_1: pool.pair.token_1,\n          token_2: pool.pair.token_2,\n          total_liquidity: pool.total_liquidity,\n          volume_24h: '0', // This API doesn't provide volume data\n          fees_24h: '0', // This API doesn't provide fees data\n          apr: pool.apr,\n        } satisfies PoolInfo;\n      });\n\n      console.log(`✅ Loaded ${pools.length} pools with real liquidity and APR data from official API`);\n      return pools;\n\n    } catch (error) {\n      console.error('Failed to fetch pools with liquidity data:', error);\n      return [];\n    }\n  }  /**\n   * Get user balances across all chains\n   */\n  async getUserBalances(user: CrossChainUser): Promise<UserBalance[]> {\n    const query = `\n      query Vcoin($user: CrossChainUserInput) {\n        vcoin {\n          user_balance(user: $user) {\n            balances {\n              amount\n              token_id\n            }\n          }\n        }\n      }\n    `;\n\n    const variables = {\n      user: {\n        address: user.address,\n        chain_uid: user.chain_uid,\n      },\n    };\n\n    const result = await this.query<UserBalanceQueryResponse>(query, variables);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to fetch user balances');\n    }\n\n    return result.data.vcoin.user_balance.balances;\n  }\n\n  /**\n   * Get pool information for a specific pair\n   */\n  async getPoolInfo(token1: string, token2: string): Promise<PoolInfo | null> {\n    const pools = await this.getAllPools();\n    return pools.find(pool =>\n      (pool.token_1 === token1 && pool.token_2 === token2) ||\n      (pool.token_1 === token2 && pool.token_2 === token1)\n    ) || null;\n  }\n\n  /**\n   * Search tokens by symbol or name\n   */\n    async searchTokens(searchTerm: string, chainUID?: string): Promise<TokenMetadata[]> {\n    const options: Parameters<typeof this.getTokenMetadata>[0] = { search: searchTerm };\n    if (chainUID) {\n      options.chainUids = [chainUID];\n    }\n    const tokens = await this.getTokenMetadata(options);\n\n    const lowerSearchTerm = searchTerm.toLowerCase();\n    return tokens.filter(token =>\n      token.displayName?.toLowerCase().includes(lowerSearchTerm) ||\n      token.tokenId?.toLowerCase().includes(lowerSearchTerm) ||\n      token.description?.toLowerCase().includes(lowerSearchTerm) ||\n      // Legacy field fallbacks\n      token.symbol?.toLowerCase().includes(lowerSearchTerm) ||\n      token.name?.toLowerCase().includes(lowerSearchTerm)\n    );\n  }\n\n  /**\n   * Get token by symbol and chain\n   */\n  async getTokenBySymbol(symbol: string, chainUID: string): Promise<TokenMetadata | null> {\n    const tokens = await this.getTokenMetadata({ chainUids: [chainUID] });\n    // Use displayName (symbol equivalent) for comparison, with fallback to legacy fields\n    return tokens.find(token =>\n      token.displayName?.toLowerCase() === symbol.toLowerCase() ||\n      token.symbol?.toLowerCase() === symbol.toLowerCase()\n    ) || null;\n  }\n}\n\n// Export a default instance\nexport const euclidGraphQLClient = new EuclidGraphQLClient();\n","import type {\n  GetRoutesRequest,\n  GetRoutesResponse,\n  RoutePath,\n  SwapRequest,\n  AddLiquidityRequest,\n  RemoveLiquidityRequest,\n  TransactionResponse,\n  ApiResponse\n} from './types/api.types';\n\n// REST API endpoint for Euclid testnet\nconst EUCLID_REST_ENDPOINT = 'https://testnet.api.euclidprotocol.com/api/v1';\n\n/**\n * REST client for Euclid Protocol\n * Handles all REST API calls for transactions, routing, and operations\n */\nexport class EuclidRESTClient {\n  private endpoint: string;\n\n  constructor(endpoint: string = EUCLID_REST_ENDPOINT) {\n    this.endpoint = endpoint;\n  }\n\n  /**\n   * Execute a REST API request\n   */\n  private async request<T>(\n    path: string,\n    options: {\n      method?: 'GET' | 'POST' | 'PUT' | 'DELETE';\n      body?: unknown;\n      headers?: Record<string, string>;\n    } = {}\n  ): Promise<ApiResponse<T>> {\n    try {\n      const { method = 'GET', body, headers = {} } = options;\n\n      const response = await fetch(`${this.endpoint}${path}`, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          ...headers,\n        },\n        body: body ? JSON.stringify(body) : undefined,\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      const result = await response.json();\n\n      return {\n        success: true,\n        data: result,\n      };\n    } catch (error) {\n      console.error(`REST API request failed (${path}):`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Get routing paths for a swap\n   */\n  async getRoutes(request: GetRoutesRequest): Promise<RoutePath[]> {\n    const queryParams = new URLSearchParams({\n      amount_in: request.amount_in,\n      token_in: request.token_in,\n      token_out: request.token_out,\n    });\n\n    if (request.external !== undefined) {\n      queryParams.append('external', request.external.toString());\n    }\n\n    if (request.chain_uids && request.chain_uids.length > 0) {\n      request.chain_uids.forEach(chainUID => {\n        queryParams.append('chain_uids', chainUID);\n      });\n    }\n\n    const result = await this.request<GetRoutesResponse>(`/routes?${queryParams}`);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to fetch routes');\n    }\n\n    return result.data.paths;\n  }\n\n  /**\n   * Build a swap transaction\n   */\n  async buildSwapTransaction(request: SwapRequest): Promise<TransactionResponse> {\n    const result = await this.request<TransactionResponse>('/swap', {\n      method: 'POST',\n      body: request,\n    });\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to build swap transaction');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Build an add liquidity transaction\n   */\n  async buildAddLiquidityTransaction(request: AddLiquidityRequest): Promise<TransactionResponse> {\n    const result = await this.request<TransactionResponse>('/add_liquidity', {\n      method: 'POST',\n      body: request,\n    });\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to build add liquidity transaction');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Build a remove liquidity transaction\n   */\n  async buildRemoveLiquidityTransaction(request: RemoveLiquidityRequest): Promise<TransactionResponse> {\n    const result = await this.request<TransactionResponse>('/remove_liquidity', {\n      method: 'POST',\n      body: request,\n    });\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to build remove liquidity transaction');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Simulate a swap to get expected output\n   */\n  async simulateSwap(request: {\n    amount_in: string;\n    token_in: string;\n    token_out: string;\n    chain_uid?: string;\n  }): Promise<{ amount_out: string; price_impact: string }> {\n    const queryParams = new URLSearchParams({\n      amount_in: request.amount_in,\n      token_in: request.token_in,\n      token_out: request.token_out,\n    });\n\n    if (request.chain_uid) {\n      queryParams.append('chain_uid', request.chain_uid);\n    }\n\n    const result = await this.request<{ amount_out: string; price_impact: string }>(`/simulate_swap?${queryParams}`);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to simulate swap');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Get optimal route for a swap with the best price\n   */\n  async getBestRoute(request: GetRoutesRequest): Promise<RoutePath | null> {\n    const routes = await this.getRoutes(request);\n\n    if (routes.length === 0) {\n      return null;\n    }\n\n    // Sort by total price impact (lower is better)\n    return routes.sort((a, b) =>\n      parseFloat(a.total_price_impact) - parseFloat(b.total_price_impact)\n    )[0];\n  }\n\n  /**\n   * Get transaction status\n   */\n  async getTransactionStatus(txHash: string, chainUID: string): Promise<{\n    status: 'pending' | 'success' | 'failed';\n    blockHeight?: number;\n    gasUsed?: string;\n    fee?: string;\n  }> {\n    const result = await this.request<{\n      status: 'pending' | 'success' | 'failed';\n      blockHeight?: number;\n      gasUsed?: string;\n      fee?: string;\n    }>(`/transaction/${txHash}?chain_uid=${chainUID}`);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to get transaction status');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Get gas estimate for a transaction\n   */\n  async estimateGas(transaction: TransactionResponse): Promise<{ gasLimit: string; gasPrice: string }> {\n    const result = await this.request<{ gasLimit: string; gasPrice: string }>('/estimate_gas', {\n      method: 'POST',\n      body: transaction,\n    });\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to estimate gas');\n    }\n\n    return result.data;\n  }\n}\n\n// Export a default instance\nexport const euclidRESTClient = new EuclidRESTClient();\n","/**\n * Unified API Client for Euclid Protocol\n * Combines GraphQL and REST clients for a single interface\n */\n\nimport { euclidGraphQLClient } from './graphql-client';\nimport { euclidRESTClient } from './rest-client';\nimport type {\n  EuclidChainConfig,\n  TokenMetadata,\n  PoolInfo,\n  UserBalance,\n  RoutePath,\n  SwapRequest,\n  AddLiquidityRequest,\n  RemoveLiquidityRequest,\n  TransactionResponse,\n  CrossChainUser,\n  GetRoutesRequest\n} from './types/api.types';\n\n/**\n * Main API client that provides a unified interface to Euclid Protocol\n * Uses dedicated GraphQL and REST clients under the hood\n */\nexport class EuclidAPIClient {\n  private graphql = euclidGraphQLClient;\n  private rest = euclidRESTClient;\n\n  // ============================================================================\n  // CHAIN & TOKEN METADATA (GraphQL)\n  // ============================================================================\n\n  /**\n   * Get all supported blockchain networks\n   */\n  async getChains(options?: { showAllChains?: boolean; type?: string }): Promise<EuclidChainConfig[]> {\n    return this.graphql.getChains(options);\n  }\n\n  /**\n   * Get token metadata information\n   */\n  async getTokenMetadata(options?: {\n    limit?: number;\n    offset?: number;\n    verified?: boolean;\n    dex?: string[];\n    chainUids?: string[];\n    showVolume?: boolean;\n    search?: string;\n  }): Promise<TokenMetadata[]> {\n    return this.graphql.getTokenMetadata(options);\n  }\n\n  /**\n   * Search for tokens by symbol or name\n   */\n  async searchTokens(searchTerm: string, chainUID?: string): Promise<TokenMetadata[]> {\n    return this.graphql.searchTokens(searchTerm, chainUID);\n  }\n\n  /**\n   * Get a specific token by symbol and chain\n   */\n  async getTokenBySymbol(symbol: string, chainUID: string): Promise<TokenMetadata | null> {\n    return this.graphql.getTokenBySymbol(symbol, chainUID);\n  }\n\n  // ============================================================================\n  // LIQUIDITY POOLS (GraphQL)\n  // ============================================================================\n\n  /**\n   * Get all liquidity pools\n   * @param onlyVerified - Whether to show only verified pools (default: true)\n   */\n  async getAllPools(onlyVerified: boolean = true): Promise<{ success: boolean; data?: PoolInfo[]; error?: string }> {\n    try {\n      const data = await this.graphql.getAllPools(undefined, onlyVerified);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get pools' };\n    }\n  }\n\n  /**\n   * Get pool information for a specific token pair\n   */\n  async getPoolInfo(token1: string, token2: string): Promise<PoolInfo | null> {\n    return this.graphql.getPoolInfo(token1, token2);\n  }\n\n  // ============================================================================\n  // LEGACY METHOD ALIASES FOR BACKWARD COMPATIBILITY\n  // ============================================================================\n\n  /**\n   * @deprecated Use getChains() instead\n   */\n  async getAllChains(showAllChains?: boolean): Promise<{ success: boolean; data?: EuclidChainConfig[]; error?: string }> {\n    try {\n      const data = await this.getChains({ showAllChains });\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get chains' };\n    }\n  }\n\n  /**\n   * @deprecated Use getTokenMetadata() instead\n   */\n  async getAllTokens(): Promise<{ success: boolean; data?: TokenMetadata[]; error?: string }> {\n    try {\n      const data = await this.getTokenMetadata();\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get tokens' };\n    }\n  }\n\n  /**\n   * Get token denominations for a token ID (placeholder - not implemented in Euclid API)\n   */\n  async getTokenDenoms(tokenId: string): Promise<{ success: boolean; data?: { router: { token_denoms: { denoms: string[] } } }; error?: string }> {\n    // This method doesn't exist in the real Euclid API\n    console.warn(`getTokenDenoms(${tokenId}) is not implemented in Euclid API`);\n    return { success: true, data: { router: { token_denoms: { denoms: [] } } } };\n  }\n\n  /**\n   * Get escrow information for a token (placeholder - not implemented in Euclid API)\n   */\n  async getEscrows(tokenId: string): Promise<{ success: boolean; data?: { router: { escrows: unknown[] } }; error?: string }> {\n    // This method doesn't exist in the real Euclid API\n    console.warn(`getEscrows(${tokenId}) is not implemented in Euclid API`);\n    return { success: true, data: { router: { escrows: [] } } };\n  }\n\n  /**\n   * Get balance for a specific address and chain (legacy compatibility)\n   */\n  async getBalance(address: string, chainUID: string): Promise<{ success: boolean; data?: { balance?: { all?: Array<{ denom: string; amount: string }> } }; error?: string }> {\n    try {\n      const balances = await this.getUserBalances({ address, chain_uid: chainUID });\n      const data = {\n        balance: {\n          all: balances.map(b => ({\n            denom: b.token,\n            amount: b.balance\n          }))\n        }\n      };\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get balance' };\n    }\n  }\n\n  // ============================================================================\n  // USER DATA (GraphQL)\n  // ============================================================================\n\n  /**\n   * Get user token balances across all chains\n   */\n  async getUserBalances(user: CrossChainUser): Promise<UserBalance[]> {\n    return this.graphql.getUserBalances(user);\n  }\n\n  // ============================================================================\n  // ROUTING & SWAPS (REST)\n  // ============================================================================\n\n  /**\n   * Get routing paths for a swap\n   */\n  async getRoutes(request: GetRoutesRequest): Promise<RoutePath[]> {\n    return this.rest.getRoutes(request);\n  }\n\n  /**\n   * Legacy method that returns wrapped response format (used by swap controller)\n   */\n  async getRoutesWrapped(request: GetRoutesRequest): Promise<{ success: boolean; data?: { paths: RoutePath[] }; error?: string }> {\n    try {\n      const paths = await this.getRoutes(request);\n      return { success: true, data: { paths } };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get routes' };\n    }\n  }\n\n  /**\n   * Override getRoutes to return wrapped format by default for backward compatibility\n   */\n  async getRoutesLegacy(request: GetRoutesRequest): Promise<{ success: boolean; data?: { paths: RoutePath[] }; error?: string }> {\n    return this.getRoutesWrapped(request);\n  }\n\n  /**\n   * Get the optimal route for a swap\n   */\n  async getBestRoute(request: GetRoutesRequest): Promise<RoutePath | null> {\n    return this.rest.getBestRoute(request);\n  }\n\n  /**\n   * Simulate a swap to get expected output\n   */\n  async simulateSwap(request: {\n    amount_in: string;\n    token_in: string;\n    token_out: string;\n    chain_uid?: string;\n  }): Promise<{ amount_out: string; price_impact: string }> {\n    return this.rest.simulateSwap(request);\n  }\n\n  // ============================================================================\n  // TRANSACTION BUILDING (REST)\n  // ============================================================================\n\n  /**\n   * Create a swap transaction\n   */\n  async createSwapTransaction(request: SwapRequest): Promise<TransactionResponse> {\n    return this.rest.buildSwapTransaction(request);\n  }\n\n  /**\n   * Create a swap transaction with wrapped response\n   */\n  async createSwapTransactionWrapped(request: SwapRequest): Promise<{ success: boolean; data?: TransactionResponse; error?: string }> {\n    try {\n      const data = await this.createSwapTransaction(request);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to create swap transaction' };\n    }\n  }\n\n  /**\n   * Create a swap transaction (legacy method name)\n   */\n  async buildSwapTransaction(request: SwapRequest): Promise<TransactionResponse> {\n    return this.createSwapTransaction(request);\n  }\n\n  /**\n   * Create add liquidity transaction (legacy method name)\n   */\n  async createAddLiquidityTransaction(request: AddLiquidityRequest): Promise<TransactionResponse> {\n    return this.rest.buildAddLiquidityTransaction(request);\n  }\n\n  /**\n   * Create add liquidity transaction with wrapped response\n   */\n  async createAddLiquidityTransactionWrapped(request: AddLiquidityRequest): Promise<{ success: boolean; data?: TransactionResponse; error?: string }> {\n    try {\n      const data = await this.createAddLiquidityTransaction(request);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to create add liquidity transaction' };\n    }\n  }\n\n  /**\n   * Create remove liquidity transaction (legacy method name)\n   */\n  async createRemoveLiquidityTransaction(request: RemoveLiquidityRequest): Promise<TransactionResponse> {\n    return this.rest.buildRemoveLiquidityTransaction(request);\n  }\n\n  /**\n   * Create remove liquidity transaction with wrapped response\n   */\n  async createRemoveLiquidityTransactionWrapped(request: RemoveLiquidityRequest): Promise<{ success: boolean; data?: TransactionResponse; error?: string }> {\n    try {\n      const data = await this.createRemoveLiquidityTransaction(request);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to create remove liquidity transaction' };\n    }\n  }\n\n  /**\n   * Track transaction status (placeholder - not implemented in Euclid API)\n   */\n  async trackTransaction(txHash: string, chainUID: string): Promise<{ status: 'pending' | 'confirmed' | 'failed' }> {\n    // This would typically query blockchain for transaction status\n    console.warn(`trackTransaction(${txHash}, ${chainUID}) not implemented`);\n    return { status: 'pending' };\n  }\n\n  /**\n   * Track transaction status with wrapped response\n   */\n  async trackTransactionWrapped(txHash: string, chainUID: string): Promise<{ success: boolean; data?: { status: 'pending' | 'confirmed' | 'failed' }; error?: string }> {\n    try {\n      const data = await this.trackTransaction(txHash, chainUID);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to track transaction' };\n    }\n  }\n\n  /**\n   * Build an add liquidity transaction\n   */\n  async buildAddLiquidityTransaction(request: AddLiquidityRequest): Promise<TransactionResponse> {\n    return this.rest.buildAddLiquidityTransaction(request);\n  }\n\n  /**\n   * Build a remove liquidity transaction\n   */\n  async buildRemoveLiquidityTransaction(request: RemoveLiquidityRequest): Promise<TransactionResponse> {\n    return this.rest.buildRemoveLiquidityTransaction(request);\n  }\n\n  // ============================================================================\n  // TRANSACTION STATUS & GAS ESTIMATION (REST)\n  // ============================================================================\n\n  /**\n   * Get transaction status\n   */\n  async getTransactionStatus(txHash: string, chainUID: string): Promise<{\n    status: 'pending' | 'success' | 'failed';\n    blockHeight?: number;\n    gasUsed?: string;\n    fee?: string;\n  }> {\n    return this.rest.getTransactionStatus(txHash, chainUID);\n  }\n\n  /**\n   * Estimate gas for a transaction\n   */\n  async estimateGas(transaction: TransactionResponse): Promise<{ gasLimit: string; gasPrice: string }> {\n    return this.rest.estimateGas(transaction);\n  }\n\n  // ============================================================================\n  // CONVENIENCE METHODS\n  // ============================================================================\n\n  /**\n   * Get comprehensive market data\n   */\n  async getMarketData(): Promise<{\n    chains: EuclidChainConfig[];\n    tokens: TokenMetadata[];\n    pools: PoolInfo[];\n  }> {\n    const [chains, tokens, poolsResult] = await Promise.all([\n      this.getChains(),\n      this.getTokenMetadata(),\n      this.getAllPools(),\n    ]);\n\n    const pools = poolsResult.success ? (poolsResult.data || []) : [];\n\n    return { chains, tokens, pools };\n  }\n\n  /**\n   * Get user's complete portfolio\n   */\n  async getUserPortfolio(user: CrossChainUser): Promise<{\n    balances: UserBalance[];\n    chains: EuclidChainConfig[];\n    tokens: TokenMetadata[];\n  }> {\n    const [balances, chains, tokens] = await Promise.all([\n      this.getUserBalances(user),\n      this.getChains(),\n      this.getTokenMetadata(),\n    ]);\n\n    return { balances, chains, tokens };\n  }\n\n  /**\n   * Get quote for a swap with the best route\n   */\n  async getSwapQuote(\n    tokenIn: string,\n    tokenOut: string,\n    amountIn: string,\n    chainUIDs?: string[]\n  ): Promise<{\n    route: RoutePath | null;\n    expectedOutput: string;\n    priceImpact: string;\n  }> {\n    const routeRequest: GetRoutesRequest = {\n      amount_in: amountIn,\n      token_in: tokenIn,\n      token_out: tokenOut,\n      chain_uids: chainUIDs,\n    };\n\n    const [route, simulation] = await Promise.all([\n      this.getBestRoute(routeRequest),\n      this.simulateSwap({\n        amount_in: amountIn,\n        token_in: tokenIn,\n        token_out: tokenOut,\n      }).catch(() => ({ amount_out: '0', price_impact: '0' })),\n    ]);\n\n    return {\n      route,\n      expectedOutput: simulation.amount_out,\n      priceImpact: simulation.price_impact,\n    };\n  }\n}\n\n// Export the default instance\nexport const apiClient = new EuclidAPIClient();\n\n// Re-export types for convenience\nexport type {\n  EuclidChainConfig,\n  TokenMetadata,\n  PoolInfo,\n  UserBalance,\n  RoutePath,\n  SwapRequest,\n  AddLiquidityRequest,\n  RemoveLiquidityRequest,\n  TransactionResponse,\n  CrossChainUser,\n  GetRoutesRequest\n} from './types/api.types';\n","/**\n * Environment Configuration Utility\n * Browser-compatible configuration without process.env dependency\n */\n\ninterface EnvironmentConfig {\n  // API Configuration\n  euclidGraphqlEndpoint: string;\n  euclidRestEndpoint: string;\n  apiTimeout: number;\n\n  // Development Configuration\n  devServerPort: number;\n  devServerHost: string;\n  nodeEnv: 'development' | 'production' | 'test';\n\n  // Feature Flags\n  features: {\n    serviceWorker: boolean;\n    darkMode: boolean;\n    advancedRouting: boolean;\n    transactionHistory: boolean;\n    priceAlerts: boolean;\n    limitOrders: boolean;\n  };\n\n  // Performance Settings\n  refreshIntervals: {\n    routes: number;\n    marketData: number;\n    balances: number;\n  };\n  transactionTimeout: number;\n\n  // UI Configuration\n  ui: {\n    defaultSlippage: number;\n    animationDuration: number;\n    zIndex: {\n      modal: number;\n      tooltip: number;\n      dropdown: number;\n    };\n  };\n\n  // Chain Configuration\n  defaultChain: string;\n  supportedChains: string[];\n\n  // Wallet Configuration\n  defaultWallet: string;\n  supportedWallets: string[];\n\n  // Logging & Debug\n  logLevel: 'error' | 'warn' | 'info' | 'debug';\n  debugMode: boolean;\n  enablePerformanceMonitoring: boolean;\n}\n\n// Direct configuration - this works in browser environments\nexport const env: EnvironmentConfig = {\n  // API Configuration - using the values from your .env file\n  euclidGraphqlEndpoint: 'https://testnet.api.euclidprotocol.com/graphql',\n  euclidRestEndpoint: 'https://testnet.api.euclidprotocol.com/api/v1',\n  apiTimeout: 10000,\n\n  // Development Configuration\n  devServerPort: 3333,\n  devServerHost: 'localhost',\n  nodeEnv: 'development',\n\n  // Feature Flags\n  features: {\n    serviceWorker: true,\n    darkMode: true,\n    advancedRouting: true,\n    transactionHistory: true,\n    priceAlerts: false,\n    limitOrders: false,\n  },\n\n  // Performance Settings\n  refreshIntervals: {\n    routes: 30000,\n    marketData: 300000,\n    balances: 60000,\n  },\n  transactionTimeout: 300000,\n\n  // UI Configuration\n  ui: {\n    defaultSlippage: 0.5,\n    animationDuration: 250,\n    zIndex: {\n      modal: 1000,\n      tooltip: 1070,\n      dropdown: 1000,\n    },\n  },\n\n  // Chain Configuration\n  defaultChain: 'osmosis-1',\n  supportedChains: ['cosmoshub-4', 'osmosis-1', 'juno-1', 'stargaze-1', 'ethereum', 'polygon', 'arbitrum', 'optimism'],\n\n  // Wallet Configuration\n  defaultWallet: 'keplr',\n  supportedWallets: ['keplr', 'metamask', 'walletconnect', 'coinbase'],\n\n  // Logging & Debug\n  logLevel: 'info',\n  debugMode: false,\n  enablePerformanceMonitoring: false,\n};\n\n// Utility functions for common environment checks\nexport const isDevelopment = () => env.nodeEnv === 'development';\nexport const isProduction = () => env.nodeEnv === 'production';\nexport const isFeatureEnabled = (feature: keyof typeof env.features) => env.features[feature];\n\n// Export individual configurations for convenience\nexport const apiConfig = {\n  graphqlEndpoint: env.euclidGraphqlEndpoint,\n  restEndpoint: env.euclidRestEndpoint,\n  timeout: env.apiTimeout,\n};\n\nexport const uiConfig = env.ui;\nexport const featureFlags = env.features;\nexport const refreshIntervals = env.refreshIntervals;\n","// Chain identifiers\nexport const CHAIN_UIDS = {\n  ETHEREUM: 'ethereum',\n  POLYGON: 'polygon',\n  ARBITRUM: 'arbitrum',\n  OPTIMISM: 'optimism',\n  COSMOS_HUB: 'cosmoshub-4',\n  OSMOSIS: 'osmosis-1',\n  JUNO: 'juno-1',\n  STARGAZE: 'stargaze-1',\n} as const;\n\n// Wallet types\nexport const WALLET_TYPES = {\n  METAMASK: 'metamask',\n  KEPLR: 'keplr',\n  WALLET_CONNECT: 'walletconnect',\n  COINBASE: 'coinbase',\n  OTHER: 'other',\n} as const;\n\n// Transaction types\nexport const TRANSACTION_TYPES = {\n  SWAP: 'swap',\n  ADD_LIQUIDITY: 'add_liquidity',\n  REMOVE_LIQUIDITY: 'remove_liquidity',\n  TRANSFER: 'transfer',\n} as const;\n\n// Transaction statuses\nexport const TRANSACTION_STATUS = {\n  PENDING: 'pending',\n  SUCCESS: 'success',\n  FAILED: 'failed',\n} as const;\n\n// API endpoints\nexport const API_ENDPOINTS = {\n  CHAINS: '/api/chains',\n  TOKENS: '/api/tokens',\n  POOLS: '/api/pools',\n  ROUTES: '/api/routes',\n  BALANCES: '/api/balances',\n  TRANSACTIONS: '/api/transactions',\n  GRAPHQL: '/graphql',\n} as const;\n\n// Local storage keys\nexport const STORAGE_KEYS = {\n  WALLET_PREFERENCES: 'euclid_wallet_preferences',\n  THEME: 'euclid_theme',\n  SLIPPAGE: 'euclid_slippage',\n  TRANSACTION_HISTORY: 'euclid_transaction_history',\n} as const;\n\nimport { env } from './env';\n\n// Default configuration values (now sourced from environment)\nexport const DEFAULTS = {\n  SLIPPAGE: env.ui.defaultSlippage,\n  ROUTE_REFRESH_INTERVAL: env.refreshIntervals.routes,\n  MARKET_DATA_REFRESH_INTERVAL: env.refreshIntervals.marketData,\n  BALANCE_REFRESH_INTERVAL: env.refreshIntervals.balances,\n  TRANSACTION_TIMEOUT: env.transactionTimeout,\n} as const;\n\n// UI constants (now sourced from environment)\nexport const UI = {\n  MODAL_Z_INDEX: env.ui.zIndex.modal,\n  TOOLTIP_Z_INDEX: env.ui.zIndex.tooltip,\n  DROPDOWN_Z_INDEX: env.ui.zIndex.dropdown,\n  ANIMATION_DURATION: env.ui.animationDuration,\n} as const;\n\n// Validation regex patterns\nexport const PATTERNS = {\n  ETH_ADDRESS: /^0x[a-fA-F0-9]{40}$/,\n  COSMOS_ADDRESS: /^[a-z0-9]{39,59}$/,\n  DECIMAL_NUMBER: /^\\d*\\.?\\d*$/,\n  POSITIVE_NUMBER: /^[+]?([0-9]*[.])?[0-9]+$/,\n} as const;\n\n// Error messages\nexport const ERROR_MESSAGES = {\n  WALLET_NOT_CONNECTED: 'Wallet not connected',\n  INSUFFICIENT_BALANCE: 'Insufficient balance',\n  INVALID_AMOUNT: 'Invalid amount',\n  NO_ROUTE_FOUND: 'No route found for this swap',\n  TRANSACTION_FAILED: 'Transaction failed',\n  NETWORK_ERROR: 'Network error occurred',\n  TIMEOUT: 'Request timeout',\n} as const;\n\n// Success messages\nexport const SUCCESS_MESSAGES = {\n  WALLET_CONNECTED: 'Wallet connected successfully',\n  TRANSACTION_SUBMITTED: 'Transaction submitted',\n  TRANSACTION_CONFIRMED: 'Transaction confirmed',\n  LIQUIDITY_ADDED: 'Liquidity added successfully',\n  LIQUIDITY_REMOVED: 'Liquidity removed successfully',\n} as const;\n\n// Feature flags (now sourced from environment)\nexport const FEATURES = {\n  SERVICE_WORKER: env.features.serviceWorker,\n  DARK_MODE: env.features.darkMode,\n  ADVANCED_ROUTING: env.features.advancedRouting,\n  TRANSACTION_HISTORY: env.features.transactionHistory,\n  PRICE_ALERTS: env.features.priceAlerts,\n  LIMIT_ORDERS: env.features.limitOrders,\n} as const;\n"],"names":[],"mappings":"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"}