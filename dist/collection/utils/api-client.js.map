{"version":3,"file":"api-client.js","sourceRoot":"","sources":["../../src/utils/api-client.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Unified API Client for Euclid Protocol\n * Combines GraphQL and REST clients for a single interface\n */\n\nimport { euclidGraphQLClient } from './graphql-client';\nimport { euclidRESTClient } from './rest-client';\nimport type {\n  EuclidChainConfig,\n  TokenMetadata,\n  PoolInfo,\n  UserBalance,\n  RoutePath,\n  SwapRequest,\n  AddLiquidityRequest,\n  RemoveLiquidityRequest,\n  TransactionResponse,\n  CrossChainUser,\n  GetRoutesRequest\n} from './types/api.types';\n\n/**\n * Main API client that provides a unified interface to Euclid Protocol\n * Uses dedicated GraphQL and REST clients under the hood\n */\nexport class EuclidAPIClient {\n  private graphql = euclidGraphQLClient;\n  private rest = euclidRESTClient;\n\n  // ============================================================================\n  // CHAIN & TOKEN METADATA (GraphQL)\n  // ============================================================================\n\n  /**\n   * Get all supported blockchain networks\n   */\n  async getChains(options?: { showAllChains?: boolean; type?: string }): Promise<EuclidChainConfig[]> {\n    return this.graphql.getChains(options);\n  }\n\n  /**\n   * Get token metadata information\n   */\n  async getTokenMetadata(options?: {\n    limit?: number;\n    offset?: number;\n    verified?: boolean;\n    dex?: string[];\n    chainUids?: string[];\n    showVolume?: boolean;\n    search?: string;\n  }): Promise<TokenMetadata[]> {\n    return this.graphql.getTokenMetadata(options);\n  }\n\n  /**\n   * Search for tokens by symbol or name\n   */\n  async searchTokens(searchTerm: string, chainUID?: string): Promise<TokenMetadata[]> {\n    return this.graphql.searchTokens(searchTerm, chainUID);\n  }\n\n  /**\n   * Get a specific token by symbol and chain\n   */\n  async getTokenBySymbol(symbol: string, chainUID: string): Promise<TokenMetadata | null> {\n    return this.graphql.getTokenBySymbol(symbol, chainUID);\n  }\n\n  // ============================================================================\n  // LIQUIDITY POOLS (GraphQL)\n  // ============================================================================\n\n  /**\n   * Get all liquidity pools\n   * @param onlyVerified - Whether to show only verified pools (default: true)\n   */\n  async getAllPools(onlyVerified: boolean = true): Promise<{ success: boolean; data?: PoolInfo[]; error?: string }> {\n    try {\n      const data = await this.graphql.getAllPools(undefined, onlyVerified);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get pools' };\n    }\n  }\n\n  /**\n   * Get pool information for a specific token pair\n   */\n  async getPoolInfo(token1: string, token2: string): Promise<PoolInfo | null> {\n    return this.graphql.getPoolInfo(token1, token2);\n  }\n\n  // ============================================================================\n  // LEGACY METHOD ALIASES FOR BACKWARD COMPATIBILITY\n  // ============================================================================\n\n  /**\n   * @deprecated Use getChains() instead\n   */\n  async getAllChains(showAllChains?: boolean): Promise<{ success: boolean; data?: EuclidChainConfig[]; error?: string }> {\n    try {\n      const data = await this.getChains({ showAllChains });\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get chains' };\n    }\n  }\n\n  /**\n   * @deprecated Use getTokenMetadata() instead\n   */\n  async getAllTokens(): Promise<{ success: boolean; data?: TokenMetadata[]; error?: string }> {\n    try {\n      const data = await this.getTokenMetadata();\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get tokens' };\n    }\n  }\n\n  /**\n   * Get token denominations for a token ID (placeholder - not implemented in Euclid API)\n   */\n  async getTokenDenoms(tokenId: string): Promise<{ success: boolean; data?: { router: { token_denoms: { denoms: string[] } } }; error?: string }> {\n    // This method doesn't exist in the real Euclid API\n    console.warn(`getTokenDenoms(${tokenId}) is not implemented in Euclid API`);\n    return { success: true, data: { router: { token_denoms: { denoms: [] } } } };\n  }\n\n  /**\n   * Get escrow information for a token (placeholder - not implemented in Euclid API)\n   */\n  async getEscrows(tokenId: string): Promise<{ success: boolean; data?: { router: { escrows: unknown[] } }; error?: string }> {\n    // This method doesn't exist in the real Euclid API\n    console.warn(`getEscrows(${tokenId}) is not implemented in Euclid API`);\n    return { success: true, data: { router: { escrows: [] } } };\n  }\n\n  /**\n   * Get balance for a specific address and chain (legacy compatibility)\n   */\n  async getBalance(address: string, chainUID: string): Promise<{ success: boolean; data?: { balance?: { all?: Array<{ denom: string; amount: string }> } }; error?: string }> {\n    try {\n      const balances = await this.getUserBalances({ address, chain_uid: chainUID });\n      const data = {\n        balance: {\n          all: balances.map(b => ({\n            denom: b.token,\n            amount: b.balance\n          }))\n        }\n      };\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get balance' };\n    }\n  }\n\n  // ============================================================================\n  // USER DATA (GraphQL)\n  // ============================================================================\n\n  /**\n   * Get user token balances across all chains\n   */\n  async getUserBalances(user: CrossChainUser): Promise<UserBalance[]> {\n    return this.graphql.getUserBalances(user);\n  }\n\n  // ============================================================================\n  // ROUTING & SWAPS (REST)\n  // ============================================================================\n\n  /**\n   * Get routing paths for a swap\n   */\n  async getRoutes(request: GetRoutesRequest): Promise<RoutePath[]> {\n    return this.rest.getRoutes(request);\n  }\n\n  /**\n   * Legacy method that returns wrapped response format (used by swap controller)\n   */\n  async getRoutesWrapped(request: GetRoutesRequest): Promise<{ success: boolean; data?: { paths: RoutePath[] }; error?: string }> {\n    try {\n      const paths = await this.getRoutes(request);\n      return { success: true, data: { paths } };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to get routes' };\n    }\n  }\n\n  /**\n   * Override getRoutes to return wrapped format by default for backward compatibility\n   */\n  async getRoutesLegacy(request: GetRoutesRequest): Promise<{ success: boolean; data?: { paths: RoutePath[] }; error?: string }> {\n    return this.getRoutesWrapped(request);\n  }\n\n  /**\n   * Get the optimal route for a swap\n   */\n  async getBestRoute(request: GetRoutesRequest): Promise<RoutePath | null> {\n    return this.rest.getBestRoute(request);\n  }\n\n  /**\n   * Simulate a swap to get expected output\n   */\n  async simulateSwap(request: {\n    amount_in: string;\n    token_in: string;\n    token_out: string;\n    chain_uid?: string;\n  }): Promise<{ amount_out: string; price_impact: string }> {\n    return this.rest.simulateSwap(request);\n  }\n\n  // ============================================================================\n  // TRANSACTION BUILDING (REST)\n  // ============================================================================\n\n  /**\n   * Create a swap transaction\n   */\n  async createSwapTransaction(request: SwapRequest): Promise<TransactionResponse> {\n    return this.rest.buildSwapTransaction(request);\n  }\n\n  /**\n   * Create a swap transaction with wrapped response\n   */\n  async createSwapTransactionWrapped(request: SwapRequest): Promise<{ success: boolean; data?: TransactionResponse; error?: string }> {\n    try {\n      const data = await this.createSwapTransaction(request);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to create swap transaction' };\n    }\n  }\n\n  /**\n   * Create a swap transaction (legacy method name)\n   */\n  async buildSwapTransaction(request: SwapRequest): Promise<TransactionResponse> {\n    return this.createSwapTransaction(request);\n  }\n\n  /**\n   * Create add liquidity transaction (legacy method name)\n   */\n  async createAddLiquidityTransaction(request: AddLiquidityRequest): Promise<TransactionResponse> {\n    return this.rest.buildAddLiquidityTransaction(request);\n  }\n\n  /**\n   * Create add liquidity transaction with wrapped response\n   */\n  async createAddLiquidityTransactionWrapped(request: AddLiquidityRequest): Promise<{ success: boolean; data?: TransactionResponse; error?: string }> {\n    try {\n      const data = await this.createAddLiquidityTransaction(request);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to create add liquidity transaction' };\n    }\n  }\n\n  /**\n   * Create remove liquidity transaction (legacy method name)\n   */\n  async createRemoveLiquidityTransaction(request: RemoveLiquidityRequest): Promise<TransactionResponse> {\n    return this.rest.buildRemoveLiquidityTransaction(request);\n  }\n\n  /**\n   * Create remove liquidity transaction with wrapped response\n   */\n  async createRemoveLiquidityTransactionWrapped(request: RemoveLiquidityRequest): Promise<{ success: boolean; data?: TransactionResponse; error?: string }> {\n    try {\n      const data = await this.createRemoveLiquidityTransaction(request);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to create remove liquidity transaction' };\n    }\n  }\n\n  /**\n   * Track transaction status (placeholder - not implemented in Euclid API)\n   */\n  async trackTransaction(txHash: string, chainUID: string): Promise<{ status: 'pending' | 'confirmed' | 'failed' }> {\n    // This would typically query blockchain for transaction status\n    console.warn(`trackTransaction(${txHash}, ${chainUID}) not implemented`);\n    return { status: 'pending' };\n  }\n\n  /**\n   * Track transaction status with wrapped response\n   */\n  async trackTransactionWrapped(txHash: string, chainUID: string): Promise<{ success: boolean; data?: { status: 'pending' | 'confirmed' | 'failed' }; error?: string }> {\n    try {\n      const data = await this.trackTransaction(txHash, chainUID);\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to track transaction' };\n    }\n  }\n\n  /**\n   * Build an add liquidity transaction\n   */\n  async buildAddLiquidityTransaction(request: AddLiquidityRequest): Promise<TransactionResponse> {\n    return this.rest.buildAddLiquidityTransaction(request);\n  }\n\n  /**\n   * Build a remove liquidity transaction\n   */\n  async buildRemoveLiquidityTransaction(request: RemoveLiquidityRequest): Promise<TransactionResponse> {\n    return this.rest.buildRemoveLiquidityTransaction(request);\n  }\n\n  // ============================================================================\n  // TRANSACTION STATUS & GAS ESTIMATION (REST)\n  // ============================================================================\n\n  /**\n   * Get transaction status\n   */\n  async getTransactionStatus(txHash: string, chainUID: string): Promise<{\n    status: 'pending' | 'success' | 'failed';\n    blockHeight?: number;\n    gasUsed?: string;\n    fee?: string;\n  }> {\n    return this.rest.getTransactionStatus(txHash, chainUID);\n  }\n\n  /**\n   * Estimate gas for a transaction\n   */\n  async estimateGas(transaction: TransactionResponse): Promise<{ gasLimit: string; gasPrice: string }> {\n    return this.rest.estimateGas(transaction);\n  }\n\n  // ============================================================================\n  // CONVENIENCE METHODS\n  // ============================================================================\n\n  /**\n   * Get comprehensive market data\n   */\n  async getMarketData(): Promise<{\n    chains: EuclidChainConfig[];\n    tokens: TokenMetadata[];\n    pools: PoolInfo[];\n  }> {\n    const [chains, tokens, poolsResult] = await Promise.all([\n      this.getChains(),\n      this.getTokenMetadata(),\n      this.getAllPools(),\n    ]);\n\n    const pools = poolsResult.success ? (poolsResult.data || []) : [];\n\n    return { chains, tokens, pools };\n  }\n\n  /**\n   * Get user's complete portfolio\n   */\n  async getUserPortfolio(user: CrossChainUser): Promise<{\n    balances: UserBalance[];\n    chains: EuclidChainConfig[];\n    tokens: TokenMetadata[];\n  }> {\n    const [balances, chains, tokens] = await Promise.all([\n      this.getUserBalances(user),\n      this.getChains(),\n      this.getTokenMetadata(),\n    ]);\n\n    return { balances, chains, tokens };\n  }\n\n  /**\n   * Get quote for a swap with the best route\n   */\n  async getSwapQuote(\n    tokenIn: string,\n    tokenOut: string,\n    amountIn: string,\n    chainUIDs?: string[]\n  ): Promise<{\n    route: RoutePath | null;\n    expectedOutput: string;\n    priceImpact: string;\n  }> {\n    const routeRequest: GetRoutesRequest = {\n      amount_in: amountIn,\n      token_in: tokenIn,\n      token_out: tokenOut,\n      chain_uids: chainUIDs,\n    };\n\n    const [route, simulation] = await Promise.all([\n      this.getBestRoute(routeRequest),\n      this.simulateSwap({\n        amount_in: amountIn,\n        token_in: tokenIn,\n        token_out: tokenOut,\n      }).catch(() => ({ amount_out: '0', price_impact: '0' })),\n    ]);\n\n    return {\n      route,\n      expectedOutput: simulation.amount_out,\n      priceImpact: simulation.price_impact,\n    };\n  }\n}\n\n// Export the default instance\nexport const apiClient = new EuclidAPIClient();\n\n// Re-export types for convenience\nexport type {\n  EuclidChainConfig,\n  TokenMetadata,\n  PoolInfo,\n  UserBalance,\n  RoutePath,\n  SwapRequest,\n  AddLiquidityRequest,\n  RemoveLiquidityRequest,\n  TransactionResponse,\n  CrossChainUser,\n  GetRoutesRequest\n} from './types/api.types';\n"]}