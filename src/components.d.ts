/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonSize, ButtonVariant } from "./components/ui/euclid-button/euclid-button";
import { EuclidChainConfig, PoolInfo, TokenMetadata } from "./utils/types/api.types";
import { ChainDisplayMode, ChainField } from "./components/ui/euclid-chain-item/euclid-chain-item";
import { ChainDisplayMode as ChainDisplayMode1, ChainField as ChainField1 } from "./components/ui/euclid-chain-item/euclid-chain-item";
import { DataItem, DataType, DisplayMode, FilterState } from "./components/core/euclid-data-list/euclid-data-list";
import { LiquidityPoolInfo, LiquidityPosition, LiquidityToken } from "./components/features/euclid-liquidity-card/euclid-liquidity-card";
import { DisplayMode as DisplayMode1, FilterConfig, ListFilters, ListItemData, ListItemType, SortConfig } from "./components/ui/euclid-list-items/euclid-list-items";
import { PoolFilters, UserPoolPosition } from "./components/features/euclid-pools-list/euclid-pools-list";
import { ChartDataPoint, PoolPosition, PortfolioStats, StakingPosition, TokenBalance, Transaction } from "./components/features/euclid-portfolio-overview/euclid-portfolio-overview";
import { SwapQuote, SwapSettings, SwapToken } from "./components/features/euclid-swap-card/euclid-swap-card";
import { TokenInfo } from "./components/ui/euclid-token-content/euclid-token-content";
import { TokenInfo as TokenInfo1 } from "./components/ui/euclid-token-input/euclid-token-input";
import { TokenDisplayMode, TokenField } from "./components/ui/euclid-token-item/euclid-token-item";
import { TokenDisplayMode as TokenDisplayMode1, TokenField as TokenField1 } from "./components/ui/euclid-token-item/euclid-token-item";
import { TokenFilters } from "./components/features/euclid-tokens-list/euclid-tokens-list";
import { WalletProvider } from "./components/ui/euclid-wallet-content/euclid-wallet-content";
import { UserPoolPosition as UserPoolPosition1 } from "./components/features/euclid-pools-list/pool-item";
import { PoolFilters as PoolFilters1 } from "./components/features/euclid-pools-list/pools-filters";
export { ButtonSize, ButtonVariant } from "./components/ui/euclid-button/euclid-button";
export { EuclidChainConfig, PoolInfo, TokenMetadata } from "./utils/types/api.types";
export { ChainDisplayMode, ChainField } from "./components/ui/euclid-chain-item/euclid-chain-item";
export { ChainDisplayMode as ChainDisplayMode1, ChainField as ChainField1 } from "./components/ui/euclid-chain-item/euclid-chain-item";
export { DataItem, DataType, DisplayMode, FilterState } from "./components/core/euclid-data-list/euclid-data-list";
export { LiquidityPoolInfo, LiquidityPosition, LiquidityToken } from "./components/features/euclid-liquidity-card/euclid-liquidity-card";
export { DisplayMode as DisplayMode1, FilterConfig, ListFilters, ListItemData, ListItemType, SortConfig } from "./components/ui/euclid-list-items/euclid-list-items";
export { PoolFilters, UserPoolPosition } from "./components/features/euclid-pools-list/euclid-pools-list";
export { ChartDataPoint, PoolPosition, PortfolioStats, StakingPosition, TokenBalance, Transaction } from "./components/features/euclid-portfolio-overview/euclid-portfolio-overview";
export { SwapQuote, SwapSettings, SwapToken } from "./components/features/euclid-swap-card/euclid-swap-card";
export { TokenInfo } from "./components/ui/euclid-token-content/euclid-token-content";
export { TokenInfo as TokenInfo1 } from "./components/ui/euclid-token-input/euclid-token-input";
export { TokenDisplayMode, TokenField } from "./components/ui/euclid-token-item/euclid-token-item";
export { TokenDisplayMode as TokenDisplayMode1, TokenField as TokenField1 } from "./components/ui/euclid-token-item/euclid-token-item";
export { TokenFilters } from "./components/features/euclid-tokens-list/euclid-tokens-list";
export { WalletProvider } from "./components/ui/euclid-wallet-content/euclid-wallet-content";
export { UserPoolPosition as UserPoolPosition1 } from "./components/features/euclid-pools-list/pool-item";
export { PoolFilters as PoolFilters1 } from "./components/features/euclid-pools-list/pools-filters";
export namespace Components {
    interface EuclidButton {
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default false
         */
        "fullWidth": boolean;
        "href"?: string;
        /**
          * @default false
         */
        "loading": boolean;
        /**
          * @default 'md'
         */
        "size": ButtonSize;
        /**
          * @default 'button'
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * @default 'primary'
         */
        "variant": ButtonVariant;
    }
    interface EuclidChainItem {
        /**
          * Chain data to display
         */
        "chain": EuclidChainConfig;
        /**
          * Whether the item is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Display mode: card (full info), list-item (compact row), compact (minimal)
          * @default 'list-item'
         */
        "displayMode": ChainDisplayMode;
        /**
          * Whether the item is selectable (shows hover states, emits events)
          * @default false
         */
        "selectable": boolean;
        /**
          * Whether the item is currently selected
          * @default false
         */
        "selected": boolean;
        /**
          * Fields to show in the display
          * @default ['logo', 'name', 'type']
         */
        "showFields": ChainField[];
    }
    interface EuclidChainsList {
        /**
          * Component card title
          * @default 'Select Chain'
         */
        "cardTitle": string;
        /**
          * Chain data (gets from market store automatically)
          * @default []
         */
        "chains": EuclidChainConfig[];
        /**
          * Display mode for chain items
          * @default 'list-item'
         */
        "displayMode": ChainDisplayMode1;
        /**
          * Whether to show filters
          * @default true
         */
        "filterable": boolean;
        /**
          * Items per page (0 = no pagination)
          * @default 0
         */
        "itemsPerPage": number;
        /**
          * Whether component is loading
          * @default false
         */
        "loading": boolean;
        /**
          * Whether to show search functionality
          * @default true
         */
        "searchable": boolean;
        /**
          * Whether chains are selectable
          * @default true
         */
        "selectable": boolean;
        /**
          * Fields to show for each chain
          * @default ['logo', 'name', 'type']
         */
        "showFields": ChainField1[];
    }
    interface EuclidCoreProvider {
    }
    interface EuclidDataList {
        /**
          * Card title
          * @default ''
         */
        "cardTitle": string;
        /**
          * Type of data to display: tokens, chains, or pools
         */
        "dataType": DataType;
        /**
          * Display mode for items
          * @default 'card'
         */
        "displayMode": DisplayMode;
        /**
          * Whether to enable filtering
          * @default true
         */
        "filterable": boolean;
        /**
          * Items per page for pagination
          * @default 10
         */
        "itemsPerPage": number;
        /**
          * External loading state override
          * @default false
         */
        "loading": boolean;
        /**
          * Whether to enable search
          * @default true
         */
        "searchable": boolean;
        /**
          * Whether items are selectable
          * @default true
         */
        "selectable": boolean;
        /**
          * Fields to show in item components (comma-separated string)
          * @default ''
         */
        "showFields": string;
        /**
          * Whether to show statistics
          * @default true
         */
        "showStats": boolean;
        /**
          * Whether to enable sorting
          * @default true
         */
        "sortable": boolean;
        /**
          * Wallet address for pool positions
          * @default ''
         */
        "walletAddress": string;
    }
    interface EuclidLiquidityCard {
        /**
          * Card title
          * @default 'Manage Liquidity'
         */
        "cardTitle": string;
        /**
          * Default slippage tolerance (0.5 = 0.5%)
          * @default 0.5
         */
        "defaultSlippage": number;
        /**
          * Whether the liquidity functionality is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Whether the component is in loading state
          * @default false
         */
        "loading": boolean;
        /**
          * LP token amount for removal
          * @default ''
         */
        "lpTokenAmount": string;
        /**
          * Current mode: 'add' or 'remove'
          * @default 'add'
         */
        "mode": 'add' | 'remove';
        /**
          * Available pools (legacy - use store instead)
          * @deprecated Use marketStore instead
          * @default []
         */
        "pools": LiquidityPoolInfo[];
        /**
          * User's liquidity positions
          * @default []
         */
        "positions": LiquidityPosition[];
        /**
          * Selected pool for liquidity operations
          * @default null
         */
        "selectedPool": LiquidityPoolInfo | null;
        /**
          * Token A amount input
          * @default ''
         */
        "tokenAAmount": string;
        /**
          * Token B amount input
          * @default ''
         */
        "tokenBAmount": string;
        /**
          * Available tokens for liquidity provision (legacy - use store instead)
          * @deprecated Use marketStore instead
          * @default []
         */
        "tokens": LiquidityToken[];
        /**
          * Connected wallet address
          * @default ''
         */
        "walletAddress": string;
    }
    interface EuclidLiquidityController {
    }
    interface EuclidListItems {
        /**
          * Display mode for items
          * @default 'card'
         */
        "displayMode": DisplayMode1;
        /**
          * Filter configurations
          * @default []
         */
        "filterConfigs": FilterConfig[];
        /**
          * Whether to show filters
          * @default true
         */
        "filterable": boolean;
        /**
          * Additional props to pass to item components
          * @default {}
         */
        "itemProps": Record<string, unknown>;
        /**
          * Type of items to display (determines data source and item component)
          * @default 'token'
         */
        "itemType": ListItemType;
        /**
          * Items data (will use store data if available, fallback to this)
          * @default []
         */
        "items": ListItemData[];
        /**
          * Items per page (0 = no pagination)
          * @default 12
         */
        "itemsPerPage": number;
        /**
          * Component title
          * @default 'Items'
         */
        "listTitle": string;
        /**
          * Whether component is loading
          * @default false
         */
        "loading": boolean;
        /**
          * Fields to search in (e.g., ['displayName', 'tokenId'])
          * @default ['name']
         */
        "searchFields": string[];
        /**
          * Whether to show search functionality
          * @default true
         */
        "searchable": boolean;
        /**
          * Whether items are selectable
          * @default true
         */
        "selectable": boolean;
        /**
          * Fields to show for each item (passed to item component)
          * @default []
         */
        "showFields": string[];
        /**
          * Sort configurations
          * @default []
         */
        "sortConfigs": SortConfig[];
    }
    interface EuclidMarketDataController {
    }
    interface EuclidModal {
    }
    interface EuclidPoolsList {
        /**
          * Card title
          * @default 'Liquidity Pools'
         */
        "cardTitle": string;
        /**
          * Items per page for pagination
          * @default 10
         */
        "itemsPerPage": number;
        /**
          * Whether the component is in loading state (overrides store loading)
          * @default false
         */
        "loading": boolean;
        /**
          * Available pools data (gets from market store automatically)
          * @deprecated Use store instead
          * @default []
         */
        "pools": PoolInfo[];
        /**
          * User's positions in pools
          * @default []
         */
        "positions": UserPoolPosition[];
        /**
          * Token metadata for logos and display names (gets from market store automatically)
          * @deprecated Use store instead
          * @default []
         */
        "tokenMetadata": TokenMetadata[];
        /**
          * Connected wallet address
          * @default ''
         */
        "walletAddress": string;
    }
    interface EuclidPortfolioOverview {
        /**
          * Card title
          * @default 'Portfolio Overview'
         */
        "cardTitle": string;
        /**
          * Chart data for portfolio value over time
          * @default []
         */
        "chartData": ChartDataPoint[];
        /**
          * Whether the component is in loading state
          * @default false
         */
        "loading": boolean;
        /**
          * User's liquidity pool positions
          * @default []
         */
        "poolPositions": PoolPosition[];
        /**
          * Portfolio statistics
          * @default null
         */
        "portfolioStats": PortfolioStats | null;
        /**
          * Whether to show detailed analytics
          * @default true
         */
        "showAnalytics": boolean;
        /**
          * User's staking positions
          * @default []
         */
        "stakingPositions": StakingPosition[];
        /**
          * Time period for charts and stats
          * @default '1W'
         */
        "timePeriod": '1D' | '1W' | '1M' | '3M' | '1Y' | 'ALL';
        /**
          * User's token balances
          * @default []
         */
        "tokenBalances": TokenBalance[];
        /**
          * Recent transactions
          * @default []
         */
        "transactions": Transaction[];
        /**
          * Connected wallet address
          * @default ''
         */
        "walletAddress": string;
    }
    interface EuclidSwapCard {
        /**
          * Card title
          * @default 'Swap Tokens'
         */
        "cardTitle": string;
        /**
          * Default slippage tolerance (0.1 = 0.1%)
          * @default 0.5
         */
        "defaultSlippage": number;
        /**
          * Whether the swap functionality is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Input amount value
          * @default ''
         */
        "inputAmount": string;
        /**
          * Currently selected input token
          * @default null
         */
        "inputToken": SwapToken | null;
        /**
          * Whether the component is in loading state
          * @default false
         */
        "loading": boolean;
        /**
          * Currently selected output token
          * @default null
         */
        "outputToken": SwapToken | null;
        /**
          * Whether to show advanced settings
          * @default false
         */
        "showAdvanced": boolean;
        /**
          * Available tokens for swapping (gets from market store automatically)
          * @deprecated Use store instead
          * @default []
         */
        "tokens": SwapToken[];
        /**
          * Connected wallet address
          * @default ''
         */
        "walletAddress": string;
    }
    interface EuclidSwapController {
    }
    interface EuclidTokenContent {
    }
    interface EuclidTokenInput {
        /**
          * Whether the input is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Error message to display
         */
        "error"?: string;
        /**
          * Label for the input
         */
        "label"?: string;
        /**
          * Loading state
          * @default false
         */
        "loading": boolean;
        /**
          * Placeholder text for the input
          * @default '0.0'
         */
        "placeholder": string;
        /**
          * Whether to show the balance
          * @default true
         */
        "showBalance": boolean;
        /**
          * Whether to show the max button
          * @default true
         */
        "showMax": boolean;
        /**
          * The current token selection
         */
        "token"?: TokenInfo1;
        /**
          * Whether the token selector is clickable
          * @default true
         */
        "tokenSelectable": boolean;
        /**
          * The input value (amount)
          * @default ''
         */
        "value": string;
    }
    interface EuclidTokenItem {
        /**
          * @default 'card'
         */
        "displayMode": TokenDisplayMode;
        /**
          * @default true
         */
        "selectable": boolean;
        /**
          * @default false
         */
        "selected": boolean;
        /**
          * @default ['logo', 'name', 'price', 'change', 'volume24h', 'decimals', 'chains', 'tags', 'verified']
         */
        "showFields": TokenField[];
        "token": TokenMetadata;
    }
    interface EuclidTokensList {
        /**
          * Card title
          * @default 'Available Tokens'
         */
        "cardTitle": string;
        /**
          * Display mode for token items
          * @default 'card'
         */
        "displayMode": TokenDisplayMode1;
        /**
          * Whether to show filters
          * @default true
         */
        "filterable": boolean;
        /**
          * Items per page for pagination (0 = no pagination)
          * @default 12
         */
        "itemsPerPage": number;
        /**
          * Whether the component is in loading state (overrides store loading)
          * @default false
         */
        "loading": boolean;
        /**
          * Whether to show search functionality
          * @default true
         */
        "searchable": boolean;
        /**
          * Whether tokens are selectable
          * @default true
         */
        "selectable": boolean;
        /**
          * Fields to show for each token
          * @default ['logo', 'name', 'price', 'change', 'volume24h', 'decimals', 'chains', 'tags', 'verified']
         */
        "showFields": TokenField1[];
        /**
          * Available tokens data (gets from market store automatically)
          * @deprecated Use store instead
          * @default []
         */
        "tokens": TokenMetadata[];
    }
    interface EuclidTxTrackerController {
    }
    interface EuclidUserDataController {
    }
    interface EuclidWalletContent {
    }
    interface EuclidWalletController {
    }
    interface PoolItem {
        "pool": PoolInfo;
        "position"?: UserPoolPosition1;
        /**
          * @default []
         */
        "tokens": TokenMetadata[];
        "walletAddress"?: string;
    }
    interface PoolsFilters {
        "filters": PoolFilters1;
        /**
          * @default ''
         */
        "walletAddress": string;
    }
    interface PoolsLoading {
        /**
          * @default 6
         */
        "count": number;
    }
    interface PoolsStats {
        /**
          * @default 0
         */
        "filteredPools": number;
        /**
          * @default 0
         */
        "totalPools": number;
        /**
          * @default 0
         */
        "totalTvl": number;
        /**
          * @default 0
         */
        "userPositions": number;
        "walletAddress"?: string;
    }
}
export interface EuclidChainItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEuclidChainItemElement;
}
export interface EuclidChainsListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEuclidChainsListElement;
}
export interface EuclidDataListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEuclidDataListElement;
}
export interface EuclidLiquidityCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEuclidLiquidityCardElement;
}
export interface EuclidListItemsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEuclidListItemsElement;
}
export interface EuclidPoolsListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEuclidPoolsListElement;
}
export interface EuclidPortfolioOverviewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEuclidPortfolioOverviewElement;
}
export interface EuclidSwapCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEuclidSwapCardElement;
}
export interface EuclidTokenContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEuclidTokenContentElement;
}
export interface EuclidTokenInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEuclidTokenInputElement;
}
export interface EuclidTokenItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEuclidTokenItemElement;
}
export interface EuclidTokensListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEuclidTokensListElement;
}
export interface EuclidWalletContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEuclidWalletContentElement;
}
export interface PoolItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPoolItemElement;
}
export interface PoolsFiltersCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPoolsFiltersElement;
}
declare global {
    interface HTMLEuclidButtonElement extends Components.EuclidButton, HTMLStencilElement {
    }
    var HTMLEuclidButtonElement: {
        prototype: HTMLEuclidButtonElement;
        new (): HTMLEuclidButtonElement;
    };
    interface HTMLEuclidChainItemElementEventMap {
        "chainSelect": EuclidChainConfig;
        "chainHover": EuclidChainConfig;
    }
    interface HTMLEuclidChainItemElement extends Components.EuclidChainItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEuclidChainItemElementEventMap>(type: K, listener: (this: HTMLEuclidChainItemElement, ev: EuclidChainItemCustomEvent<HTMLEuclidChainItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEuclidChainItemElementEventMap>(type: K, listener: (this: HTMLEuclidChainItemElement, ev: EuclidChainItemCustomEvent<HTMLEuclidChainItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEuclidChainItemElement: {
        prototype: HTMLEuclidChainItemElement;
        new (): HTMLEuclidChainItemElement;
    };
    interface HTMLEuclidChainsListElementEventMap {
        "chainSelected": EuclidChainConfig;
        "chainHover": EuclidChainConfig;
    }
    interface HTMLEuclidChainsListElement extends Components.EuclidChainsList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEuclidChainsListElementEventMap>(type: K, listener: (this: HTMLEuclidChainsListElement, ev: EuclidChainsListCustomEvent<HTMLEuclidChainsListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEuclidChainsListElementEventMap>(type: K, listener: (this: HTMLEuclidChainsListElement, ev: EuclidChainsListCustomEvent<HTMLEuclidChainsListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEuclidChainsListElement: {
        prototype: HTMLEuclidChainsListElement;
        new (): HTMLEuclidChainsListElement;
    };
    interface HTMLEuclidCoreProviderElement extends Components.EuclidCoreProvider, HTMLStencilElement {
    }
    var HTMLEuclidCoreProviderElement: {
        prototype: HTMLEuclidCoreProviderElement;
        new (): HTMLEuclidCoreProviderElement;
    };
    interface HTMLEuclidDataListElementEventMap {
        "itemSelected": { item: DataItem; id: string };
        "itemHover": { item: DataItem; id: string };
        "filtersChanged": { filters: FilterState; resultCount: number };
        "pageChanged": { page: number; totalPages: number; itemsPerPage: number };
    }
    interface HTMLEuclidDataListElement extends Components.EuclidDataList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEuclidDataListElementEventMap>(type: K, listener: (this: HTMLEuclidDataListElement, ev: EuclidDataListCustomEvent<HTMLEuclidDataListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEuclidDataListElementEventMap>(type: K, listener: (this: HTMLEuclidDataListElement, ev: EuclidDataListCustomEvent<HTMLEuclidDataListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEuclidDataListElement: {
        prototype: HTMLEuclidDataListElement;
        new (): HTMLEuclidDataListElement;
    };
    interface HTMLEuclidLiquidityCardElementEventMap {
        "liquidityAdded": {
    pool: LiquidityPoolInfo;
    tokenAAmount: string;
    tokenBAmount: string;
    expectedLpTokens: string;
    slippage: number;
  };
        "liquidityRemoved": {
    pool: LiquidityPoolInfo;
    lpTokenAmount: string;
    expectedTokenA: string;
    expectedTokenB: string;
    slippage: number;
  };
        "poolSelected": PoolInfo;
        "quoteRequested": {
    pool: PoolInfo;
    tokenAAmount?: string;
    tokenBAmount?: string;
    lpTokenAmount?: string;
    mode: 'add' | 'remove';
  };
    }
    interface HTMLEuclidLiquidityCardElement extends Components.EuclidLiquidityCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEuclidLiquidityCardElementEventMap>(type: K, listener: (this: HTMLEuclidLiquidityCardElement, ev: EuclidLiquidityCardCustomEvent<HTMLEuclidLiquidityCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEuclidLiquidityCardElementEventMap>(type: K, listener: (this: HTMLEuclidLiquidityCardElement, ev: EuclidLiquidityCardCustomEvent<HTMLEuclidLiquidityCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEuclidLiquidityCardElement: {
        prototype: HTMLEuclidLiquidityCardElement;
        new (): HTMLEuclidLiquidityCardElement;
    };
    interface HTMLEuclidLiquidityControllerElement extends Components.EuclidLiquidityController, HTMLStencilElement {
    }
    var HTMLEuclidLiquidityControllerElement: {
        prototype: HTMLEuclidLiquidityControllerElement;
        new (): HTMLEuclidLiquidityControllerElement;
    };
    interface HTMLEuclidListItemsElementEventMap {
        "itemSelected": ListItemData;
        "itemHover": ListItemData;
        "filtersChanged": ListFilters;
    }
    interface HTMLEuclidListItemsElement extends Components.EuclidListItems, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEuclidListItemsElementEventMap>(type: K, listener: (this: HTMLEuclidListItemsElement, ev: EuclidListItemsCustomEvent<HTMLEuclidListItemsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEuclidListItemsElementEventMap>(type: K, listener: (this: HTMLEuclidListItemsElement, ev: EuclidListItemsCustomEvent<HTMLEuclidListItemsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEuclidListItemsElement: {
        prototype: HTMLEuclidListItemsElement;
        new (): HTMLEuclidListItemsElement;
    };
    interface HTMLEuclidMarketDataControllerElement extends Components.EuclidMarketDataController, HTMLStencilElement {
    }
    var HTMLEuclidMarketDataControllerElement: {
        prototype: HTMLEuclidMarketDataControllerElement;
        new (): HTMLEuclidMarketDataControllerElement;
    };
    interface HTMLEuclidModalElement extends Components.EuclidModal, HTMLStencilElement {
    }
    var HTMLEuclidModalElement: {
        prototype: HTMLEuclidModalElement;
        new (): HTMLEuclidModalElement;
    };
    interface HTMLEuclidPoolsListElementEventMap {
        "poolSelected": PoolInfo;
        "addLiquidity": PoolInfo;
        "removeLiquidity": { pool: PoolInfo; position: UserPoolPosition };
        "stakeTokens": { pool: PoolInfo; position?: UserPoolPosition };
        "claimRewards": { pool: PoolInfo; position: UserPoolPosition };
        "filtersChanged": PoolFilters;
    }
    interface HTMLEuclidPoolsListElement extends Components.EuclidPoolsList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEuclidPoolsListElementEventMap>(type: K, listener: (this: HTMLEuclidPoolsListElement, ev: EuclidPoolsListCustomEvent<HTMLEuclidPoolsListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEuclidPoolsListElementEventMap>(type: K, listener: (this: HTMLEuclidPoolsListElement, ev: EuclidPoolsListCustomEvent<HTMLEuclidPoolsListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEuclidPoolsListElement: {
        prototype: HTMLEuclidPoolsListElement;
        new (): HTMLEuclidPoolsListElement;
    };
    interface HTMLEuclidPortfolioOverviewElementEventMap {
        "positionSelected": PoolPosition;
        "managePosition": PoolPosition;
        "stakeMore": StakingPosition;
        "unstake": StakingPosition;
        "claimRewards": PoolPosition | StakingPosition;
        "viewTransaction": Transaction;
        "timePeriodChanged": string;
    }
    interface HTMLEuclidPortfolioOverviewElement extends Components.EuclidPortfolioOverview, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEuclidPortfolioOverviewElementEventMap>(type: K, listener: (this: HTMLEuclidPortfolioOverviewElement, ev: EuclidPortfolioOverviewCustomEvent<HTMLEuclidPortfolioOverviewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEuclidPortfolioOverviewElementEventMap>(type: K, listener: (this: HTMLEuclidPortfolioOverviewElement, ev: EuclidPortfolioOverviewCustomEvent<HTMLEuclidPortfolioOverviewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEuclidPortfolioOverviewElement: {
        prototype: HTMLEuclidPortfolioOverviewElement;
        new (): HTMLEuclidPortfolioOverviewElement;
    };
    interface HTMLEuclidSwapCardElementEventMap {
        "swapInitiated": {
    inputToken: SwapToken;
    outputToken: SwapToken;
    inputAmount: string;
    outputAmount: string;
    settings: SwapSettings;
    quote: SwapQuote;
  };
        "tokenSelect": {
    type: 'input' | 'output';
    token: SwapToken;
  };
        "quoteRequested": {
    inputToken: SwapToken;
    outputToken: SwapToken;
    inputAmount: string;
  };
        "settingsChanged": SwapSettings;
    }
    interface HTMLEuclidSwapCardElement extends Components.EuclidSwapCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEuclidSwapCardElementEventMap>(type: K, listener: (this: HTMLEuclidSwapCardElement, ev: EuclidSwapCardCustomEvent<HTMLEuclidSwapCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEuclidSwapCardElementEventMap>(type: K, listener: (this: HTMLEuclidSwapCardElement, ev: EuclidSwapCardCustomEvent<HTMLEuclidSwapCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEuclidSwapCardElement: {
        prototype: HTMLEuclidSwapCardElement;
        new (): HTMLEuclidSwapCardElement;
    };
    interface HTMLEuclidSwapControllerElement extends Components.EuclidSwapController, HTMLStencilElement {
    }
    var HTMLEuclidSwapControllerElement: {
        prototype: HTMLEuclidSwapControllerElement;
        new (): HTMLEuclidSwapControllerElement;
    };
    interface HTMLEuclidTokenContentElementEventMap {
        "tokenSelect": {
    token: TokenInfo;
    selectorType: 'input' | 'output';
  };
    }
    interface HTMLEuclidTokenContentElement extends Components.EuclidTokenContent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEuclidTokenContentElementEventMap>(type: K, listener: (this: HTMLEuclidTokenContentElement, ev: EuclidTokenContentCustomEvent<HTMLEuclidTokenContentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEuclidTokenContentElementEventMap>(type: K, listener: (this: HTMLEuclidTokenContentElement, ev: EuclidTokenContentCustomEvent<HTMLEuclidTokenContentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEuclidTokenContentElement: {
        prototype: HTMLEuclidTokenContentElement;
        new (): HTMLEuclidTokenContentElement;
    };
    interface HTMLEuclidTokenInputElementEventMap {
        "valueChange": string;
        "tokenSelect": void;
        "maxClick": void;
    }
    interface HTMLEuclidTokenInputElement extends Components.EuclidTokenInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEuclidTokenInputElementEventMap>(type: K, listener: (this: HTMLEuclidTokenInputElement, ev: EuclidTokenInputCustomEvent<HTMLEuclidTokenInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEuclidTokenInputElementEventMap>(type: K, listener: (this: HTMLEuclidTokenInputElement, ev: EuclidTokenInputCustomEvent<HTMLEuclidTokenInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEuclidTokenInputElement: {
        prototype: HTMLEuclidTokenInputElement;
        new (): HTMLEuclidTokenInputElement;
    };
    interface HTMLEuclidTokenItemElementEventMap {
        "tokenClick": TokenMetadata;
    }
    interface HTMLEuclidTokenItemElement extends Components.EuclidTokenItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEuclidTokenItemElementEventMap>(type: K, listener: (this: HTMLEuclidTokenItemElement, ev: EuclidTokenItemCustomEvent<HTMLEuclidTokenItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEuclidTokenItemElementEventMap>(type: K, listener: (this: HTMLEuclidTokenItemElement, ev: EuclidTokenItemCustomEvent<HTMLEuclidTokenItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEuclidTokenItemElement: {
        prototype: HTMLEuclidTokenItemElement;
        new (): HTMLEuclidTokenItemElement;
    };
    interface HTMLEuclidTokensListElementEventMap {
        "tokenSelected": TokenMetadata;
        "filtersChanged": TokenFilters;
    }
    interface HTMLEuclidTokensListElement extends Components.EuclidTokensList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEuclidTokensListElementEventMap>(type: K, listener: (this: HTMLEuclidTokensListElement, ev: EuclidTokensListCustomEvent<HTMLEuclidTokensListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEuclidTokensListElementEventMap>(type: K, listener: (this: HTMLEuclidTokensListElement, ev: EuclidTokensListCustomEvent<HTMLEuclidTokensListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEuclidTokensListElement: {
        prototype: HTMLEuclidTokensListElement;
        new (): HTMLEuclidTokensListElement;
    };
    interface HTMLEuclidTxTrackerControllerElement extends Components.EuclidTxTrackerController, HTMLStencilElement {
    }
    var HTMLEuclidTxTrackerControllerElement: {
        prototype: HTMLEuclidTxTrackerControllerElement;
        new (): HTMLEuclidTxTrackerControllerElement;
    };
    interface HTMLEuclidUserDataControllerElement extends Components.EuclidUserDataController, HTMLStencilElement {
    }
    var HTMLEuclidUserDataControllerElement: {
        prototype: HTMLEuclidUserDataControllerElement;
        new (): HTMLEuclidUserDataControllerElement;
    };
    interface HTMLEuclidWalletContentElementEventMap {
        "walletConnect": WalletProvider;
    }
    interface HTMLEuclidWalletContentElement extends Components.EuclidWalletContent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEuclidWalletContentElementEventMap>(type: K, listener: (this: HTMLEuclidWalletContentElement, ev: EuclidWalletContentCustomEvent<HTMLEuclidWalletContentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEuclidWalletContentElementEventMap>(type: K, listener: (this: HTMLEuclidWalletContentElement, ev: EuclidWalletContentCustomEvent<HTMLEuclidWalletContentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEuclidWalletContentElement: {
        prototype: HTMLEuclidWalletContentElement;
        new (): HTMLEuclidWalletContentElement;
    };
    interface HTMLEuclidWalletControllerElement extends Components.EuclidWalletController, HTMLStencilElement {
    }
    var HTMLEuclidWalletControllerElement: {
        prototype: HTMLEuclidWalletControllerElement;
        new (): HTMLEuclidWalletControllerElement;
    };
    interface HTMLPoolItemElementEventMap {
        "addLiquidity": PoolInfo;
        "removeLiquidity": { pool: PoolInfo; position: UserPoolPosition1 };
        "stakeTokens": { pool: PoolInfo; position?: UserPoolPosition1 };
        "claimRewards": { pool: PoolInfo; position: UserPoolPosition1 };
    }
    interface HTMLPoolItemElement extends Components.PoolItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPoolItemElementEventMap>(type: K, listener: (this: HTMLPoolItemElement, ev: PoolItemCustomEvent<HTMLPoolItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPoolItemElementEventMap>(type: K, listener: (this: HTMLPoolItemElement, ev: PoolItemCustomEvent<HTMLPoolItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPoolItemElement: {
        prototype: HTMLPoolItemElement;
        new (): HTMLPoolItemElement;
    };
    interface HTMLPoolsFiltersElementEventMap {
        "filtersChanged": PoolFilters1;
    }
    interface HTMLPoolsFiltersElement extends Components.PoolsFilters, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPoolsFiltersElementEventMap>(type: K, listener: (this: HTMLPoolsFiltersElement, ev: PoolsFiltersCustomEvent<HTMLPoolsFiltersElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPoolsFiltersElementEventMap>(type: K, listener: (this: HTMLPoolsFiltersElement, ev: PoolsFiltersCustomEvent<HTMLPoolsFiltersElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPoolsFiltersElement: {
        prototype: HTMLPoolsFiltersElement;
        new (): HTMLPoolsFiltersElement;
    };
    interface HTMLPoolsLoadingElement extends Components.PoolsLoading, HTMLStencilElement {
    }
    var HTMLPoolsLoadingElement: {
        prototype: HTMLPoolsLoadingElement;
        new (): HTMLPoolsLoadingElement;
    };
    interface HTMLPoolsStatsElement extends Components.PoolsStats, HTMLStencilElement {
    }
    var HTMLPoolsStatsElement: {
        prototype: HTMLPoolsStatsElement;
        new (): HTMLPoolsStatsElement;
    };
    interface HTMLElementTagNameMap {
        "euclid-button": HTMLEuclidButtonElement;
        "euclid-chain-item": HTMLEuclidChainItemElement;
        "euclid-chains-list": HTMLEuclidChainsListElement;
        "euclid-core-provider": HTMLEuclidCoreProviderElement;
        "euclid-data-list": HTMLEuclidDataListElement;
        "euclid-liquidity-card": HTMLEuclidLiquidityCardElement;
        "euclid-liquidity-controller": HTMLEuclidLiquidityControllerElement;
        "euclid-list-items": HTMLEuclidListItemsElement;
        "euclid-market-data-controller": HTMLEuclidMarketDataControllerElement;
        "euclid-modal": HTMLEuclidModalElement;
        "euclid-pools-list": HTMLEuclidPoolsListElement;
        "euclid-portfolio-overview": HTMLEuclidPortfolioOverviewElement;
        "euclid-swap-card": HTMLEuclidSwapCardElement;
        "euclid-swap-controller": HTMLEuclidSwapControllerElement;
        "euclid-token-content": HTMLEuclidTokenContentElement;
        "euclid-token-input": HTMLEuclidTokenInputElement;
        "euclid-token-item": HTMLEuclidTokenItemElement;
        "euclid-tokens-list": HTMLEuclidTokensListElement;
        "euclid-tx-tracker-controller": HTMLEuclidTxTrackerControllerElement;
        "euclid-user-data-controller": HTMLEuclidUserDataControllerElement;
        "euclid-wallet-content": HTMLEuclidWalletContentElement;
        "euclid-wallet-controller": HTMLEuclidWalletControllerElement;
        "pool-item": HTMLPoolItemElement;
        "pools-filters": HTMLPoolsFiltersElement;
        "pools-loading": HTMLPoolsLoadingElement;
        "pools-stats": HTMLPoolsStatsElement;
    }
}
declare namespace LocalJSX {
    interface EuclidButton {
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "fullWidth"?: boolean;
        "href"?: string;
        /**
          * @default false
         */
        "loading"?: boolean;
        /**
          * @default 'md'
         */
        "size"?: ButtonSize;
        /**
          * @default 'button'
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * @default 'primary'
         */
        "variant"?: ButtonVariant;
    }
    interface EuclidChainItem {
        /**
          * Chain data to display
         */
        "chain": EuclidChainConfig;
        /**
          * Whether the item is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Display mode: card (full info), list-item (compact row), compact (minimal)
          * @default 'list-item'
         */
        "displayMode"?: ChainDisplayMode;
        /**
          * Emitted when the chain item is hovered
         */
        "onChainHover"?: (event: EuclidChainItemCustomEvent<EuclidChainConfig>) => void;
        /**
          * Emitted when the chain item is clicked (only if selectable)
         */
        "onChainSelect"?: (event: EuclidChainItemCustomEvent<EuclidChainConfig>) => void;
        /**
          * Whether the item is selectable (shows hover states, emits events)
          * @default false
         */
        "selectable"?: boolean;
        /**
          * Whether the item is currently selected
          * @default false
         */
        "selected"?: boolean;
        /**
          * Fields to show in the display
          * @default ['logo', 'name', 'type']
         */
        "showFields"?: ChainField[];
    }
    interface EuclidChainsList {
        /**
          * Component card title
          * @default 'Select Chain'
         */
        "cardTitle"?: string;
        /**
          * Chain data (gets from market store automatically)
          * @default []
         */
        "chains"?: EuclidChainConfig[];
        /**
          * Display mode for chain items
          * @default 'list-item'
         */
        "displayMode"?: ChainDisplayMode1;
        /**
          * Whether to show filters
          * @default true
         */
        "filterable"?: boolean;
        /**
          * Items per page (0 = no pagination)
          * @default 0
         */
        "itemsPerPage"?: number;
        /**
          * Whether component is loading
          * @default false
         */
        "loading"?: boolean;
        "onChainHover"?: (event: EuclidChainsListCustomEvent<EuclidChainConfig>) => void;
        "onChainSelected"?: (event: EuclidChainsListCustomEvent<EuclidChainConfig>) => void;
        /**
          * Whether to show search functionality
          * @default true
         */
        "searchable"?: boolean;
        /**
          * Whether chains are selectable
          * @default true
         */
        "selectable"?: boolean;
        /**
          * Fields to show for each chain
          * @default ['logo', 'name', 'type']
         */
        "showFields"?: ChainField1[];
    }
    interface EuclidCoreProvider {
    }
    interface EuclidDataList {
        /**
          * Card title
          * @default ''
         */
        "cardTitle"?: string;
        /**
          * Type of data to display: tokens, chains, or pools
         */
        "dataType": DataType;
        /**
          * Display mode for items
          * @default 'card'
         */
        "displayMode"?: DisplayMode;
        /**
          * Whether to enable filtering
          * @default true
         */
        "filterable"?: boolean;
        /**
          * Items per page for pagination
          * @default 10
         */
        "itemsPerPage"?: number;
        /**
          * External loading state override
          * @default false
         */
        "loading"?: boolean;
        "onFiltersChanged"?: (event: EuclidDataListCustomEvent<{ filters: FilterState; resultCount: number }>) => void;
        "onItemHover"?: (event: EuclidDataListCustomEvent<{ item: DataItem; id: string }>) => void;
        "onItemSelected"?: (event: EuclidDataListCustomEvent<{ item: DataItem; id: string }>) => void;
        "onPageChanged"?: (event: EuclidDataListCustomEvent<{ page: number; totalPages: number; itemsPerPage: number }>) => void;
        /**
          * Whether to enable search
          * @default true
         */
        "searchable"?: boolean;
        /**
          * Whether items are selectable
          * @default true
         */
        "selectable"?: boolean;
        /**
          * Fields to show in item components (comma-separated string)
          * @default ''
         */
        "showFields"?: string;
        /**
          * Whether to show statistics
          * @default true
         */
        "showStats"?: boolean;
        /**
          * Whether to enable sorting
          * @default true
         */
        "sortable"?: boolean;
        /**
          * Wallet address for pool positions
          * @default ''
         */
        "walletAddress"?: string;
    }
    interface EuclidLiquidityCard {
        /**
          * Card title
          * @default 'Manage Liquidity'
         */
        "cardTitle"?: string;
        /**
          * Default slippage tolerance (0.5 = 0.5%)
          * @default 0.5
         */
        "defaultSlippage"?: number;
        /**
          * Whether the liquidity functionality is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Whether the component is in loading state
          * @default false
         */
        "loading"?: boolean;
        /**
          * LP token amount for removal
          * @default ''
         */
        "lpTokenAmount"?: string;
        /**
          * Current mode: 'add' or 'remove'
          * @default 'add'
         */
        "mode"?: 'add' | 'remove';
        "onLiquidityAdded"?: (event: EuclidLiquidityCardCustomEvent<{
    pool: LiquidityPoolInfo;
    tokenAAmount: string;
    tokenBAmount: string;
    expectedLpTokens: string;
    slippage: number;
  }>) => void;
        "onLiquidityRemoved"?: (event: EuclidLiquidityCardCustomEvent<{
    pool: LiquidityPoolInfo;
    lpTokenAmount: string;
    expectedTokenA: string;
    expectedTokenB: string;
    slippage: number;
  }>) => void;
        "onPoolSelected"?: (event: EuclidLiquidityCardCustomEvent<PoolInfo>) => void;
        "onQuoteRequested"?: (event: EuclidLiquidityCardCustomEvent<{
    pool: PoolInfo;
    tokenAAmount?: string;
    tokenBAmount?: string;
    lpTokenAmount?: string;
    mode: 'add' | 'remove';
  }>) => void;
        /**
          * Available pools (legacy - use store instead)
          * @deprecated Use marketStore instead
          * @default []
         */
        "pools"?: LiquidityPoolInfo[];
        /**
          * User's liquidity positions
          * @default []
         */
        "positions"?: LiquidityPosition[];
        /**
          * Selected pool for liquidity operations
          * @default null
         */
        "selectedPool"?: LiquidityPoolInfo | null;
        /**
          * Token A amount input
          * @default ''
         */
        "tokenAAmount"?: string;
        /**
          * Token B amount input
          * @default ''
         */
        "tokenBAmount"?: string;
        /**
          * Available tokens for liquidity provision (legacy - use store instead)
          * @deprecated Use marketStore instead
          * @default []
         */
        "tokens"?: LiquidityToken[];
        /**
          * Connected wallet address
          * @default ''
         */
        "walletAddress"?: string;
    }
    interface EuclidLiquidityController {
    }
    interface EuclidListItems {
        /**
          * Display mode for items
          * @default 'card'
         */
        "displayMode"?: DisplayMode1;
        /**
          * Filter configurations
          * @default []
         */
        "filterConfigs"?: FilterConfig[];
        /**
          * Whether to show filters
          * @default true
         */
        "filterable"?: boolean;
        /**
          * Additional props to pass to item components
          * @default {}
         */
        "itemProps"?: Record<string, unknown>;
        /**
          * Type of items to display (determines data source and item component)
          * @default 'token'
         */
        "itemType"?: ListItemType;
        /**
          * Items data (will use store data if available, fallback to this)
          * @default []
         */
        "items"?: ListItemData[];
        /**
          * Items per page (0 = no pagination)
          * @default 12
         */
        "itemsPerPage"?: number;
        /**
          * Component title
          * @default 'Items'
         */
        "listTitle"?: string;
        /**
          * Whether component is loading
          * @default false
         */
        "loading"?: boolean;
        "onFiltersChanged"?: (event: EuclidListItemsCustomEvent<ListFilters>) => void;
        "onItemHover"?: (event: EuclidListItemsCustomEvent<ListItemData>) => void;
        "onItemSelected"?: (event: EuclidListItemsCustomEvent<ListItemData>) => void;
        /**
          * Fields to search in (e.g., ['displayName', 'tokenId'])
          * @default ['name']
         */
        "searchFields"?: string[];
        /**
          * Whether to show search functionality
          * @default true
         */
        "searchable"?: boolean;
        /**
          * Whether items are selectable
          * @default true
         */
        "selectable"?: boolean;
        /**
          * Fields to show for each item (passed to item component)
          * @default []
         */
        "showFields"?: string[];
        /**
          * Sort configurations
          * @default []
         */
        "sortConfigs"?: SortConfig[];
    }
    interface EuclidMarketDataController {
    }
    interface EuclidModal {
    }
    interface EuclidPoolsList {
        /**
          * Card title
          * @default 'Liquidity Pools'
         */
        "cardTitle"?: string;
        /**
          * Items per page for pagination
          * @default 10
         */
        "itemsPerPage"?: number;
        /**
          * Whether the component is in loading state (overrides store loading)
          * @default false
         */
        "loading"?: boolean;
        "onAddLiquidity"?: (event: EuclidPoolsListCustomEvent<PoolInfo>) => void;
        "onClaimRewards"?: (event: EuclidPoolsListCustomEvent<{ pool: PoolInfo; position: UserPoolPosition }>) => void;
        "onFiltersChanged"?: (event: EuclidPoolsListCustomEvent<PoolFilters>) => void;
        "onPoolSelected"?: (event: EuclidPoolsListCustomEvent<PoolInfo>) => void;
        "onRemoveLiquidity"?: (event: EuclidPoolsListCustomEvent<{ pool: PoolInfo; position: UserPoolPosition }>) => void;
        "onStakeTokens"?: (event: EuclidPoolsListCustomEvent<{ pool: PoolInfo; position?: UserPoolPosition }>) => void;
        /**
          * Available pools data (gets from market store automatically)
          * @deprecated Use store instead
          * @default []
         */
        "pools"?: PoolInfo[];
        /**
          * User's positions in pools
          * @default []
         */
        "positions"?: UserPoolPosition[];
        /**
          * Token metadata for logos and display names (gets from market store automatically)
          * @deprecated Use store instead
          * @default []
         */
        "tokenMetadata"?: TokenMetadata[];
        /**
          * Connected wallet address
          * @default ''
         */
        "walletAddress"?: string;
    }
    interface EuclidPortfolioOverview {
        /**
          * Card title
          * @default 'Portfolio Overview'
         */
        "cardTitle"?: string;
        /**
          * Chart data for portfolio value over time
          * @default []
         */
        "chartData"?: ChartDataPoint[];
        /**
          * Whether the component is in loading state
          * @default false
         */
        "loading"?: boolean;
        "onClaimRewards"?: (event: EuclidPortfolioOverviewCustomEvent<PoolPosition | StakingPosition>) => void;
        "onManagePosition"?: (event: EuclidPortfolioOverviewCustomEvent<PoolPosition>) => void;
        "onPositionSelected"?: (event: EuclidPortfolioOverviewCustomEvent<PoolPosition>) => void;
        "onStakeMore"?: (event: EuclidPortfolioOverviewCustomEvent<StakingPosition>) => void;
        "onTimePeriodChanged"?: (event: EuclidPortfolioOverviewCustomEvent<string>) => void;
        "onUnstake"?: (event: EuclidPortfolioOverviewCustomEvent<StakingPosition>) => void;
        "onViewTransaction"?: (event: EuclidPortfolioOverviewCustomEvent<Transaction>) => void;
        /**
          * User's liquidity pool positions
          * @default []
         */
        "poolPositions"?: PoolPosition[];
        /**
          * Portfolio statistics
          * @default null
         */
        "portfolioStats"?: PortfolioStats | null;
        /**
          * Whether to show detailed analytics
          * @default true
         */
        "showAnalytics"?: boolean;
        /**
          * User's staking positions
          * @default []
         */
        "stakingPositions"?: StakingPosition[];
        /**
          * Time period for charts and stats
          * @default '1W'
         */
        "timePeriod"?: '1D' | '1W' | '1M' | '3M' | '1Y' | 'ALL';
        /**
          * User's token balances
          * @default []
         */
        "tokenBalances"?: TokenBalance[];
        /**
          * Recent transactions
          * @default []
         */
        "transactions"?: Transaction[];
        /**
          * Connected wallet address
          * @default ''
         */
        "walletAddress"?: string;
    }
    interface EuclidSwapCard {
        /**
          * Card title
          * @default 'Swap Tokens'
         */
        "cardTitle"?: string;
        /**
          * Default slippage tolerance (0.1 = 0.1%)
          * @default 0.5
         */
        "defaultSlippage"?: number;
        /**
          * Whether the swap functionality is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Input amount value
          * @default ''
         */
        "inputAmount"?: string;
        /**
          * Currently selected input token
          * @default null
         */
        "inputToken"?: SwapToken | null;
        /**
          * Whether the component is in loading state
          * @default false
         */
        "loading"?: boolean;
        "onQuoteRequested"?: (event: EuclidSwapCardCustomEvent<{
    inputToken: SwapToken;
    outputToken: SwapToken;
    inputAmount: string;
  }>) => void;
        "onSettingsChanged"?: (event: EuclidSwapCardCustomEvent<SwapSettings>) => void;
        "onSwapInitiated"?: (event: EuclidSwapCardCustomEvent<{
    inputToken: SwapToken;
    outputToken: SwapToken;
    inputAmount: string;
    outputAmount: string;
    settings: SwapSettings;
    quote: SwapQuote;
  }>) => void;
        "onTokenSelect"?: (event: EuclidSwapCardCustomEvent<{
    type: 'input' | 'output';
    token: SwapToken;
  }>) => void;
        /**
          * Currently selected output token
          * @default null
         */
        "outputToken"?: SwapToken | null;
        /**
          * Whether to show advanced settings
          * @default false
         */
        "showAdvanced"?: boolean;
        /**
          * Available tokens for swapping (gets from market store automatically)
          * @deprecated Use store instead
          * @default []
         */
        "tokens"?: SwapToken[];
        /**
          * Connected wallet address
          * @default ''
         */
        "walletAddress"?: string;
    }
    interface EuclidSwapController {
    }
    interface EuclidTokenContent {
        "onTokenSelect"?: (event: EuclidTokenContentCustomEvent<{
    token: TokenInfo;
    selectorType: 'input' | 'output';
  }>) => void;
    }
    interface EuclidTokenInput {
        /**
          * Whether the input is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error message to display
         */
        "error"?: string;
        /**
          * Label for the input
         */
        "label"?: string;
        /**
          * Loading state
          * @default false
         */
        "loading"?: boolean;
        /**
          * Emitted when the max button is clicked
         */
        "onMaxClick"?: (event: EuclidTokenInputCustomEvent<void>) => void;
        /**
          * Emitted when the token selector is clicked
         */
        "onTokenSelect"?: (event: EuclidTokenInputCustomEvent<void>) => void;
        /**
          * Emitted when the input value changes
         */
        "onValueChange"?: (event: EuclidTokenInputCustomEvent<string>) => void;
        /**
          * Placeholder text for the input
          * @default '0.0'
         */
        "placeholder"?: string;
        /**
          * Whether to show the balance
          * @default true
         */
        "showBalance"?: boolean;
        /**
          * Whether to show the max button
          * @default true
         */
        "showMax"?: boolean;
        /**
          * The current token selection
         */
        "token"?: TokenInfo1;
        /**
          * Whether the token selector is clickable
          * @default true
         */
        "tokenSelectable"?: boolean;
        /**
          * The input value (amount)
          * @default ''
         */
        "value"?: string;
    }
    interface EuclidTokenItem {
        /**
          * @default 'card'
         */
        "displayMode"?: TokenDisplayMode;
        "onTokenClick"?: (event: EuclidTokenItemCustomEvent<TokenMetadata>) => void;
        /**
          * @default true
         */
        "selectable"?: boolean;
        /**
          * @default false
         */
        "selected"?: boolean;
        /**
          * @default ['logo', 'name', 'price', 'change', 'volume24h', 'decimals', 'chains', 'tags', 'verified']
         */
        "showFields"?: TokenField[];
        "token": TokenMetadata;
    }
    interface EuclidTokensList {
        /**
          * Card title
          * @default 'Available Tokens'
         */
        "cardTitle"?: string;
        /**
          * Display mode for token items
          * @default 'card'
         */
        "displayMode"?: TokenDisplayMode1;
        /**
          * Whether to show filters
          * @default true
         */
        "filterable"?: boolean;
        /**
          * Items per page for pagination (0 = no pagination)
          * @default 12
         */
        "itemsPerPage"?: number;
        /**
          * Whether the component is in loading state (overrides store loading)
          * @default false
         */
        "loading"?: boolean;
        "onFiltersChanged"?: (event: EuclidTokensListCustomEvent<TokenFilters>) => void;
        "onTokenSelected"?: (event: EuclidTokensListCustomEvent<TokenMetadata>) => void;
        /**
          * Whether to show search functionality
          * @default true
         */
        "searchable"?: boolean;
        /**
          * Whether tokens are selectable
          * @default true
         */
        "selectable"?: boolean;
        /**
          * Fields to show for each token
          * @default ['logo', 'name', 'price', 'change', 'volume24h', 'decimals', 'chains', 'tags', 'verified']
         */
        "showFields"?: TokenField1[];
        /**
          * Available tokens data (gets from market store automatically)
          * @deprecated Use store instead
          * @default []
         */
        "tokens"?: TokenMetadata[];
    }
    interface EuclidTxTrackerController {
    }
    interface EuclidUserDataController {
    }
    interface EuclidWalletContent {
        "onWalletConnect"?: (event: EuclidWalletContentCustomEvent<WalletProvider>) => void;
    }
    interface EuclidWalletController {
    }
    interface PoolItem {
        "onAddLiquidity"?: (event: PoolItemCustomEvent<PoolInfo>) => void;
        "onClaimRewards"?: (event: PoolItemCustomEvent<{ pool: PoolInfo; position: UserPoolPosition1 }>) => void;
        "onRemoveLiquidity"?: (event: PoolItemCustomEvent<{ pool: PoolInfo; position: UserPoolPosition1 }>) => void;
        "onStakeTokens"?: (event: PoolItemCustomEvent<{ pool: PoolInfo; position?: UserPoolPosition1 }>) => void;
        "pool": PoolInfo;
        "position"?: UserPoolPosition1;
        /**
          * @default []
         */
        "tokens"?: TokenMetadata[];
        "walletAddress"?: string;
    }
    interface PoolsFilters {
        "filters": PoolFilters1;
        "onFiltersChanged"?: (event: PoolsFiltersCustomEvent<PoolFilters1>) => void;
        /**
          * @default ''
         */
        "walletAddress"?: string;
    }
    interface PoolsLoading {
        /**
          * @default 6
         */
        "count"?: number;
    }
    interface PoolsStats {
        /**
          * @default 0
         */
        "filteredPools"?: number;
        /**
          * @default 0
         */
        "totalPools"?: number;
        /**
          * @default 0
         */
        "totalTvl"?: number;
        /**
          * @default 0
         */
        "userPositions"?: number;
        "walletAddress"?: string;
    }
    interface IntrinsicElements {
        "euclid-button": EuclidButton;
        "euclid-chain-item": EuclidChainItem;
        "euclid-chains-list": EuclidChainsList;
        "euclid-core-provider": EuclidCoreProvider;
        "euclid-data-list": EuclidDataList;
        "euclid-liquidity-card": EuclidLiquidityCard;
        "euclid-liquidity-controller": EuclidLiquidityController;
        "euclid-list-items": EuclidListItems;
        "euclid-market-data-controller": EuclidMarketDataController;
        "euclid-modal": EuclidModal;
        "euclid-pools-list": EuclidPoolsList;
        "euclid-portfolio-overview": EuclidPortfolioOverview;
        "euclid-swap-card": EuclidSwapCard;
        "euclid-swap-controller": EuclidSwapController;
        "euclid-token-content": EuclidTokenContent;
        "euclid-token-input": EuclidTokenInput;
        "euclid-token-item": EuclidTokenItem;
        "euclid-tokens-list": EuclidTokensList;
        "euclid-tx-tracker-controller": EuclidTxTrackerController;
        "euclid-user-data-controller": EuclidUserDataController;
        "euclid-wallet-content": EuclidWalletContent;
        "euclid-wallet-controller": EuclidWalletController;
        "pool-item": PoolItem;
        "pools-filters": PoolsFilters;
        "pools-loading": PoolsLoading;
        "pools-stats": PoolsStats;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "euclid-button": LocalJSX.EuclidButton & JSXBase.HTMLAttributes<HTMLEuclidButtonElement>;
            "euclid-chain-item": LocalJSX.EuclidChainItem & JSXBase.HTMLAttributes<HTMLEuclidChainItemElement>;
            "euclid-chains-list": LocalJSX.EuclidChainsList & JSXBase.HTMLAttributes<HTMLEuclidChainsListElement>;
            "euclid-core-provider": LocalJSX.EuclidCoreProvider & JSXBase.HTMLAttributes<HTMLEuclidCoreProviderElement>;
            "euclid-data-list": LocalJSX.EuclidDataList & JSXBase.HTMLAttributes<HTMLEuclidDataListElement>;
            "euclid-liquidity-card": LocalJSX.EuclidLiquidityCard & JSXBase.HTMLAttributes<HTMLEuclidLiquidityCardElement>;
            "euclid-liquidity-controller": LocalJSX.EuclidLiquidityController & JSXBase.HTMLAttributes<HTMLEuclidLiquidityControllerElement>;
            "euclid-list-items": LocalJSX.EuclidListItems & JSXBase.HTMLAttributes<HTMLEuclidListItemsElement>;
            "euclid-market-data-controller": LocalJSX.EuclidMarketDataController & JSXBase.HTMLAttributes<HTMLEuclidMarketDataControllerElement>;
            "euclid-modal": LocalJSX.EuclidModal & JSXBase.HTMLAttributes<HTMLEuclidModalElement>;
            "euclid-pools-list": LocalJSX.EuclidPoolsList & JSXBase.HTMLAttributes<HTMLEuclidPoolsListElement>;
            "euclid-portfolio-overview": LocalJSX.EuclidPortfolioOverview & JSXBase.HTMLAttributes<HTMLEuclidPortfolioOverviewElement>;
            "euclid-swap-card": LocalJSX.EuclidSwapCard & JSXBase.HTMLAttributes<HTMLEuclidSwapCardElement>;
            "euclid-swap-controller": LocalJSX.EuclidSwapController & JSXBase.HTMLAttributes<HTMLEuclidSwapControllerElement>;
            "euclid-token-content": LocalJSX.EuclidTokenContent & JSXBase.HTMLAttributes<HTMLEuclidTokenContentElement>;
            "euclid-token-input": LocalJSX.EuclidTokenInput & JSXBase.HTMLAttributes<HTMLEuclidTokenInputElement>;
            "euclid-token-item": LocalJSX.EuclidTokenItem & JSXBase.HTMLAttributes<HTMLEuclidTokenItemElement>;
            "euclid-tokens-list": LocalJSX.EuclidTokensList & JSXBase.HTMLAttributes<HTMLEuclidTokensListElement>;
            "euclid-tx-tracker-controller": LocalJSX.EuclidTxTrackerController & JSXBase.HTMLAttributes<HTMLEuclidTxTrackerControllerElement>;
            "euclid-user-data-controller": LocalJSX.EuclidUserDataController & JSXBase.HTMLAttributes<HTMLEuclidUserDataControllerElement>;
            "euclid-wallet-content": LocalJSX.EuclidWalletContent & JSXBase.HTMLAttributes<HTMLEuclidWalletContentElement>;
            "euclid-wallet-controller": LocalJSX.EuclidWalletController & JSXBase.HTMLAttributes<HTMLEuclidWalletControllerElement>;
            "pool-item": LocalJSX.PoolItem & JSXBase.HTMLAttributes<HTMLPoolItemElement>;
            "pools-filters": LocalJSX.PoolsFilters & JSXBase.HTMLAttributes<HTMLPoolsFiltersElement>;
            "pools-loading": LocalJSX.PoolsLoading & JSXBase.HTMLAttributes<HTMLPoolsLoadingElement>;
            "pools-stats": LocalJSX.PoolsStats & JSXBase.HTMLAttributes<HTMLPoolsStatsElement>;
        }
    }
}
