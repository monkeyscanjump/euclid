{"version":3,"file":"rest-client.js","sourceRoot":"","sources":["../../src/utils/rest-client.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  GetRoutesRequest,\n  GetRoutesResponse,\n  RoutePath,\n  SwapRequest,\n  AddLiquidityRequest,\n  RemoveLiquidityRequest,\n  TransactionResponse,\n  ApiResponse\n} from './types/api.types';\n\n// REST API endpoint for Euclid testnet\nconst EUCLID_REST_ENDPOINT = 'https://testnet.api.euclidprotocol.com/api/v1';\n\n/**\n * REST client for Euclid Protocol\n * Handles all REST API calls for transactions, routing, and operations\n */\nexport class EuclidRESTClient {\n  private endpoint: string;\n\n  constructor(endpoint: string = EUCLID_REST_ENDPOINT) {\n    this.endpoint = endpoint;\n  }\n\n  /**\n   * Execute a REST API request\n   */\n  private async request<T>(\n    path: string,\n    options: {\n      method?: 'GET' | 'POST' | 'PUT' | 'DELETE';\n      body?: unknown;\n      headers?: Record<string, string>;\n    } = {}\n  ): Promise<ApiResponse<T>> {\n    try {\n      const { method = 'GET', body, headers = {} } = options;\n\n      const response = await fetch(`${this.endpoint}${path}`, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          ...headers,\n        },\n        body: body ? JSON.stringify(body) : undefined,\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      const result = await response.json();\n\n      return {\n        success: true,\n        data: result,\n      };\n    } catch (error) {\n      console.error(`REST API request failed (${path}):`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Get routing paths for a swap\n   */\n  async getRoutes(request: GetRoutesRequest): Promise<RoutePath[]> {\n    const queryParams = new URLSearchParams({\n      amount_in: request.amount_in,\n      token_in: request.token_in,\n      token_out: request.token_out,\n    });\n\n    if (request.external !== undefined) {\n      queryParams.append('external', request.external.toString());\n    }\n\n    if (request.chain_uids && request.chain_uids.length > 0) {\n      request.chain_uids.forEach(chainUID => {\n        queryParams.append('chain_uids', chainUID);\n      });\n    }\n\n    const result = await this.request<GetRoutesResponse>(`/routes?${queryParams}`);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to fetch routes');\n    }\n\n    return result.data.paths;\n  }\n\n  /**\n   * Build a swap transaction\n   */\n  async buildSwapTransaction(request: SwapRequest): Promise<TransactionResponse> {\n    const result = await this.request<TransactionResponse>('/swap', {\n      method: 'POST',\n      body: request,\n    });\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to build swap transaction');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Build an add liquidity transaction\n   */\n  async buildAddLiquidityTransaction(request: AddLiquidityRequest): Promise<TransactionResponse> {\n    const result = await this.request<TransactionResponse>('/add_liquidity', {\n      method: 'POST',\n      body: request,\n    });\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to build add liquidity transaction');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Build a remove liquidity transaction\n   */\n  async buildRemoveLiquidityTransaction(request: RemoveLiquidityRequest): Promise<TransactionResponse> {\n    const result = await this.request<TransactionResponse>('/remove_liquidity', {\n      method: 'POST',\n      body: request,\n    });\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to build remove liquidity transaction');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Simulate a swap to get expected output\n   */\n  async simulateSwap(request: {\n    amount_in: string;\n    token_in: string;\n    token_out: string;\n    chain_uid?: string;\n  }): Promise<{ amount_out: string; price_impact: string }> {\n    const queryParams = new URLSearchParams({\n      amount_in: request.amount_in,\n      token_in: request.token_in,\n      token_out: request.token_out,\n    });\n\n    if (request.chain_uid) {\n      queryParams.append('chain_uid', request.chain_uid);\n    }\n\n    const result = await this.request<{ amount_out: string; price_impact: string }>(`/simulate_swap?${queryParams}`);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to simulate swap');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Get optimal route for a swap with the best price\n   */\n  async getBestRoute(request: GetRoutesRequest): Promise<RoutePath | null> {\n    const routes = await this.getRoutes(request);\n\n    if (routes.length === 0) {\n      return null;\n    }\n\n    // Sort by total price impact (lower is better)\n    return routes.sort((a, b) =>\n      parseFloat(a.total_price_impact) - parseFloat(b.total_price_impact)\n    )[0];\n  }\n\n  /**\n   * Get transaction status\n   */\n  async getTransactionStatus(txHash: string, chainUID: string): Promise<{\n    status: 'pending' | 'success' | 'failed';\n    blockHeight?: number;\n    gasUsed?: string;\n    fee?: string;\n  }> {\n    const result = await this.request<{\n      status: 'pending' | 'success' | 'failed';\n      blockHeight?: number;\n      gasUsed?: string;\n      fee?: string;\n    }>(`/transaction/${txHash}?chain_uid=${chainUID}`);\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to get transaction status');\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Get gas estimate for a transaction\n   */\n  async estimateGas(transaction: TransactionResponse): Promise<{ gasLimit: string; gasPrice: string }> {\n    const result = await this.request<{ gasLimit: string; gasPrice: string }>('/estimate_gas', {\n      method: 'POST',\n      body: transaction,\n    });\n\n    if (!result.success || !result.data) {\n      throw new Error(result.error || 'Failed to estimate gas');\n    }\n\n    return result.data;\n  }\n}\n\n// Export a default instance\nexport const euclidRESTClient = new EuclidRESTClient();\n"]}